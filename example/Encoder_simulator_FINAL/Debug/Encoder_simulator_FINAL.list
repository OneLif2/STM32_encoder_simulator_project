
Encoder_simulator_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f88  08004f88  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004f88  08004f88  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f88  08004f88  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000078  08005008  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08005008  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e118  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dea  00000000  00000000  0002e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00030c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012924  00000000  00000000  000317b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7e8  00000000  00000000  000440d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000715e1  00000000  00000000  000528bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3e9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e0  00000000  00000000  000c3ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004dd8 	.word	0x08004dd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004dd8 	.word	0x08004dd8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_fdiv>:
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	464f      	mov	r7, r9
 800041c:	4646      	mov	r6, r8
 800041e:	46d6      	mov	lr, sl
 8000420:	0245      	lsls	r5, r0, #9
 8000422:	b5c0      	push	{r6, r7, lr}
 8000424:	0047      	lsls	r7, r0, #1
 8000426:	1c0c      	adds	r4, r1, #0
 8000428:	0a6d      	lsrs	r5, r5, #9
 800042a:	0e3f      	lsrs	r7, r7, #24
 800042c:	0fc6      	lsrs	r6, r0, #31
 800042e:	2f00      	cmp	r7, #0
 8000430:	d100      	bne.n	8000434 <__aeabi_fdiv+0x1c>
 8000432:	e070      	b.n	8000516 <__aeabi_fdiv+0xfe>
 8000434:	2fff      	cmp	r7, #255	; 0xff
 8000436:	d100      	bne.n	800043a <__aeabi_fdiv+0x22>
 8000438:	e075      	b.n	8000526 <__aeabi_fdiv+0x10e>
 800043a:	00eb      	lsls	r3, r5, #3
 800043c:	2580      	movs	r5, #128	; 0x80
 800043e:	04ed      	lsls	r5, r5, #19
 8000440:	431d      	orrs	r5, r3
 8000442:	2300      	movs	r3, #0
 8000444:	4699      	mov	r9, r3
 8000446:	469a      	mov	sl, r3
 8000448:	3f7f      	subs	r7, #127	; 0x7f
 800044a:	0260      	lsls	r0, r4, #9
 800044c:	0a43      	lsrs	r3, r0, #9
 800044e:	4698      	mov	r8, r3
 8000450:	0063      	lsls	r3, r4, #1
 8000452:	0e1b      	lsrs	r3, r3, #24
 8000454:	0fe4      	lsrs	r4, r4, #31
 8000456:	2b00      	cmp	r3, #0
 8000458:	d04e      	beq.n	80004f8 <__aeabi_fdiv+0xe0>
 800045a:	2bff      	cmp	r3, #255	; 0xff
 800045c:	d046      	beq.n	80004ec <__aeabi_fdiv+0xd4>
 800045e:	4642      	mov	r2, r8
 8000460:	00d0      	lsls	r0, r2, #3
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	04d2      	lsls	r2, r2, #19
 8000466:	4302      	orrs	r2, r0
 8000468:	4690      	mov	r8, r2
 800046a:	2200      	movs	r2, #0
 800046c:	3b7f      	subs	r3, #127	; 0x7f
 800046e:	0031      	movs	r1, r6
 8000470:	1aff      	subs	r7, r7, r3
 8000472:	464b      	mov	r3, r9
 8000474:	4061      	eors	r1, r4
 8000476:	b2c9      	uxtb	r1, r1
 8000478:	4313      	orrs	r3, r2
 800047a:	2b0f      	cmp	r3, #15
 800047c:	d900      	bls.n	8000480 <__aeabi_fdiv+0x68>
 800047e:	e0b5      	b.n	80005ec <__aeabi_fdiv+0x1d4>
 8000480:	486e      	ldr	r0, [pc, #440]	; (800063c <__aeabi_fdiv+0x224>)
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	58c3      	ldr	r3, [r0, r3]
 8000486:	469f      	mov	pc, r3
 8000488:	2300      	movs	r3, #0
 800048a:	4698      	mov	r8, r3
 800048c:	0026      	movs	r6, r4
 800048e:	4645      	mov	r5, r8
 8000490:	4692      	mov	sl, r2
 8000492:	4653      	mov	r3, sl
 8000494:	2b02      	cmp	r3, #2
 8000496:	d100      	bne.n	800049a <__aeabi_fdiv+0x82>
 8000498:	e089      	b.n	80005ae <__aeabi_fdiv+0x196>
 800049a:	2b03      	cmp	r3, #3
 800049c:	d100      	bne.n	80004a0 <__aeabi_fdiv+0x88>
 800049e:	e09e      	b.n	80005de <__aeabi_fdiv+0x1c6>
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d018      	beq.n	80004d6 <__aeabi_fdiv+0xbe>
 80004a4:	003b      	movs	r3, r7
 80004a6:	337f      	adds	r3, #127	; 0x7f
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dd69      	ble.n	8000580 <__aeabi_fdiv+0x168>
 80004ac:	076a      	lsls	r2, r5, #29
 80004ae:	d004      	beq.n	80004ba <__aeabi_fdiv+0xa2>
 80004b0:	220f      	movs	r2, #15
 80004b2:	402a      	ands	r2, r5
 80004b4:	2a04      	cmp	r2, #4
 80004b6:	d000      	beq.n	80004ba <__aeabi_fdiv+0xa2>
 80004b8:	3504      	adds	r5, #4
 80004ba:	012a      	lsls	r2, r5, #4
 80004bc:	d503      	bpl.n	80004c6 <__aeabi_fdiv+0xae>
 80004be:	4b60      	ldr	r3, [pc, #384]	; (8000640 <__aeabi_fdiv+0x228>)
 80004c0:	401d      	ands	r5, r3
 80004c2:	003b      	movs	r3, r7
 80004c4:	3380      	adds	r3, #128	; 0x80
 80004c6:	2bfe      	cmp	r3, #254	; 0xfe
 80004c8:	dd00      	ble.n	80004cc <__aeabi_fdiv+0xb4>
 80004ca:	e070      	b.n	80005ae <__aeabi_fdiv+0x196>
 80004cc:	01ad      	lsls	r5, r5, #6
 80004ce:	0a6d      	lsrs	r5, r5, #9
 80004d0:	b2d8      	uxtb	r0, r3
 80004d2:	e002      	b.n	80004da <__aeabi_fdiv+0xc2>
 80004d4:	000e      	movs	r6, r1
 80004d6:	2000      	movs	r0, #0
 80004d8:	2500      	movs	r5, #0
 80004da:	05c0      	lsls	r0, r0, #23
 80004dc:	4328      	orrs	r0, r5
 80004de:	07f6      	lsls	r6, r6, #31
 80004e0:	4330      	orrs	r0, r6
 80004e2:	bce0      	pop	{r5, r6, r7}
 80004e4:	46ba      	mov	sl, r7
 80004e6:	46b1      	mov	r9, r6
 80004e8:	46a8      	mov	r8, r5
 80004ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ec:	4643      	mov	r3, r8
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d13f      	bne.n	8000572 <__aeabi_fdiv+0x15a>
 80004f2:	2202      	movs	r2, #2
 80004f4:	3fff      	subs	r7, #255	; 0xff
 80004f6:	e003      	b.n	8000500 <__aeabi_fdiv+0xe8>
 80004f8:	4643      	mov	r3, r8
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d12d      	bne.n	800055a <__aeabi_fdiv+0x142>
 80004fe:	2201      	movs	r2, #1
 8000500:	0031      	movs	r1, r6
 8000502:	464b      	mov	r3, r9
 8000504:	4061      	eors	r1, r4
 8000506:	b2c9      	uxtb	r1, r1
 8000508:	4313      	orrs	r3, r2
 800050a:	2b0f      	cmp	r3, #15
 800050c:	d834      	bhi.n	8000578 <__aeabi_fdiv+0x160>
 800050e:	484d      	ldr	r0, [pc, #308]	; (8000644 <__aeabi_fdiv+0x22c>)
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	58c3      	ldr	r3, [r0, r3]
 8000514:	469f      	mov	pc, r3
 8000516:	2d00      	cmp	r5, #0
 8000518:	d113      	bne.n	8000542 <__aeabi_fdiv+0x12a>
 800051a:	2304      	movs	r3, #4
 800051c:	4699      	mov	r9, r3
 800051e:	3b03      	subs	r3, #3
 8000520:	2700      	movs	r7, #0
 8000522:	469a      	mov	sl, r3
 8000524:	e791      	b.n	800044a <__aeabi_fdiv+0x32>
 8000526:	2d00      	cmp	r5, #0
 8000528:	d105      	bne.n	8000536 <__aeabi_fdiv+0x11e>
 800052a:	2308      	movs	r3, #8
 800052c:	4699      	mov	r9, r3
 800052e:	3b06      	subs	r3, #6
 8000530:	27ff      	movs	r7, #255	; 0xff
 8000532:	469a      	mov	sl, r3
 8000534:	e789      	b.n	800044a <__aeabi_fdiv+0x32>
 8000536:	230c      	movs	r3, #12
 8000538:	4699      	mov	r9, r3
 800053a:	3b09      	subs	r3, #9
 800053c:	27ff      	movs	r7, #255	; 0xff
 800053e:	469a      	mov	sl, r3
 8000540:	e783      	b.n	800044a <__aeabi_fdiv+0x32>
 8000542:	0028      	movs	r0, r5
 8000544:	f000 f8a0 	bl	8000688 <__clzsi2>
 8000548:	2776      	movs	r7, #118	; 0x76
 800054a:	1f43      	subs	r3, r0, #5
 800054c:	409d      	lsls	r5, r3
 800054e:	2300      	movs	r3, #0
 8000550:	427f      	negs	r7, r7
 8000552:	4699      	mov	r9, r3
 8000554:	469a      	mov	sl, r3
 8000556:	1a3f      	subs	r7, r7, r0
 8000558:	e777      	b.n	800044a <__aeabi_fdiv+0x32>
 800055a:	4640      	mov	r0, r8
 800055c:	f000 f894 	bl	8000688 <__clzsi2>
 8000560:	4642      	mov	r2, r8
 8000562:	1f43      	subs	r3, r0, #5
 8000564:	409a      	lsls	r2, r3
 8000566:	2376      	movs	r3, #118	; 0x76
 8000568:	425b      	negs	r3, r3
 800056a:	4690      	mov	r8, r2
 800056c:	1a1b      	subs	r3, r3, r0
 800056e:	2200      	movs	r2, #0
 8000570:	e77d      	b.n	800046e <__aeabi_fdiv+0x56>
 8000572:	23ff      	movs	r3, #255	; 0xff
 8000574:	2203      	movs	r2, #3
 8000576:	e77a      	b.n	800046e <__aeabi_fdiv+0x56>
 8000578:	000e      	movs	r6, r1
 800057a:	20ff      	movs	r0, #255	; 0xff
 800057c:	2500      	movs	r5, #0
 800057e:	e7ac      	b.n	80004da <__aeabi_fdiv+0xc2>
 8000580:	2001      	movs	r0, #1
 8000582:	1ac0      	subs	r0, r0, r3
 8000584:	281b      	cmp	r0, #27
 8000586:	dca6      	bgt.n	80004d6 <__aeabi_fdiv+0xbe>
 8000588:	379e      	adds	r7, #158	; 0x9e
 800058a:	002a      	movs	r2, r5
 800058c:	40bd      	lsls	r5, r7
 800058e:	40c2      	lsrs	r2, r0
 8000590:	1e6b      	subs	r3, r5, #1
 8000592:	419d      	sbcs	r5, r3
 8000594:	4315      	orrs	r5, r2
 8000596:	076b      	lsls	r3, r5, #29
 8000598:	d004      	beq.n	80005a4 <__aeabi_fdiv+0x18c>
 800059a:	230f      	movs	r3, #15
 800059c:	402b      	ands	r3, r5
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d000      	beq.n	80005a4 <__aeabi_fdiv+0x18c>
 80005a2:	3504      	adds	r5, #4
 80005a4:	016b      	lsls	r3, r5, #5
 80005a6:	d544      	bpl.n	8000632 <__aeabi_fdiv+0x21a>
 80005a8:	2001      	movs	r0, #1
 80005aa:	2500      	movs	r5, #0
 80005ac:	e795      	b.n	80004da <__aeabi_fdiv+0xc2>
 80005ae:	20ff      	movs	r0, #255	; 0xff
 80005b0:	2500      	movs	r5, #0
 80005b2:	e792      	b.n	80004da <__aeabi_fdiv+0xc2>
 80005b4:	2580      	movs	r5, #128	; 0x80
 80005b6:	2600      	movs	r6, #0
 80005b8:	20ff      	movs	r0, #255	; 0xff
 80005ba:	03ed      	lsls	r5, r5, #15
 80005bc:	e78d      	b.n	80004da <__aeabi_fdiv+0xc2>
 80005be:	2300      	movs	r3, #0
 80005c0:	4698      	mov	r8, r3
 80005c2:	2080      	movs	r0, #128	; 0x80
 80005c4:	03c0      	lsls	r0, r0, #15
 80005c6:	4205      	tst	r5, r0
 80005c8:	d009      	beq.n	80005de <__aeabi_fdiv+0x1c6>
 80005ca:	4643      	mov	r3, r8
 80005cc:	4203      	tst	r3, r0
 80005ce:	d106      	bne.n	80005de <__aeabi_fdiv+0x1c6>
 80005d0:	4645      	mov	r5, r8
 80005d2:	4305      	orrs	r5, r0
 80005d4:	026d      	lsls	r5, r5, #9
 80005d6:	0026      	movs	r6, r4
 80005d8:	20ff      	movs	r0, #255	; 0xff
 80005da:	0a6d      	lsrs	r5, r5, #9
 80005dc:	e77d      	b.n	80004da <__aeabi_fdiv+0xc2>
 80005de:	2080      	movs	r0, #128	; 0x80
 80005e0:	03c0      	lsls	r0, r0, #15
 80005e2:	4305      	orrs	r5, r0
 80005e4:	026d      	lsls	r5, r5, #9
 80005e6:	20ff      	movs	r0, #255	; 0xff
 80005e8:	0a6d      	lsrs	r5, r5, #9
 80005ea:	e776      	b.n	80004da <__aeabi_fdiv+0xc2>
 80005ec:	4642      	mov	r2, r8
 80005ee:	016b      	lsls	r3, r5, #5
 80005f0:	0150      	lsls	r0, r2, #5
 80005f2:	4283      	cmp	r3, r0
 80005f4:	d219      	bcs.n	800062a <__aeabi_fdiv+0x212>
 80005f6:	221b      	movs	r2, #27
 80005f8:	2500      	movs	r5, #0
 80005fa:	3f01      	subs	r7, #1
 80005fc:	2601      	movs	r6, #1
 80005fe:	001c      	movs	r4, r3
 8000600:	006d      	lsls	r5, r5, #1
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	2c00      	cmp	r4, #0
 8000606:	db01      	blt.n	800060c <__aeabi_fdiv+0x1f4>
 8000608:	4298      	cmp	r0, r3
 800060a:	d801      	bhi.n	8000610 <__aeabi_fdiv+0x1f8>
 800060c:	1a1b      	subs	r3, r3, r0
 800060e:	4335      	orrs	r5, r6
 8000610:	3a01      	subs	r2, #1
 8000612:	2a00      	cmp	r2, #0
 8000614:	d1f3      	bne.n	80005fe <__aeabi_fdiv+0x1e6>
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	4193      	sbcs	r3, r2
 800061a:	431d      	orrs	r5, r3
 800061c:	003b      	movs	r3, r7
 800061e:	337f      	adds	r3, #127	; 0x7f
 8000620:	000e      	movs	r6, r1
 8000622:	2b00      	cmp	r3, #0
 8000624:	dd00      	ble.n	8000628 <__aeabi_fdiv+0x210>
 8000626:	e741      	b.n	80004ac <__aeabi_fdiv+0x94>
 8000628:	e7aa      	b.n	8000580 <__aeabi_fdiv+0x168>
 800062a:	221a      	movs	r2, #26
 800062c:	2501      	movs	r5, #1
 800062e:	1a1b      	subs	r3, r3, r0
 8000630:	e7e4      	b.n	80005fc <__aeabi_fdiv+0x1e4>
 8000632:	01ad      	lsls	r5, r5, #6
 8000634:	2000      	movs	r0, #0
 8000636:	0a6d      	lsrs	r5, r5, #9
 8000638:	e74f      	b.n	80004da <__aeabi_fdiv+0xc2>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	08004ebc 	.word	0x08004ebc
 8000640:	f7ffffff 	.word	0xf7ffffff
 8000644:	08004efc 	.word	0x08004efc

08000648 <__aeabi_f2iz>:
 8000648:	0241      	lsls	r1, r0, #9
 800064a:	0042      	lsls	r2, r0, #1
 800064c:	0fc3      	lsrs	r3, r0, #31
 800064e:	0a49      	lsrs	r1, r1, #9
 8000650:	2000      	movs	r0, #0
 8000652:	0e12      	lsrs	r2, r2, #24
 8000654:	2a7e      	cmp	r2, #126	; 0x7e
 8000656:	dd03      	ble.n	8000660 <__aeabi_f2iz+0x18>
 8000658:	2a9d      	cmp	r2, #157	; 0x9d
 800065a:	dd02      	ble.n	8000662 <__aeabi_f2iz+0x1a>
 800065c:	4a09      	ldr	r2, [pc, #36]	; (8000684 <__aeabi_f2iz+0x3c>)
 800065e:	1898      	adds	r0, r3, r2
 8000660:	4770      	bx	lr
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	0400      	lsls	r0, r0, #16
 8000666:	4301      	orrs	r1, r0
 8000668:	2a95      	cmp	r2, #149	; 0x95
 800066a:	dc07      	bgt.n	800067c <__aeabi_f2iz+0x34>
 800066c:	2096      	movs	r0, #150	; 0x96
 800066e:	1a82      	subs	r2, r0, r2
 8000670:	40d1      	lsrs	r1, r2
 8000672:	4248      	negs	r0, r1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f3      	bne.n	8000660 <__aeabi_f2iz+0x18>
 8000678:	0008      	movs	r0, r1
 800067a:	e7f1      	b.n	8000660 <__aeabi_f2iz+0x18>
 800067c:	3a96      	subs	r2, #150	; 0x96
 800067e:	4091      	lsls	r1, r2
 8000680:	e7f7      	b.n	8000672 <__aeabi_f2iz+0x2a>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	7fffffff 	.word	0x7fffffff

08000688 <__clzsi2>:
 8000688:	211c      	movs	r1, #28
 800068a:	2301      	movs	r3, #1
 800068c:	041b      	lsls	r3, r3, #16
 800068e:	4298      	cmp	r0, r3
 8000690:	d301      	bcc.n	8000696 <__clzsi2+0xe>
 8000692:	0c00      	lsrs	r0, r0, #16
 8000694:	3910      	subs	r1, #16
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	4298      	cmp	r0, r3
 800069a:	d301      	bcc.n	80006a0 <__clzsi2+0x18>
 800069c:	0a00      	lsrs	r0, r0, #8
 800069e:	3908      	subs	r1, #8
 80006a0:	091b      	lsrs	r3, r3, #4
 80006a2:	4298      	cmp	r0, r3
 80006a4:	d301      	bcc.n	80006aa <__clzsi2+0x22>
 80006a6:	0900      	lsrs	r0, r0, #4
 80006a8:	3904      	subs	r1, #4
 80006aa:	a202      	add	r2, pc, #8	; (adr r2, 80006b4 <__clzsi2+0x2c>)
 80006ac:	5c10      	ldrb	r0, [r2, r0]
 80006ae:	1840      	adds	r0, r0, r1
 80006b0:	4770      	bx	lr
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	02020304 	.word	0x02020304
 80006b8:	01010101 	.word	0x01010101
	...

080006c4 <delay>:
uint8_t rxbuff[rxbuff_size]; // where DMA is going to copy data
uint8_t blankdata[mainbuff_size]; // remove previous data
uint8_t mainbuff[mainbuff_size]; // Data will be finally store here
_Bool uart_rx_int = 0;

void delay(uint16_t us) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	0002      	movs	r2, r0
 80006cc:	1dbb      	adds	r3, r7, #6
 80006ce:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <delay+0x30>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <delay+0x30>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006e0:	1dbb      	adds	r3, r7, #6
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d3f8      	bcc.n	80006da <delay+0x16>
		;
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	20000094 	.word	0x20000094

080006f8 <stepper_set_rpm>:
uint32_t counter = 0;
_Bool pause = 0;
int estep = 0;

void stepper_set_rpm(int rpm) // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	delay(60000000 / stepsperrev / rpm); //delay(input us)
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <stepper_set_rpm+0x24>)
 8000704:	f7ff fd9c 	bl	8000240 <__divsi3>
 8000708:	0003      	movs	r3, r0
 800070a:	b29b      	uxth	r3, r3
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff ffd9 	bl	80006c4 <delay>

}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	0000a2c2 	.word	0x0000a2c2

08000720 <stepper_half_drive>:

void stepper_half_drive(int step) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	switch (step) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b03      	cmp	r3, #3
 800072c:	d036      	beq.n	800079c <stepper_half_drive+0x7c>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b03      	cmp	r3, #3
 8000732:	dc40      	bgt.n	80007b6 <stepper_half_drive+0x96>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b02      	cmp	r3, #2
 8000738:	d023      	beq.n	8000782 <stepper_half_drive+0x62>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b02      	cmp	r3, #2
 800073e:	dc3a      	bgt.n	80007b6 <stepper_half_drive+0x96>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <stepper_half_drive+0x2e>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d00d      	beq.n	8000768 <stepper_half_drive+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2

		break;

	}
}
 800074c:	e033      	b.n	80007b6 <stepper_half_drive+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <stepper_half_drive+0xa0>)
 8000750:	2201      	movs	r2, #1
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fb95 	bl	8001e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <stepper_half_drive+0xa0>)
 800075c:	2200      	movs	r2, #0
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	0018      	movs	r0, r3
 8000762:	f001 fb8f 	bl	8001e84 <HAL_GPIO_WritePin>
		break;
 8000766:	e026      	b.n	80007b6 <stepper_half_drive+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <stepper_half_drive+0xa0>)
 800076a:	2201      	movs	r2, #1
 800076c:	2140      	movs	r1, #64	; 0x40
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fb88 	bl	8001e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);   // IN2
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <stepper_half_drive+0xa0>)
 8000776:	2201      	movs	r2, #1
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fb82 	bl	8001e84 <HAL_GPIO_WritePin>
		break;
 8000780:	e019      	b.n	80007b6 <stepper_half_drive+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <stepper_half_drive+0xa0>)
 8000784:	2200      	movs	r2, #0
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fb7b 	bl	8001e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);   // IN2
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <stepper_half_drive+0xa0>)
 8000790:	2201      	movs	r2, #1
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	0018      	movs	r0, r3
 8000796:	f001 fb75 	bl	8001e84 <HAL_GPIO_WritePin>
		break;
 800079a:	e00c      	b.n	80007b6 <stepper_half_drive+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <stepper_half_drive+0xa0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	2140      	movs	r1, #64	; 0x40
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fb6e 	bl	8001e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <stepper_half_drive+0xa0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fb68 	bl	8001e84 <HAL_GPIO_WritePin>
		break;
 80007b4:	46c0      	nop			; (mov r8, r8)
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	48000800 	.word	0x48000800

080007c4 <stepper_step_angle>:

void stepper_step_angle(float angle, int direction, int rpm) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
	float anglepersequence = 1;  // 360 = 360 sequences
 80007d0:	23fe      	movs	r3, #254	; 0xfe
 80007d2:	059b      	lsls	r3, r3, #22
 80007d4:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle / anglepersequence);
 80007d6:	69b9      	ldr	r1, [r7, #24]
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f7ff fe1d 	bl	8000418 <__aeabi_fdiv>
 80007de:	1c03      	adds	r3, r0, #0
 80007e0:	1c18      	adds	r0, r3, #0
 80007e2:	f7ff ff31 	bl	8000648 <__aeabi_f2iz>
 80007e6:	0003      	movs	r3, r0
 80007e8:	617b      	str	r3, [r7, #20]
	for (int seq = 0; seq < numberofsequences; seq++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
 80007ee:	e04f      	b.n	8000890 <stepper_step_angle+0xcc>
		if (direction == 0)  // for clockwise
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d123      	bne.n	800083e <stepper_step_angle+0x7a>
				{
			for (int step1 = 3; step1 >= 0; step1--) {
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
 80007fa:	e01c      	b.n	8000836 <stepper_step_angle+0x72>
				polestep--;
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <stepper_step_angle+0xe0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <stepper_step_angle+0xe0>)
 8000804:	601a      	str	r2, [r3, #0]
				estep--;
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <stepper_step_angle+0xe4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1e5a      	subs	r2, r3, #1
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <stepper_step_angle+0xe4>)
 800080e:	601a      	str	r2, [r3, #0]
				if (estep < 0) {
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <stepper_step_angle+0xe4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	da02      	bge.n	800081e <stepper_step_angle+0x5a>
					estep = 3;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <stepper_step_angle+0xe4>)
 800081a:	2203      	movs	r2, #3
 800081c:	601a      	str	r2, [r3, #0]
				}
				stepper_half_drive(estep);
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <stepper_step_angle+0xe4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff ff7c 	bl	8000720 <stepper_half_drive>
				stepper_set_rpm(rpm);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff ff64 	bl	80006f8 <stepper_set_rpm>
			for (int step1 = 3; step1 >= 0; step1--) {
 8000830:	6a3b      	ldr	r3, [r7, #32]
 8000832:	3b01      	subs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dadf      	bge.n	80007fc <stepper_step_angle+0x38>
 800083c:	e025      	b.n	800088a <stepper_step_angle+0xc6>
			}
		}

		else if (direction == 1)  // for anti-clockwise
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d122      	bne.n	800088a <stepper_step_angle+0xc6>
				{
			for (int step1 = 0; step1 < 4; step1++) {
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	e01c      	b.n	8000884 <stepper_step_angle+0xc0>
				polestep++;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <stepper_step_angle+0xe0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <stepper_step_angle+0xe0>)
 8000852:	601a      	str	r2, [r3, #0]
				estep++;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <stepper_step_angle+0xe4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <stepper_step_angle+0xe4>)
 800085c:	601a      	str	r2, [r3, #0]
				if (estep > 3) {
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <stepper_step_angle+0xe4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b03      	cmp	r3, #3
 8000864:	dd02      	ble.n	800086c <stepper_step_angle+0xa8>
					estep = 0;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <stepper_step_angle+0xe4>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
				}
				stepper_half_drive(estep);
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <stepper_step_angle+0xe4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ff55 	bl	8000720 <stepper_half_drive>
				stepper_set_rpm(rpm);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff3d 	bl	80006f8 <stepper_set_rpm>
			for (int step1 = 0; step1 < 4; step1++) {
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3301      	adds	r3, #1
 8000882:	61fb      	str	r3, [r7, #28]
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	2b03      	cmp	r3, #3
 8000888:	dddf      	ble.n	800084a <stepper_step_angle+0x86>
	for (int seq = 0; seq < numberofsequences; seq++) {
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	3301      	adds	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
 8000890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbab      	blt.n	80007f0 <stepper_step_angle+0x2c>
			}
		}
	}
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b00a      	add	sp, #40	; 0x28
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	200001f8 	.word	0x200001f8
 80008a8:	2000026c 	.word	0x2000026c

080008ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	0002      	movs	r2, r0
 80008b4:	1dbb      	adds	r3, r7, #6
 80008b6:	801a      	strh	r2, [r3, #0]
	static bool prev_val;
	currentMillis = HAL_GetTick();
 80008b8:	f000 fe52 	bl	8001560 <HAL_GetTick>
 80008bc:	0002      	movs	r2, r0
 80008be:	4b5c      	ldr	r3, [pc, #368]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x184>)
 80008c0:	601a      	str	r2, [r3, #0]
	if (GPIO_Pin == B1_Pin && (currentMillis - previousMillis > 100)) {
 80008c2:	1dbb      	adds	r3, r7, #6
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d000      	beq.n	80008cc <HAL_GPIO_EXTI_Callback+0x20>
 80008ca:	e0ac      	b.n	8000a26 <HAL_GPIO_EXTI_Callback+0x17a>
 80008cc:	4b58      	ldr	r3, [pc, #352]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x184>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b58      	ldr	r3, [pc, #352]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x188>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	2b64      	cmp	r3, #100	; 0x64
 80008d8:	d800      	bhi.n	80008dc <HAL_GPIO_EXTI_Callback+0x30>
 80008da:	e0a4      	b.n	8000a26 <HAL_GPIO_EXTI_Callback+0x17a>
		if (prev_val == false) {
 80008dc:	4b56      	ldr	r3, [pc, #344]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x18c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2201      	movs	r2, #1
 80008e2:	4053      	eors	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d045      	beq.n	8000976 <HAL_GPIO_EXTI_Callback+0xca>
			delaystart = HAL_GetTick();
 80008ea:	f000 fe39 	bl	8001560 <HAL_GetTick>
 80008ee:	0003      	movs	r3, r0
 80008f0:	001a      	movs	r2, r3
 80008f2:	4b52      	ldr	r3, [pc, #328]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x190>)
 80008f4:	601a      	str	r2, [r3, #0]
			delayMillis = HAL_GetTick();
 80008f6:	f000 fe33 	bl	8001560 <HAL_GetTick>
 80008fa:	0003      	movs	r3, r0
 80008fc:	001a      	movs	r2, r3
 80008fe:	4b50      	ldr	r3, [pc, #320]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x194>)
 8000900:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, 1);
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	484f      	ldr	r0, [pc, #316]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x198>)
 8000908:	2201      	movs	r2, #1
 800090a:	0019      	movs	r1, r3
 800090c:	f001 faba 	bl	8001e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LD4_Pin, 1);
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	484b      	ldr	r0, [pc, #300]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x198>)
 8000916:	2201      	movs	r2, #1
 8000918:	0019      	movs	r1, r3
 800091a:	f001 fab3 	bl	8001e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	4849      	ldr	r0, [pc, #292]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000924:	2201      	movs	r2, #1
 8000926:	0019      	movs	r1, r3
 8000928:	f001 faac 	bl	8001e84 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800092c:	23fa      	movs	r3, #250	; 0xfa
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fe1f 	bl	8001574 <HAL_Delay>
			//delay 500000us = 0.5s
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, 0);
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4842      	ldr	r0, [pc, #264]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x198>)
 800093c:	2200      	movs	r2, #0
 800093e:	0019      	movs	r1, r3
 8000940:	f001 faa0 	bl	8001e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	483f      	ldr	r0, [pc, #252]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x19c>)
 800094a:	2200      	movs	r2, #0
 800094c:	0019      	movs	r1, r3
 800094e:	f001 fa99 	bl	8001e84 <HAL_GPIO_WritePin>
			encoder_state = !encoder_state;
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	4193      	sbcs	r3, r2
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2201      	movs	r2, #1
 800095e:	4053      	eors	r3, r2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	1c1a      	adds	r2, r3, #0
 8000964:	2301      	movs	r3, #1
 8000966:	4013      	ands	r3, r2
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x1a0>)
 800096c:	701a      	strb	r2, [r3, #0]
			prev_val = true;
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e053      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x172>
		} else {
			delaystart = HAL_GetTick();
 8000976:	f000 fdf3 	bl	8001560 <HAL_GetTick>
 800097a:	0003      	movs	r3, r0
 800097c:	001a      	movs	r2, r3
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x190>)
 8000980:	601a      	str	r2, [r3, #0]
			delayMillis = HAL_GetTick();
 8000982:	f000 fded 	bl	8001560 <HAL_GetTick>
 8000986:	0003      	movs	r3, r0
 8000988:	001a      	movs	r2, r3
 800098a:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x194>)
 800098c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, 1);
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	482c      	ldr	r0, [pc, #176]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x198>)
 8000994:	2201      	movs	r2, #1
 8000996:	0019      	movs	r1, r3
 8000998:	f001 fa74 	bl	8001e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LD4_Pin, 0);
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4828      	ldr	r0, [pc, #160]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x198>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	0019      	movs	r1, r3
 80009a6:	f001 fa6d 	bl	8001e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	4826      	ldr	r0, [pc, #152]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x19c>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	0019      	movs	r1, r3
 80009b4:	f001 fa66 	bl	8001e84 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80009b8:	23fa      	movs	r3, #250	; 0xfa
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fdd9 	bl	8001574 <HAL_Delay>
			//delay 500000us = 0.5s
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, 0);
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	481f      	ldr	r0, [pc, #124]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x198>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	0019      	movs	r1, r3
 80009cc:	f001 fa5a 	bl	8001e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	481c      	ldr	r0, [pc, #112]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x19c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	0019      	movs	r1, r3
 80009da:	f001 fa53 	bl	8001e84 <HAL_GPIO_WritePin>
			encoder_state = !encoder_state;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x1a0>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	4193      	sbcs	r3, r2
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2201      	movs	r2, #1
 80009ea:	4053      	eors	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	1c1a      	adds	r2, r3, #0
 80009f0:	2301      	movs	r3, #1
 80009f2:	4013      	ands	r3, r2
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x1a0>)
 80009f8:	701a      	strb	r2, [r3, #0]
			prev_val = false;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x18c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
			direction_mode++;
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a08:	601a      	str	r2, [r3, #0]
			polestep = 0;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
			if (direction_mode > 1) {
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	dd02      	ble.n	8000a1e <HAL_GPIO_EXTI_Callback+0x172>
				direction_mode = 0;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
			}
		}
		previousMillis = currentMillis;
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x184>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x188>)
 8000a24:	601a      	str	r2, [r3, #0]
	}
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	200001ec 	.word	0x200001ec
 8000a34:	200001e8 	.word	0x200001e8
 8000a38:	20000270 	.word	0x20000270
 8000a3c:	200001f0 	.word	0x200001f0
 8000a40:	200001f4 	.word	0x200001f4
 8000a44:	48000800 	.word	0x48000800
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	200001fc 	.word	0x200001fc
 8000a50:	20000000 	.word	0x20000000
 8000a54:	200001f8 	.word	0x200001f8

08000a58 <HAL_UARTEx_RxEventCallback>:

// Code for DMA data Rx and Tx
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	000a      	movs	r2, r1
 8000a62:	1cbb      	adds	r3, r7, #2
 8000a64:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART2) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d12e      	bne.n	8000ace <HAL_UARTEx_RxEventCallback+0x76>
		memcpy(mainbuff, blankdata, mainbuff_size);
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_UARTEx_RxEventCallback+0x84>)
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <HAL_UARTEx_RxEventCallback+0x88>)
 8000a74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a76:	c313      	stmia	r3!, {r0, r1, r4}
 8000a78:	ca03      	ldmia	r2!, {r0, r1}
 8000a7a:	c303      	stmia	r3!, {r0, r1}
		//remove the enter digit from Arduino serial monitor
		if (rxbuff[Size - 1] == 10) {
 8000a7c:	1cbb      	adds	r3, r7, #2
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	4a18      	ldr	r2, [pc, #96]	; (8000ae4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000a84:	5cd3      	ldrb	r3, [r2, r3]
 8000a86:	2b0a      	cmp	r3, #10
 8000a88:	d104      	bne.n	8000a94 <HAL_UARTEx_RxEventCallback+0x3c>
			Size = Size - 1;
 8000a8a:	1cbb      	adds	r3, r7, #2
 8000a8c:	1cba      	adds	r2, r7, #2
 8000a8e:	8812      	ldrh	r2, [r2, #0]
 8000a90:	3a01      	subs	r2, #1
 8000a92:	801a      	strh	r2, [r3, #0]
		}
		memcpy(mainbuff, rxbuff, Size); // store value fm Uart2, need #include "string.h" //Size - 1
 8000a94:	1cbb      	adds	r3, r7, #2
 8000a96:	881a      	ldrh	r2, [r3, #0]
 8000a98:	4912      	ldr	r1, [pc, #72]	; (8000ae4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_UARTEx_RxEventCallback+0x84>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f003 fd17 	bl	80044d0 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuff, rxbuff_size); // rx stop after receive, restart it again
 8000aa2:	4910      	ldr	r1, [pc, #64]	; (8000ae4 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_UARTEx_RxEventCallback+0x90>)
 8000aa6:	220a      	movs	r2, #10
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f003 fc78 	bl	800439e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_UARTEx_RxEventCallback+0x94>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_UARTEx_RxEventCallback+0x94>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2104      	movs	r1, #4
 8000aba:	438a      	bics	r2, r1
 8000abc:	601a      	str	r2, [r3, #0]
		rxdatasize = Size;
 8000abe:	1cbb      	adds	r3, r7, #2
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_UARTEx_RxEventCallback+0x98>)
 8000ac6:	701a      	strb	r2, [r3, #0]
		uart_rx_int = 1;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
	}
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b003      	add	sp, #12
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	20000254 	.word	0x20000254
 8000ae0:	20000240 	.word	0x20000240
 8000ae4:	20000234 	.word	0x20000234
 8000ae8:	200000dc 	.word	0x200000dc
 8000aec:	20000160 	.word	0x20000160
 8000af0:	20000232 	.word	0x20000232
 8000af4:	20000268 	.word	0x20000268

08000af8 <printpolestep>:

// Create counter msg
void printpolestep( txbuffer, polestep) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
	sprintf(txbuffer, "counter = %03d\n\r", polestep);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	4906      	ldr	r1, [pc, #24]	; (8000b20 <printpolestep+0x28>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f003 fcf3 	bl	80044f4 <siprintf>
	tx_msg((char*) txbuffer);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 f807 	bl	8000b24 <tx_msg>
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	08004df0 	.word	0x08004df0

08000b24 <tx_msg>:

// Tx msg from Uart 2
void tx_msg( txbuffer) {
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) txbuffer, strlen(txbuffer));
 8000b2c:	687c      	ldr	r4, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff fae9 	bl	8000108 <strlen>
 8000b36:	0003      	movs	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <tx_msg+0x30>)
 8000b3c:	0021      	movs	r1, r4
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 face 	bl	80030e0 <HAL_UART_Transmit_DMA>
	HAL_Delay(10);
 8000b44:	200a      	movs	r0, #10
 8000b46:	f000 fd15 	bl	8001574 <HAL_Delay>
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b003      	add	sp, #12
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	200000dc 	.word	0x200000dc

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fca6 	bl	80014ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f95a 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f000 fa42 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 8000b68:	f000 fa22 	bl	8000fb0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b6c:	f000 f9f0 	bl	8000f50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b70:	f000 f99a 	bl	8000ea8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000b74:	4b90      	ldr	r3, [pc, #576]	; (8000db8 <main+0x260>)
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 fe7a 	bl	8002870 <HAL_TIM_Base_Start>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuff, rxbuff_size); // call uart rx function, data store in rxbuff
 8000b7c:	498f      	ldr	r1, [pc, #572]	; (8000dbc <main+0x264>)
 8000b7e:	4b90      	ldr	r3, [pc, #576]	; (8000dc0 <main+0x268>)
 8000b80:	220a      	movs	r2, #10
 8000b82:	0018      	movs	r0, r3
 8000b84:	f003 fc0b 	bl	800439e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // hal dma it start by default, disable half tx IT, this IT trigger when  half data has been transfer
 8000b88:	4b8e      	ldr	r3, [pc, #568]	; (8000dc4 <main+0x26c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b8d      	ldr	r3, [pc, #564]	; (8000dc4 <main+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2104      	movs	r1, #4
 8000b94:	438a      	bics	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (uart_rx_int == 1) {
 8000b98:	4b8b      	ldr	r3, [pc, #556]	; (8000dc8 <main+0x270>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d100      	bne.n	8000ba2 <main+0x4a>
 8000ba0:	e0b6      	b.n	8000d10 <main+0x1b8>
			uart_rx_int = 0;
 8000ba2:	4b89      	ldr	r3, [pc, #548]	; (8000dc8 <main+0x270>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]

			if (strncmp((char*) mainbuff, "resume", rxdatasize - 1) == 0
 8000ba8:	4b88      	ldr	r3, [pc, #544]	; (8000dcc <main+0x274>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	001a      	movs	r2, r3
 8000bb0:	4987      	ldr	r1, [pc, #540]	; (8000dd0 <main+0x278>)
 8000bb2:	4b88      	ldr	r3, [pc, #544]	; (8000dd4 <main+0x27c>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f003 fcbd 	bl	8004534 <strncmp>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d11e      	bne.n	8000bfc <main+0xa4>
					&& strlen(mainbuff) == 6) {
 8000bbe:	4b85      	ldr	r3, [pc, #532]	; (8000dd4 <main+0x27c>)
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff faa1 	bl	8000108 <strlen>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d117      	bne.n	8000bfc <main+0xa4>
				pause = 0;
 8000bcc:	4b82      	ldr	r3, [pc, #520]	; (8000dd8 <main+0x280>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]

				sprintf(txbuffer, "\n '%s' has been recieved \n", mainbuff);
 8000bd2:	4a80      	ldr	r2, [pc, #512]	; (8000dd4 <main+0x27c>)
 8000bd4:	4981      	ldr	r1, [pc, #516]	; (8000ddc <main+0x284>)
 8000bd6:	4b82      	ldr	r3, [pc, #520]	; (8000de0 <main+0x288>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f003 fc8b 	bl	80044f4 <siprintf>
				tx_msg((char*) txbuffer);
 8000bde:	4b80      	ldr	r3, [pc, #512]	; (8000de0 <main+0x288>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ff9f 	bl	8000b24 <tx_msg>

				sprintf(txbuffer, "program resume \n\r");
 8000be6:	4a7f      	ldr	r2, [pc, #508]	; (8000de4 <main+0x28c>)
 8000be8:	4b7d      	ldr	r3, [pc, #500]	; (8000de0 <main+0x288>)
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f003 fc81 	bl	80044f4 <siprintf>
				tx_msg((char*) txbuffer);
 8000bf2:	4b7b      	ldr	r3, [pc, #492]	; (8000de0 <main+0x288>)
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ff95 	bl	8000b24 <tx_msg>
 8000bfa:	e089      	b.n	8000d10 <main+0x1b8>

			} else if (strncmp((char*) mainbuff, "stop", rxdatasize - 1) == 0
 8000bfc:	4b73      	ldr	r3, [pc, #460]	; (8000dcc <main+0x274>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	001a      	movs	r2, r3
 8000c04:	4978      	ldr	r1, [pc, #480]	; (8000de8 <main+0x290>)
 8000c06:	4b73      	ldr	r3, [pc, #460]	; (8000dd4 <main+0x27c>)
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f003 fc93 	bl	8004534 <strncmp>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d12a      	bne.n	8000c68 <main+0x110>
					&& strlen(mainbuff) == 4) {
 8000c12:	4b70      	ldr	r3, [pc, #448]	; (8000dd4 <main+0x27c>)
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff fa77 	bl	8000108 <strlen>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d123      	bne.n	8000c68 <main+0x110>
				pause = 1;
 8000c20:	4b6d      	ldr	r3, [pc, #436]	; (8000dd8 <main+0x280>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]

				sprintf(txbuffer, "\n '%s' has been recieved \n", mainbuff);
 8000c26:	4a6b      	ldr	r2, [pc, #428]	; (8000dd4 <main+0x27c>)
 8000c28:	496c      	ldr	r1, [pc, #432]	; (8000ddc <main+0x284>)
 8000c2a:	4b6d      	ldr	r3, [pc, #436]	; (8000de0 <main+0x288>)
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f003 fc61 	bl	80044f4 <siprintf>
				tx_msg((char*) txbuffer);
 8000c32:	4b6b      	ldr	r3, [pc, #428]	; (8000de0 <main+0x288>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ff75 	bl	8000b24 <tx_msg>

				sprintf(txbuffer, "program stop \n\r");
 8000c3a:	4a6c      	ldr	r2, [pc, #432]	; (8000dec <main+0x294>)
 8000c3c:	4b68      	ldr	r3, [pc, #416]	; (8000de0 <main+0x288>)
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f003 fc57 	bl	80044f4 <siprintf>
				tx_msg((char*) txbuffer);
 8000c46:	4b66      	ldr	r3, [pc, #408]	; (8000de0 <main+0x288>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ff6b 	bl	8000b24 <tx_msg>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8000c4e:	4b68      	ldr	r3, [pc, #416]	; (8000df0 <main+0x298>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	0018      	movs	r0, r3
 8000c56:	f001 f915 	bl	8001e84 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 8000c5a:	4b65      	ldr	r3, [pc, #404]	; (8000df0 <main+0x298>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 f90f 	bl	8001e84 <HAL_GPIO_WritePin>
 8000c66:	e053      	b.n	8000d10 <main+0x1b8>

			} else if (strncmp((char*) mainbuff, "forward", rxdatasize - 1) == 0
 8000c68:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <main+0x274>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	001a      	movs	r2, r3
 8000c70:	4960      	ldr	r1, [pc, #384]	; (8000df4 <main+0x29c>)
 8000c72:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <main+0x27c>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f003 fc5d 	bl	8004534 <strncmp>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d114      	bne.n	8000ca8 <main+0x150>
					&& strlen(mainbuff) == 7) {
 8000c7e:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <main+0x27c>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fa41 	bl	8000108 <strlen>
 8000c86:	0003      	movs	r3, r0
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d10d      	bne.n	8000ca8 <main+0x150>

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 8000c8c:	4a51      	ldr	r2, [pc, #324]	; (8000dd4 <main+0x27c>)
 8000c8e:	495a      	ldr	r1, [pc, #360]	; (8000df8 <main+0x2a0>)
 8000c90:	4b53      	ldr	r3, [pc, #332]	; (8000de0 <main+0x288>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f003 fc2e 	bl	80044f4 <siprintf>
				tx_msg((char*) txbuffer);
 8000c98:	4b51      	ldr	r3, [pc, #324]	; (8000de0 <main+0x288>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff ff42 	bl	8000b24 <tx_msg>
				direction_mode = 1;
 8000ca0:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <main+0x2a4>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	e033      	b.n	8000d10 <main+0x1b8>

			} else if (strncmp((char*) mainbuff, "backward", rxdatasize - 1)
 8000ca8:	4b48      	ldr	r3, [pc, #288]	; (8000dcc <main+0x274>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	001a      	movs	r2, r3
 8000cb0:	4953      	ldr	r1, [pc, #332]	; (8000e00 <main+0x2a8>)
 8000cb2:	4b48      	ldr	r3, [pc, #288]	; (8000dd4 <main+0x27c>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f003 fc3d 	bl	8004534 <strncmp>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d114      	bne.n	8000ce8 <main+0x190>
					== 0 && strlen(mainbuff) == 8) {
 8000cbe:	4b45      	ldr	r3, [pc, #276]	; (8000dd4 <main+0x27c>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fa21 	bl	8000108 <strlen>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d10d      	bne.n	8000ce8 <main+0x190>

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 8000ccc:	4a41      	ldr	r2, [pc, #260]	; (8000dd4 <main+0x27c>)
 8000cce:	494a      	ldr	r1, [pc, #296]	; (8000df8 <main+0x2a0>)
 8000cd0:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <main+0x288>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f003 fc0e 	bl	80044f4 <siprintf>
				tx_msg((char*) txbuffer);
 8000cd8:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <main+0x288>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff ff22 	bl	8000b24 <tx_msg>
				direction_mode = 0;
 8000ce0:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <main+0x2a4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e013      	b.n	8000d10 <main+0x1b8>
			}

			else {
				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	; (8000dd4 <main+0x27c>)
 8000cea:	4943      	ldr	r1, [pc, #268]	; (8000df8 <main+0x2a0>)
 8000cec:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <main+0x288>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f003 fc00 	bl	80044f4 <siprintf>
				tx_msg((char*) txbuffer);
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <main+0x288>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff ff14 	bl	8000b24 <tx_msg>
				sprintf(txbuffer, "===invalid input=== \n\r");
 8000cfc:	4a41      	ldr	r2, [pc, #260]	; (8000e04 <main+0x2ac>)
 8000cfe:	4b38      	ldr	r3, [pc, #224]	; (8000de0 <main+0x288>)
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f003 fbf6 	bl	80044f4 <siprintf>
				tx_msg((char*) txbuffer);
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <main+0x288>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff0a 	bl	8000b24 <tx_msg>
			}
		}

		if (pause == 0) {
 8000d10:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <main+0x280>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2201      	movs	r2, #1
 8000d16:	4053      	eors	r3, r2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <main+0x1c8>
 8000d1e:	e73b      	b.n	8000b98 <main+0x40>
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, bled_state);
 8000d20:	4b39      	ldr	r3, [pc, #228]	; (8000e08 <main+0x2b0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	001a      	movs	r2, r3
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4831      	ldr	r0, [pc, #196]	; (8000df0 <main+0x298>)
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	f001 f8a9 	bl	8001e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LD4_Pin, gled_state);
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <main+0x2b4>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	001a      	movs	r2, r3
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	482c      	ldr	r0, [pc, #176]	; (8000df0 <main+0x298>)
 8000d3e:	0019      	movs	r1, r3
 8000d40:	f001 f8a0 	bl	8001e84 <HAL_GPIO_WritePin>
			gled_state = !gled_state;
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <main+0x2b4>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	4193      	sbcs	r3, r2
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4053      	eors	r3, r2
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	1c1a      	adds	r2, r3, #0
 8000d56:	2301      	movs	r3, #1
 8000d58:	4013      	ands	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <main+0x2b4>)
 8000d5e:	701a      	strb	r2, [r3, #0]
			bled_state = !bled_state;
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <main+0x2b0>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	1e5a      	subs	r2, r3, #1
 8000d66:	4193      	sbcs	r3, r2
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4053      	eors	r3, r2
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	1c1a      	adds	r2, r3, #0
 8000d72:	2301      	movs	r3, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <main+0x2b0>)
 8000d7a:	701a      	strb	r2, [r3, #0]
			stepper_step_angle(1, direction_mode, 1);
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <main+0x2a4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	20fe      	movs	r0, #254	; 0xfe
 8000d82:	0580      	lsls	r0, r0, #22
 8000d84:	2201      	movs	r2, #1
 8000d86:	0019      	movs	r1, r3
 8000d88:	f7ff fd1c 	bl	80007c4 <stepper_step_angle>
			printpolestep((char*) txbuffer, polestep);
 8000d8c:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <main+0x2b8>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <main+0x288>)
 8000d92:	0011      	movs	r1, r2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff feaf 	bl	8000af8 <printpolestep>
			if (polestep % 360 == 0) {
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <main+0x2b8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	22b4      	movs	r2, #180	; 0xb4
 8000da0:	0051      	lsls	r1, r2, #1
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fb32 	bl	800040c <__aeabi_idivmod>
 8000da8:	1e0b      	subs	r3, r1, #0
 8000daa:	d000      	beq.n	8000dae <main+0x256>
 8000dac:	e6f4      	b.n	8000b98 <main+0x40>
				HAL_Delay(5000);
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <main+0x2bc>)
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fbdf 	bl	8001574 <HAL_Delay>
		if (uart_rx_int == 1) {
 8000db6:	e6ef      	b.n	8000b98 <main+0x40>
 8000db8:	20000094 	.word	0x20000094
 8000dbc:	20000234 	.word	0x20000234
 8000dc0:	200000dc 	.word	0x200000dc
 8000dc4:	20000160 	.word	0x20000160
 8000dc8:	20000268 	.word	0x20000268
 8000dcc:	20000232 	.word	0x20000232
 8000dd0:	08004e04 	.word	0x08004e04
 8000dd4:	20000254 	.word	0x20000254
 8000dd8:	2000026a 	.word	0x2000026a
 8000ddc:	08004e0c 	.word	0x08004e0c
 8000de0:	20000200 	.word	0x20000200
 8000de4:	08004e28 	.word	0x08004e28
 8000de8:	08004e3c 	.word	0x08004e3c
 8000dec:	08004e44 	.word	0x08004e44
 8000df0:	48000800 	.word	0x48000800
 8000df4:	08004e54 	.word	0x08004e54
 8000df8:	08004e5c 	.word	0x08004e5c
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	08004e78 	.word	0x08004e78
 8000e04:	08004e84 	.word	0x08004e84
 8000e08:	20000269 	.word	0x20000269
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	200001f8 	.word	0x200001f8
 8000e14:	00001388 	.word	0x00001388

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b091      	sub	sp, #68	; 0x44
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	2410      	movs	r4, #16
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	0018      	movs	r0, r3
 8000e24:	2330      	movs	r3, #48	; 0x30
 8000e26:	001a      	movs	r2, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f003 fb5a 	bl	80044e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2e:	003b      	movs	r3, r7
 8000e30:	0018      	movs	r0, r3
 8000e32:	2310      	movs	r3, #16
 8000e34:	001a      	movs	r2, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	f003 fb53 	bl	80044e2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3c:	0021      	movs	r1, r4
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2201      	movs	r2, #1
 8000e48:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	0252      	lsls	r2, r2, #9
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	0352      	lsls	r2, r2, #13
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2200      	movs	r2, #0
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 f845 	bl	8001ef8 <HAL_RCC_OscConfig>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e72:	f000 f96b 	bl	800114c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e76:	003b      	movs	r3, r7
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7c:	003b      	movs	r3, r7
 8000e7e:	2202      	movs	r2, #2
 8000e80:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	003b      	movs	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e88:	003b      	movs	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e8e:	003b      	movs	r3, r7
 8000e90:	2101      	movs	r1, #1
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 fb4a 	bl	800252c <HAL_RCC_ClockConfig>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e9c:	f000 f956 	bl	800114c <Error_Handler>
  }
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b011      	add	sp, #68	; 0x44
 8000ea6:	bd90      	pop	{r4, r7, pc}

08000ea8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	2308      	movs	r3, #8
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f003 fb12 	bl	80044e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f003 fb0b 	bl	80044e2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_TIM2_Init+0xa0>)
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	05d2      	lsls	r2, r2, #23
 8000ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_TIM2_Init+0xa0>)
 8000ed6:	222f      	movs	r2, #47	; 0x2f
 8000ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_TIM2_Init+0xa0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_TIM2_Init+0xa0>)
 8000ee2:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <MX_TIM2_Init+0xa4>)
 8000ee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_TIM2_Init+0xa0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_TIM2_Init+0xa0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_TIM2_Init+0xa0>)
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 fc6b 	bl	80027d0 <HAL_TIM_Base_Init>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000efe:	f000 f925 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f02:	2108      	movs	r1, #8
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	0152      	lsls	r2, r2, #5
 8000f0a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0c:	187a      	adds	r2, r7, r1
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_TIM2_Init+0xa0>)
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fe0c 	bl	8002b30 <HAL_TIM_ConfigClockSource>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f1c:	f000 f916 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	003b      	movs	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f26:	003b      	movs	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f2c:	003a      	movs	r2, r7
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_TIM2_Init+0xa0>)
 8000f30:	0011      	movs	r1, r2
 8000f32:	0018      	movs	r0, r3
 8000f34:	f002 f812 	bl	8002f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f3c:	f000 f906 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b006      	add	sp, #24
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000094 	.word	0x20000094
 8000f4c:	0000fffe 	.word	0x0000fffe

08000f50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <MX_USART2_UART_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f5c:	22e1      	movs	r2, #225	; 0xe1
 8000f5e:	0252      	lsls	r2, r2, #9
 8000f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f94:	0018      	movs	r0, r3
 8000f96:	f002 f84f 	bl	8003038 <HAL_UART_Init>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f000 f8d5 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000dc 	.word	0x200000dc
 8000fac:	40004400 	.word	0x40004400

08000fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	200b      	movs	r0, #11
 8000fd4:	f000 fb9e 	bl	8001714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000fd8:	200b      	movs	r0, #11
 8000fda:	f000 fbb0 	bl	800173e <HAL_NVIC_EnableIRQ>

}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	40021000 	.word	0x40021000

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b08b      	sub	sp, #44	; 0x2c
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	2414      	movs	r4, #20
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2314      	movs	r3, #20
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f003 fa70 	bl	80044e2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001002:	4b4f      	ldr	r3, [pc, #316]	; (8001140 <MX_GPIO_Init+0x154>)
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	4b4e      	ldr	r3, [pc, #312]	; (8001140 <MX_GPIO_Init+0x154>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	03c9      	lsls	r1, r1, #15
 800100c:	430a      	orrs	r2, r1
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <MX_GPIO_Init+0x154>)
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	03db      	lsls	r3, r3, #15
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b48      	ldr	r3, [pc, #288]	; (8001140 <MX_GPIO_Init+0x154>)
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <MX_GPIO_Init+0x154>)
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	0289      	lsls	r1, r1, #10
 8001028:	430a      	orrs	r2, r1
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	4b44      	ldr	r3, [pc, #272]	; (8001140 <MX_GPIO_Init+0x154>)
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	029b      	lsls	r3, r3, #10
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <MX_GPIO_Init+0x154>)
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	4b40      	ldr	r3, [pc, #256]	; (8001140 <MX_GPIO_Init+0x154>)
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	02c9      	lsls	r1, r1, #11
 8001044:	430a      	orrs	r2, r1
 8001046:	615a      	str	r2, [r3, #20]
 8001048:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <MX_GPIO_Init+0x154>)
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	02db      	lsls	r3, r3, #11
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <MX_GPIO_Init+0x154>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <MX_GPIO_Init+0x154>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	0309      	lsls	r1, r1, #12
 8001060:	430a      	orrs	r2, r1
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <MX_GPIO_Init+0x154>)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	031b      	lsls	r3, r3, #12
 800106c:	4013      	ands	r3, r2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	4833      	ldr	r0, [pc, #204]	; (8001144 <MX_GPIO_Init+0x158>)
 8001078:	2200      	movs	r2, #0
 800107a:	0019      	movs	r1, r3
 800107c:	f000 ff02 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001080:	23f0      	movs	r3, #240	; 0xf0
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4830      	ldr	r0, [pc, #192]	; (8001148 <MX_GPIO_Init+0x15c>)
 8001086:	2200      	movs	r2, #0
 8001088:	0019      	movs	r1, r3
 800108a:	f000 fefb 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800108e:	193b      	adds	r3, r7, r4
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	2284      	movs	r2, #132	; 0x84
 8001098:	0392      	lsls	r2, r2, #14
 800109a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800109c:	193b      	adds	r3, r7, r4
 800109e:	2202      	movs	r2, #2
 80010a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010a2:	193a      	adds	r2, r7, r4
 80010a4:	2390      	movs	r3, #144	; 0x90
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	0011      	movs	r1, r2
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 fd7a 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010b0:	0021      	movs	r1, r4
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	0212      	lsls	r2, r2, #8
 80010b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	000c      	movs	r4, r1
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	2201      	movs	r2, #1
 80010c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	2201      	movs	r2, #1
 80010c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_GPIO_Init+0x158>)
 80010d2:	0019      	movs	r1, r3
 80010d4:	0010      	movs	r0, r2
 80010d6:	f000 fd65 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	22c0      	movs	r2, #192	; 0xc0
 80010de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	193b      	adds	r3, r7, r4
 80010e2:	2201      	movs	r2, #1
 80010e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	2201      	movs	r2, #1
 80010ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <MX_GPIO_Init+0x15c>)
 80010f6:	0019      	movs	r1, r3
 80010f8:	0010      	movs	r0, r2
 80010fa:	f000 fd53 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80010fe:	0021      	movs	r1, r4
 8001100:	187b      	adds	r3, r7, r1
 8001102:	22c0      	movs	r2, #192	; 0xc0
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2201      	movs	r2, #1
 800110c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	187b      	adds	r3, r7, r1
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <MX_GPIO_Init+0x15c>)
 800111e:	0019      	movs	r1, r3
 8001120:	0010      	movs	r0, r2
 8001122:	f000 fd3f 	bl	8001ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2005      	movs	r0, #5
 800112c:	f000 faf2 	bl	8001714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001130:	2005      	movs	r0, #5
 8001132:	f000 fb04 	bl	800173e <HAL_NVIC_EnableIRQ>

}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b00b      	add	sp, #44	; 0x2c
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	40021000 	.word	0x40021000
 8001144:	48000400 	.word	0x48000400
 8001148:	48000800 	.word	0x48000800

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001154:	e7fe      	b.n	8001154 <Error_Handler+0x8>
	...

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_MspInit+0x54>)
 8001160:	699a      	ldr	r2, [r3, #24]
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_MspInit+0x54>)
 8001164:	2101      	movs	r1, #1
 8001166:	430a      	orrs	r2, r1
 8001168:	619a      	str	r2, [r3, #24]
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_MspInit+0x54>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	2201      	movs	r2, #1
 8001170:	4013      	ands	r3, r2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_MspInit+0x54>)
 8001178:	69da      	ldr	r2, [r3, #28]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x54>)
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	0549      	lsls	r1, r1, #21
 8001180:	430a      	orrs	r2, r1
 8001182:	61da      	str	r2, [r3, #28]
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x54>)
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	055b      	lsls	r3, r3, #21
 800118c:	4013      	ands	r3, r2
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2004      	movs	r0, #4
 8001198:	f000 fabc 	bl	8001714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800119c:	2004      	movs	r0, #4
 800119e:	f000 face 	bl	800173e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	05db      	lsls	r3, r3, #23
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d113      	bne.n	80011ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_TIM_Base_MspInit+0x44>)
 80011c6:	69da      	ldr	r2, [r3, #28]
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_TIM_Base_MspInit+0x44>)
 80011ca:	2101      	movs	r1, #1
 80011cc:	430a      	orrs	r2, r1
 80011ce:	61da      	str	r2, [r3, #28]
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_TIM_Base_MspInit+0x44>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2201      	movs	r2, #1
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	200f      	movs	r0, #15
 80011e2:	f000 fa97 	bl	8001714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e6:	200f      	movs	r0, #15
 80011e8:	f000 faa9 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b08b      	sub	sp, #44	; 0x2c
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	2414      	movs	r4, #20
 8001202:	193b      	adds	r3, r7, r4
 8001204:	0018      	movs	r0, r3
 8001206:	2314      	movs	r3, #20
 8001208:	001a      	movs	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	f003 f969 	bl	80044e2 <memset>
  if(huart->Instance==USART2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a47      	ldr	r2, [pc, #284]	; (8001334 <HAL_UART_MspInit+0x13c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d000      	beq.n	800121c <HAL_UART_MspInit+0x24>
 800121a:	e086      	b.n	800132a <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121c:	4b46      	ldr	r3, [pc, #280]	; (8001338 <HAL_UART_MspInit+0x140>)
 800121e:	69da      	ldr	r2, [r3, #28]
 8001220:	4b45      	ldr	r3, [pc, #276]	; (8001338 <HAL_UART_MspInit+0x140>)
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	0289      	lsls	r1, r1, #10
 8001226:	430a      	orrs	r2, r1
 8001228:	61da      	str	r2, [r3, #28]
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <HAL_UART_MspInit+0x140>)
 800122c:	69da      	ldr	r2, [r3, #28]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <HAL_UART_MspInit+0x140>)
 800123a:	695a      	ldr	r2, [r3, #20]
 800123c:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <HAL_UART_MspInit+0x140>)
 800123e:	2180      	movs	r1, #128	; 0x80
 8001240:	0289      	lsls	r1, r1, #10
 8001242:	430a      	orrs	r2, r1
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <HAL_UART_MspInit+0x140>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	029b      	lsls	r3, r3, #10
 800124e:	4013      	ands	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001254:	0021      	movs	r1, r4
 8001256:	187b      	adds	r3, r7, r1
 8001258:	220c      	movs	r2, #12
 800125a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	187b      	adds	r3, r7, r1
 800125e:	2202      	movs	r2, #2
 8001260:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	187b      	adds	r3, r7, r1
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001268:	187b      	adds	r3, r7, r1
 800126a:	2203      	movs	r2, #3
 800126c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2201      	movs	r2, #1
 8001272:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	187a      	adds	r2, r7, r1
 8001276:	2390      	movs	r3, #144	; 0x90
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f000 fc91 	bl	8001ba4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001282:	4b2e      	ldr	r3, [pc, #184]	; (800133c <HAL_UART_MspInit+0x144>)
 8001284:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <HAL_UART_MspInit+0x148>)
 8001286:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <HAL_UART_MspInit+0x144>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_UART_MspInit+0x144>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_UART_MspInit+0x144>)
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_UART_MspInit+0x144>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_UART_MspInit+0x144>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_UART_MspInit+0x144>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <HAL_UART_MspInit+0x144>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_UART_MspInit+0x144>)
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 fa5f 	bl	8001778 <HAL_DMA_Init>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80012be:	f7ff ff45 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_UART_MspInit+0x144>)
 80012c6:	671a      	str	r2, [r3, #112]	; 0x70
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_UART_MspInit+0x144>)
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_UART_MspInit+0x14c>)
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_UART_MspInit+0x150>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_UART_MspInit+0x14c>)
 80012d6:	2210      	movs	r2, #16
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_UART_MspInit+0x14c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_UART_MspInit+0x14c>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_UART_MspInit+0x14c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_UART_MspInit+0x14c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_UART_MspInit+0x14c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_UART_MspInit+0x14c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_UART_MspInit+0x14c>)
 8001300:	0018      	movs	r0, r3
 8001302:	f000 fa39 	bl	8001778 <HAL_DMA_Init>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800130a:	f7ff ff1f 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <HAL_UART_MspInit+0x14c>)
 8001312:	66da      	str	r2, [r3, #108]	; 0x6c
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_UART_MspInit+0x14c>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	201c      	movs	r0, #28
 8001320:	f000 f9f8 	bl	8001714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001324:	201c      	movs	r0, #28
 8001326:	f000 fa0a 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b00b      	add	sp, #44	; 0x2c
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	40004400 	.word	0x40004400
 8001338:	40021000 	.word	0x40021000
 800133c:	20000160 	.word	0x20000160
 8001340:	40020058 	.word	0x40020058
 8001344:	200001a4 	.word	0x200001a4
 8001348:	40020044 	.word	0x40020044

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001370:	f000 f8e4 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800137e:	2001      	movs	r0, #1
 8001380:	f000 fd9e 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8001392:	0018      	movs	r0, r3
 8001394:	f000 fb1b 	bl	80019ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <DMA1_Channel4_5_IRQHandler+0x20>)
 800139a:	0018      	movs	r0, r3
 800139c:	f000 fb17 	bl	80019ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	200001a4 	.word	0x200001a4
 80013ac:	20000160 	.word	0x20000160

080013b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <TIM2_IRQHandler+0x14>)
 80013b6:	0018      	movs	r0, r3
 80013b8:	f001 faa4 	bl	8002904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	20000094 	.word	0x20000094

080013c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <USART2_IRQHandler+0x14>)
 80013ce:	0018      	movs	r0, r3
 80013d0:	f001 ff28 	bl	8003224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	200000dc 	.word	0x200000dc

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	18d3      	adds	r3, r2, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f003 f834 	bl	800447c <__errno>
 8001414:	0003      	movs	r3, r0
 8001416:	220c      	movs	r2, #12
 8001418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141a:	2301      	movs	r3, #1
 800141c:	425b      	negs	r3, r3
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	18d2      	adds	r2, r2, r3
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <_sbrk+0x64>)
 8001430:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b006      	add	sp, #24
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20002000 	.word	0x20002000
 8001440:	00000400 	.word	0x00000400
 8001444:	20000274 	.word	0x20000274
 8001448:	20000290 	.word	0x20000290

0800144c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800145a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <LoopForever+0x6>)
  ldr r1, =_edata
 800145e:	490e      	ldr	r1, [pc, #56]	; (8001498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <LoopForever+0xe>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001474:	4c0b      	ldr	r4, [pc, #44]	; (80014a4 <LoopForever+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001482:	f7ff ffe3 	bl	800144c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001486:	f002 ffff 	bl	8004488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148a:	f7ff fb65 	bl	8000b58 <main>

0800148e <LoopForever>:

LoopForever:
    b LoopForever
 800148e:	e7fe      	b.n	800148e <LoopForever>
  ldr   r0, =_estack
 8001490:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800149c:	08004f90 	.word	0x08004f90
  ldr r2, =_sbss
 80014a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014a4:	2000028c 	.word	0x2000028c

080014a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC1_COMP_IRQHandler>
	...

080014ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_Init+0x24>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_Init+0x24>)
 80014b6:	2110      	movs	r1, #16
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 f809 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c2:	f7ff fe49 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_InitTick+0x5c>)
 80014de:	681c      	ldr	r4, [r3, #0]
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_InitTick+0x60>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	0019      	movs	r1, r3
 80014e6:	23fa      	movs	r3, #250	; 0xfa
 80014e8:	0098      	lsls	r0, r3, #2
 80014ea:	f7fe fe1f 	bl	800012c <__udivsi3>
 80014ee:	0003      	movs	r3, r0
 80014f0:	0019      	movs	r1, r3
 80014f2:	0020      	movs	r0, r4
 80014f4:	f7fe fe1a 	bl	800012c <__udivsi3>
 80014f8:	0003      	movs	r3, r0
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 f92f 	bl	800175e <HAL_SYSTICK_Config>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e00f      	b.n	8001528 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d80b      	bhi.n	8001526 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	2301      	movs	r3, #1
 8001512:	425b      	negs	r3, r3
 8001514:	2200      	movs	r2, #0
 8001516:	0018      	movs	r0, r3
 8001518:	f000 f8fc 	bl	8001714 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_InitTick+0x64>)
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b003      	add	sp, #12
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	20000008 	.word	0x20000008
 8001534:	20000010 	.word	0x20000010
 8001538:	2000000c 	.word	0x2000000c

0800153c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_IncTick+0x1c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	001a      	movs	r2, r3
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x20>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	18d2      	adds	r2, r2, r3
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_IncTick+0x20>)
 800154e:	601a      	str	r2, [r3, #0]
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	20000010 	.word	0x20000010
 800155c:	20000278 	.word	0x20000278

08001560 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <HAL_GetTick+0x10>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	20000278 	.word	0x20000278

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fff0 	bl	8001560 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	001a      	movs	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	189b      	adds	r3, r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	f7ff ffe0 	bl	8001560 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b004      	add	sp, #16
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	20000010 	.word	0x20000010

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b7f      	cmp	r3, #127	; 0x7f
 80015ce:	d809      	bhi.n	80015e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	001a      	movs	r2, r3
 80015d6:	231f      	movs	r3, #31
 80015d8:	401a      	ands	r2, r3
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_EnableIRQ+0x30>)
 80015dc:	2101      	movs	r1, #1
 80015de:	4091      	lsls	r1, r2
 80015e0:	000a      	movs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
  }
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	0002      	movs	r2, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b7f      	cmp	r3, #127	; 0x7f
 8001604:	d828      	bhi.n	8001658 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001606:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <__NVIC_SetPriority+0xd4>)
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b25b      	sxtb	r3, r3
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	33c0      	adds	r3, #192	; 0xc0
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	589b      	ldr	r3, [r3, r2]
 8001616:	1dfa      	adds	r2, r7, #7
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	0011      	movs	r1, r2
 800161c:	2203      	movs	r2, #3
 800161e:	400a      	ands	r2, r1
 8001620:	00d2      	lsls	r2, r2, #3
 8001622:	21ff      	movs	r1, #255	; 0xff
 8001624:	4091      	lsls	r1, r2
 8001626:	000a      	movs	r2, r1
 8001628:	43d2      	mvns	r2, r2
 800162a:	401a      	ands	r2, r3
 800162c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	22ff      	movs	r2, #255	; 0xff
 8001634:	401a      	ands	r2, r3
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	0018      	movs	r0, r3
 800163c:	2303      	movs	r3, #3
 800163e:	4003      	ands	r3, r0
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <__NVIC_SetPriority+0xd4>)
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b25b      	sxtb	r3, r3
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	430a      	orrs	r2, r1
 8001650:	33c0      	adds	r3, #192	; 0xc0
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001656:	e031      	b.n	80016bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <__NVIC_SetPriority+0xd8>)
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	0019      	movs	r1, r3
 8001660:	230f      	movs	r3, #15
 8001662:	400b      	ands	r3, r1
 8001664:	3b08      	subs	r3, #8
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3306      	adds	r3, #6
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	3304      	adds	r3, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1dfa      	adds	r2, r7, #7
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	0011      	movs	r1, r2
 8001678:	2203      	movs	r2, #3
 800167a:	400a      	ands	r2, r1
 800167c:	00d2      	lsls	r2, r2, #3
 800167e:	21ff      	movs	r1, #255	; 0xff
 8001680:	4091      	lsls	r1, r2
 8001682:	000a      	movs	r2, r1
 8001684:	43d2      	mvns	r2, r2
 8001686:	401a      	ands	r2, r3
 8001688:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	22ff      	movs	r2, #255	; 0xff
 8001690:	401a      	ands	r2, r3
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	0018      	movs	r0, r3
 8001698:	2303      	movs	r3, #3
 800169a:	4003      	ands	r3, r0
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <__NVIC_SetPriority+0xd8>)
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	001c      	movs	r4, r3
 80016a8:	230f      	movs	r3, #15
 80016aa:	4023      	ands	r3, r4
 80016ac:	3b08      	subs	r3, #8
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	430a      	orrs	r2, r1
 80016b2:	3306      	adds	r3, #6
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	18c3      	adds	r3, r0, r3
 80016b8:	3304      	adds	r3, #4
 80016ba:	601a      	str	r2, [r3, #0]
}
 80016bc:	46c0      	nop			; (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	b003      	add	sp, #12
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	045b      	lsls	r3, r3, #17
 80016dc:	429a      	cmp	r2, r3
 80016de:	d301      	bcc.n	80016e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e0:	2301      	movs	r3, #1
 80016e2:	e010      	b.n	8001706 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <SysTick_Config+0x44>)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	3a01      	subs	r2, #1
 80016ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ec:	2301      	movs	r3, #1
 80016ee:	425b      	negs	r3, r3
 80016f0:	2103      	movs	r1, #3
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff ff7c 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x44>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x44>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	210f      	movs	r1, #15
 8001720:	187b      	adds	r3, r7, r1
 8001722:	1c02      	adds	r2, r0, #0
 8001724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	187b      	adds	r3, r7, r1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b25b      	sxtb	r3, r3
 800172e:	0011      	movs	r1, r2
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b004      	add	sp, #16
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	0002      	movs	r2, r0
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b25b      	sxtb	r3, r3
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff ff33 	bl	80015bc <__NVIC_EnableIRQ>
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff ffaf 	bl	80016cc <SysTick_Config>
 800176e:	0003      	movs	r3, r0
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	b002      	add	sp, #8
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e036      	b.n	80017fc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2221      	movs	r2, #33	; 0x21
 8001792:	2102      	movs	r1, #2
 8001794:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_DMA_Init+0x8c>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 f9c4 	bl	8001b6c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2221      	movs	r2, #33	; 0x21
 80017ee:	2101      	movs	r1, #1
 80017f0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	2100      	movs	r1, #0
 80017f8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}  
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b004      	add	sp, #16
 8001802:	bd80      	pop	{r7, pc}
 8001804:	ffffc00f 	.word	0xffffc00f

08001808 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001816:	2317      	movs	r3, #23
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2220      	movs	r2, #32
 8001822:	5c9b      	ldrb	r3, [r3, r2]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_DMA_Start_IT+0x24>
 8001828:	2302      	movs	r3, #2
 800182a:	e04f      	b.n	80018cc <HAL_DMA_Start_IT+0xc4>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2220      	movs	r2, #32
 8001830:	2101      	movs	r1, #1
 8001832:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2221      	movs	r2, #33	; 0x21
 8001838:	5c9b      	ldrb	r3, [r3, r2]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d13a      	bne.n	80018b6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2221      	movs	r2, #33	; 0x21
 8001844:	2102      	movs	r1, #2
 8001846:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	438a      	bics	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 f954 	bl	8001b12 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	210e      	movs	r1, #14
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e00f      	b.n	80018a4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	210a      	movs	r1, #10
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2104      	movs	r1, #4
 80018a0:	438a      	bics	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2101      	movs	r1, #1
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2220      	movs	r2, #32
 80018ba:	2100      	movs	r1, #0
 80018bc:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80018be:	2317      	movs	r3, #23
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80018c6:	2317      	movs	r3, #23
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	781b      	ldrb	r3, [r3, #0]
} 
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b006      	add	sp, #24
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2221      	movs	r2, #33	; 0x21
 80018e0:	5c9b      	ldrb	r3, [r3, r2]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d008      	beq.n	80018fa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	2100      	movs	r1, #0
 80018f4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e020      	b.n	800193c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	210e      	movs	r1, #14
 8001906:	438a      	bics	r2, r1
 8001908:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	438a      	bics	r2, r1
 8001918:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	2101      	movs	r1, #1
 8001924:	4091      	lsls	r1, r2
 8001926:	000a      	movs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2221      	movs	r2, #33	; 0x21
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	2100      	movs	r1, #0
 8001938:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800194c:	210f      	movs	r1, #15
 800194e:	187b      	adds	r3, r7, r1
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2221      	movs	r2, #33	; 0x21
 8001958:	5c9b      	ldrb	r3, [r3, r2]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d006      	beq.n	800196e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2204      	movs	r2, #4
 8001964:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e028      	b.n	80019c0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	210e      	movs	r1, #14
 800197a:	438a      	bics	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	438a      	bics	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	2101      	movs	r1, #1
 8001998:	4091      	lsls	r1, r2
 800199a:	000a      	movs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2221      	movs	r2, #33	; 0x21
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2220      	movs	r2, #32
 80019aa:	2100      	movs	r1, #0
 80019ac:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	0010      	movs	r0, r2
 80019be:	4798      	blx	r3
    } 
  }
  return status;
 80019c0:	230f      	movs	r3, #15
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b004      	add	sp, #16
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	2204      	movs	r2, #4
 80019ec:	409a      	lsls	r2, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	d024      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x72>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2204      	movs	r2, #4
 80019fa:	4013      	ands	r3, r2
 80019fc:	d020      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2220      	movs	r2, #32
 8001a06:	4013      	ands	r3, r2
 8001a08:	d107      	bne.n	8001a1a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2104      	movs	r1, #4
 8001a16:	438a      	bics	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	2104      	movs	r1, #4
 8001a24:	4091      	lsls	r1, r2
 8001a26:	000a      	movs	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d100      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x66>
 8001a32:	e06a      	b.n	8001b0a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	0010      	movs	r0, r2
 8001a3c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a3e:	e064      	b.n	8001b0a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	2202      	movs	r2, #2
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d02b      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xda>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2202      	movs	r2, #2
 8001a54:	4013      	ands	r3, r2
 8001a56:	d027      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	4013      	ands	r3, r2
 8001a62:	d10b      	bne.n	8001a7c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	210a      	movs	r1, #10
 8001a70:	438a      	bics	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2221      	movs	r2, #33	; 0x21
 8001a78:	2101      	movs	r1, #1
 8001a7a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	2102      	movs	r1, #2
 8001a86:	4091      	lsls	r1, r2
 8001a88:	000a      	movs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	2100      	movs	r1, #0
 8001a92:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d036      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001aa6:	e030      	b.n	8001b0a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	2208      	movs	r2, #8
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d028      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x13c>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2208      	movs	r2, #8
 8001abc:	4013      	ands	r3, r2
 8001abe:	d024      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	210e      	movs	r1, #14
 8001acc:	438a      	bics	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4091      	lsls	r1, r2
 8001adc:	000a      	movs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2221      	movs	r2, #33	; 0x21
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2220      	movs	r2, #32
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	0010      	movs	r0, r2
 8001b06:	4798      	blx	r3
    }
   }
}  
 8001b08:	e7ff      	b.n	8001b0a <HAL_DMA_IRQHandler+0x13c>
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b004      	add	sp, #16
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4091      	lsls	r1, r2
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d108      	bne.n	8001b52 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b50:	e007      	b.n	8001b62 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	60da      	str	r2, [r3, #12]
}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b004      	add	sp, #16
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <DMA_CalcBaseAndBitshift+0x30>)
 8001b7a:	4694      	mov	ip, r2
 8001b7c:	4463      	add	r3, ip
 8001b7e:	2114      	movs	r1, #20
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7fe fad3 	bl	800012c <__udivsi3>
 8001b86:	0003      	movs	r3, r0
 8001b88:	009a      	lsls	r2, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a03      	ldr	r2, [pc, #12]	; (8001ba0 <DMA_CalcBaseAndBitshift+0x34>)
 8001b92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	bffdfff8 	.word	0xbffdfff8
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb2:	e14f      	b.n	8001e54 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4091      	lsls	r1, r2
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d100      	bne.n	8001bcc <HAL_GPIO_Init+0x28>
 8001bca:	e140      	b.n	8001e4e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d005      	beq.n	8001be4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d130      	bne.n	8001c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	43da      	mvns	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	409a      	lsls	r2, r3
 8001c06:	0013      	movs	r3, r2
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	43da      	mvns	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	2201      	movs	r2, #1
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d017      	beq.n	8001c82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	409a      	lsls	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2203      	movs	r2, #3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d123      	bne.n	8001cd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	58d3      	ldr	r3, [r2, r3]
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	43da      	mvns	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2107      	movs	r1, #7
 8001cba:	400b      	ands	r3, r1
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3208      	adds	r2, #8
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	6939      	ldr	r1, [r7, #16]
 8001cd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	23c0      	movs	r3, #192	; 0xc0
 8001d10:	029b      	lsls	r3, r3, #10
 8001d12:	4013      	ands	r3, r2
 8001d14:	d100      	bne.n	8001d18 <HAL_GPIO_Init+0x174>
 8001d16:	e09a      	b.n	8001e4e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d18:	4b54      	ldr	r3, [pc, #336]	; (8001e6c <HAL_GPIO_Init+0x2c8>)
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_GPIO_Init+0x2c8>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	430a      	orrs	r2, r1
 8001d22:	619a      	str	r2, [r3, #24]
 8001d24:	4b51      	ldr	r3, [pc, #324]	; (8001e6c <HAL_GPIO_Init+0x2c8>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d30:	4a4f      	ldr	r2, [pc, #316]	; (8001e70 <HAL_GPIO_Init+0x2cc>)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	589b      	ldr	r3, [r3, r2]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2203      	movs	r2, #3
 8001d42:	4013      	ands	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	0013      	movs	r3, r2
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	2390      	movs	r3, #144	; 0x90
 8001d58:	05db      	lsls	r3, r3, #23
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_Init+0x1e2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a44      	ldr	r2, [pc, #272]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_Init+0x1de>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a43      	ldr	r2, [pc, #268]	; (8001e78 <HAL_GPIO_Init+0x2d4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_Init+0x1da>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a42      	ldr	r2, [pc, #264]	; (8001e7c <HAL_GPIO_Init+0x2d8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_Init+0x1d6>
 8001d76:	2303      	movs	r3, #3
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x1e4>
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	e004      	b.n	8001d88 <HAL_GPIO_Init+0x1e4>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_Init+0x1e4>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x1e4>
 8001d86:	2300      	movs	r3, #0
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4093      	lsls	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d98:	4935      	ldr	r1, [pc, #212]	; (8001e70 <HAL_GPIO_Init+0x2cc>)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43da      	mvns	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	4013      	ands	r3, r2
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43da      	mvns	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	035b      	lsls	r3, r3, #13
 8001e12:	4013      	ands	r3, r2
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	039b      	lsls	r3, r3, #14
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_GPIO_Init+0x2dc>)
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	40da      	lsrs	r2, r3
 8001e5c:	1e13      	subs	r3, r2, #0
 8001e5e:	d000      	beq.n	8001e62 <HAL_GPIO_Init+0x2be>
 8001e60:	e6a8      	b.n	8001bb4 <HAL_GPIO_Init+0x10>
  } 
}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b006      	add	sp, #24
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	48000c00 	.word	0x48000c00
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	0008      	movs	r0, r1
 8001e8e:	0011      	movs	r1, r2
 8001e90:	1cbb      	adds	r3, r7, #2
 8001e92:	1c02      	adds	r2, r0, #0
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	1c7b      	adds	r3, r7, #1
 8001e98:	1c0a      	adds	r2, r1, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e9c:	1c7b      	adds	r3, r7, #1
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea4:	1cbb      	adds	r3, r7, #2
 8001ea6:	881a      	ldrh	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eac:	e003      	b.n	8001eb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eae:	1cbb      	adds	r3, r7, #2
 8001eb0:	881a      	ldrh	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	1dbb      	adds	r3, r7, #6
 8001eca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	1dba      	adds	r2, r7, #6
 8001ed2:	8812      	ldrh	r2, [r2, #0]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d008      	beq.n	8001eea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001eda:	1dba      	adds	r2, r7, #6
 8001edc:	8812      	ldrh	r2, [r2, #0]
 8001ede:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe fce1 	bl	80008ac <HAL_GPIO_EXTI_Callback>
  }
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e301      	b.n	800250e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d100      	bne.n	8001f16 <HAL_RCC_OscConfig+0x1e>
 8001f14:	e08d      	b.n	8002032 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f16:	4bc3      	ldr	r3, [pc, #780]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d00e      	beq.n	8001f40 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f22:	4bc0      	ldr	r3, [pc, #768]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	220c      	movs	r2, #12
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64>
 8001f2e:	4bbd      	ldr	r3, [pc, #756]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	025b      	lsls	r3, r3, #9
 8001f36:	401a      	ands	r2, r3
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	025b      	lsls	r3, r3, #9
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10d      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4bb8      	ldr	r3, [pc, #736]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	029b      	lsls	r3, r3, #10
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <HAL_RCC_OscConfig+0x56>
 8001f4c:	e070      	b.n	8002030 <HAL_RCC_OscConfig+0x138>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d000      	beq.n	8001f58 <HAL_RCC_OscConfig+0x60>
 8001f56:	e06b      	b.n	8002030 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e2d8      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_OscConfig+0x7c>
 8001f64:	4baf      	ldr	r3, [pc, #700]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4bae      	ldr	r3, [pc, #696]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	0249      	lsls	r1, r1, #9
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e02f      	b.n	8001fd4 <HAL_RCC_OscConfig+0xdc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x9e>
 8001f7c:	4ba9      	ldr	r3, [pc, #676]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4ba8      	ldr	r3, [pc, #672]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	49a9      	ldr	r1, [pc, #676]	; (8002228 <HAL_RCC_OscConfig+0x330>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	4ba6      	ldr	r3, [pc, #664]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4ba5      	ldr	r3, [pc, #660]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	49a7      	ldr	r1, [pc, #668]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e01e      	b.n	8001fd4 <HAL_RCC_OscConfig+0xdc>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d10e      	bne.n	8001fbc <HAL_RCC_OscConfig+0xc4>
 8001f9e:	4ba1      	ldr	r3, [pc, #644]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4ba0      	ldr	r3, [pc, #640]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	02c9      	lsls	r1, r1, #11
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4b9d      	ldr	r3, [pc, #628]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b9c      	ldr	r3, [pc, #624]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	0249      	lsls	r1, r1, #9
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0xdc>
 8001fbc:	4b99      	ldr	r3, [pc, #612]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b98      	ldr	r3, [pc, #608]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	4999      	ldr	r1, [pc, #612]	; (8002228 <HAL_RCC_OscConfig+0x330>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	4b96      	ldr	r3, [pc, #600]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b95      	ldr	r3, [pc, #596]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001fce:	4997      	ldr	r1, [pc, #604]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d014      	beq.n	8002006 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fac0 	bl	8001560 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fabb 	bl	8001560 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	; 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e28a      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff8:	4b8a      	ldr	r3, [pc, #552]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0xee>
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff faab 	bl	8001560 <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff faa6 	bl	8001560 <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e275      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b80      	ldr	r3, [pc, #512]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	4013      	ands	r3, r2
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x118>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d100      	bne.n	800203e <HAL_RCC_OscConfig+0x146>
 800203c:	e069      	b.n	8002112 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800203e:	4b79      	ldr	r3, [pc, #484]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	220c      	movs	r2, #12
 8002044:	4013      	ands	r3, r2
 8002046:	d00b      	beq.n	8002060 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002048:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	220c      	movs	r2, #12
 800204e:	4013      	ands	r3, r2
 8002050:	2b08      	cmp	r3, #8
 8002052:	d11c      	bne.n	800208e <HAL_RCC_OscConfig+0x196>
 8002054:	4b73      	ldr	r3, [pc, #460]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	025b      	lsls	r3, r3, #9
 800205c:	4013      	ands	r3, r2
 800205e:	d116      	bne.n	800208e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002060:	4b70      	ldr	r3, [pc, #448]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d005      	beq.n	8002076 <HAL_RCC_OscConfig+0x17e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e24b      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002076:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	22f8      	movs	r2, #248	; 0xf8
 800207c:	4393      	bics	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	00da      	lsls	r2, r3, #3
 8002086:	4b67      	ldr	r3, [pc, #412]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208c:	e041      	b.n	8002112 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d024      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b62      	ldr	r3, [pc, #392]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800209c:	2101      	movs	r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff fa5d 	bl	8001560 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff fa58 	bl	8001560 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e227      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f1      	beq.n	80020ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	22f8      	movs	r2, #248	; 0xf8
 80020ce:	4393      	bics	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00da      	lsls	r2, r3, #3
 80020d8:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e018      	b.n	8002112 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b4f      	ldr	r3, [pc, #316]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	438a      	bics	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fa38 	bl	8001560 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff fa33 	bl	8001560 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e202      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d1f1      	bne.n	80020f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2208      	movs	r2, #8
 8002118:	4013      	ands	r3, r2
 800211a:	d036      	beq.n	800218a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d019      	beq.n	8002158 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800212a:	2101      	movs	r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7ff fa16 	bl	8001560 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213a:	f7ff fa11 	bl	8001560 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1e0      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	d0f1      	beq.n	800213a <HAL_RCC_OscConfig+0x242>
 8002156:	e018      	b.n	800218a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800215a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215c:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800215e:	2101      	movs	r1, #1
 8002160:	438a      	bics	r2, r1
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7ff f9fc 	bl	8001560 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216e:	f7ff f9f7 	bl	8001560 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1c6      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	2202      	movs	r2, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d1f1      	bne.n	800216e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	d100      	bne.n	8002196 <HAL_RCC_OscConfig+0x29e>
 8002194:	e0b4      	b.n	8002300 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	201f      	movs	r0, #31
 8002198:	183b      	adds	r3, r7, r0
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	055b      	lsls	r3, r3, #21
 80021a6:	4013      	ands	r3, r2
 80021a8:	d110      	bne.n	80021cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80021b0:	2180      	movs	r1, #128	; 0x80
 80021b2:	0549      	lsls	r1, r1, #21
 80021b4:	430a      	orrs	r2, r1
 80021b6:	61da      	str	r2, [r3, #28]
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	055b      	lsls	r3, r3, #21
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021c6:	183b      	adds	r3, r7, r0
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d11a      	bne.n	800220e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	0049      	lsls	r1, r1, #1
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e6:	f7ff f9bb 	bl	8001560 <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f0:	f7ff f9b6 	bl	8001560 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e185      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4013      	ands	r3, r2
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10e      	bne.n	8002234 <HAL_RCC_OscConfig+0x33c>
 8002216:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	4b02      	ldr	r3, [pc, #8]	; (8002224 <HAL_RCC_OscConfig+0x32c>)
 800221c:	2101      	movs	r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	621a      	str	r2, [r3, #32]
 8002222:	e035      	b.n	8002290 <HAL_RCC_OscConfig+0x398>
 8002224:	40021000 	.word	0x40021000
 8002228:	fffeffff 	.word	0xfffeffff
 800222c:	fffbffff 	.word	0xfffbffff
 8002230:	40007000 	.word	0x40007000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10c      	bne.n	8002256 <HAL_RCC_OscConfig+0x35e>
 800223c:	4bb6      	ldr	r3, [pc, #728]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	4bb5      	ldr	r3, [pc, #724]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002242:	2101      	movs	r1, #1
 8002244:	438a      	bics	r2, r1
 8002246:	621a      	str	r2, [r3, #32]
 8002248:	4bb3      	ldr	r3, [pc, #716]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	4bb2      	ldr	r3, [pc, #712]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800224e:	2104      	movs	r1, #4
 8002250:	438a      	bics	r2, r1
 8002252:	621a      	str	r2, [r3, #32]
 8002254:	e01c      	b.n	8002290 <HAL_RCC_OscConfig+0x398>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b05      	cmp	r3, #5
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x380>
 800225e:	4bae      	ldr	r3, [pc, #696]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	4bad      	ldr	r3, [pc, #692]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002264:	2104      	movs	r1, #4
 8002266:	430a      	orrs	r2, r1
 8002268:	621a      	str	r2, [r3, #32]
 800226a:	4bab      	ldr	r3, [pc, #684]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800226c:	6a1a      	ldr	r2, [r3, #32]
 800226e:	4baa      	ldr	r3, [pc, #680]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002270:	2101      	movs	r1, #1
 8002272:	430a      	orrs	r2, r1
 8002274:	621a      	str	r2, [r3, #32]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0x398>
 8002278:	4ba7      	ldr	r3, [pc, #668]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800227a:	6a1a      	ldr	r2, [r3, #32]
 800227c:	4ba6      	ldr	r3, [pc, #664]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800227e:	2101      	movs	r1, #1
 8002280:	438a      	bics	r2, r1
 8002282:	621a      	str	r2, [r3, #32]
 8002284:	4ba4      	ldr	r3, [pc, #656]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	4ba3      	ldr	r3, [pc, #652]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800228a:	2104      	movs	r1, #4
 800228c:	438a      	bics	r2, r1
 800228e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d014      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7ff f962 	bl	8001560 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a0:	e009      	b.n	80022b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7ff f95d 	bl	8001560 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4a9b      	ldr	r2, [pc, #620]	; (800251c <HAL_RCC_OscConfig+0x624>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e12b      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b6:	4b98      	ldr	r3, [pc, #608]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x3aa>
 80022c0:	e013      	b.n	80022ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7ff f94d 	bl	8001560 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ca:	e009      	b.n	80022e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7ff f948 	bl	8001560 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	4a91      	ldr	r2, [pc, #580]	; (800251c <HAL_RCC_OscConfig+0x624>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e116      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	4b8d      	ldr	r3, [pc, #564]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ea:	231f      	movs	r3, #31
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d105      	bne.n	8002300 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f4:	4b88      	ldr	r3, [pc, #544]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	4b87      	ldr	r3, [pc, #540]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80022fa:	4989      	ldr	r1, [pc, #548]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2210      	movs	r2, #16
 8002306:	4013      	ands	r3, r2
 8002308:	d063      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d12a      	bne.n	8002368 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002312:	4b81      	ldr	r3, [pc, #516]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002316:	4b80      	ldr	r3, [pc, #512]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002318:	2104      	movs	r1, #4
 800231a:	430a      	orrs	r2, r1
 800231c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800231e:	4b7e      	ldr	r3, [pc, #504]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002322:	4b7d      	ldr	r3, [pc, #500]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002324:	2101      	movs	r1, #1
 8002326:	430a      	orrs	r2, r1
 8002328:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7ff f919 	bl	8001560 <HAL_GetTick>
 800232e:	0003      	movs	r3, r0
 8002330:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002334:	f7ff f914 	bl	8001560 <HAL_GetTick>
 8002338:	0002      	movs	r2, r0
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0e3      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002346:	4b74      	ldr	r3, [pc, #464]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d0f1      	beq.n	8002334 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002350:	4b71      	ldr	r3, [pc, #452]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002354:	22f8      	movs	r2, #248	; 0xf8
 8002356:	4393      	bics	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	00da      	lsls	r2, r3, #3
 8002360:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002362:	430a      	orrs	r2, r1
 8002364:	635a      	str	r2, [r3, #52]	; 0x34
 8002366:	e034      	b.n	80023d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	3305      	adds	r3, #5
 800236e:	d111      	bne.n	8002394 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002370:	4b69      	ldr	r3, [pc, #420]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002374:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002376:	2104      	movs	r1, #4
 8002378:	438a      	bics	r2, r1
 800237a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800237c:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	22f8      	movs	r2, #248	; 0xf8
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	00da      	lsls	r2, r3, #3
 800238c:	4b62      	ldr	r3, [pc, #392]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800238e:	430a      	orrs	r2, r1
 8002390:	635a      	str	r2, [r3, #52]	; 0x34
 8002392:	e01e      	b.n	80023d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002394:	4b60      	ldr	r3, [pc, #384]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002398:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800239a:	2104      	movs	r1, #4
 800239c:	430a      	orrs	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023a0:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a4:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	438a      	bics	r2, r1
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff f8d8 	bl	8001560 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023b6:	f7ff f8d3 	bl	8001560 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0a2      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d1f1      	bne.n	80023b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d100      	bne.n	80023dc <HAL_RCC_OscConfig+0x4e4>
 80023da:	e097      	b.n	800250c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023dc:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	220c      	movs	r2, #12
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d100      	bne.n	80023ea <HAL_RCC_OscConfig+0x4f2>
 80023e8:	e06b      	b.n	80024c2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d14c      	bne.n	800248c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b48      	ldr	r3, [pc, #288]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80023f8:	494a      	ldr	r1, [pc, #296]	; (8002524 <HAL_RCC_OscConfig+0x62c>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff f8af 	bl	8001560 <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff f8aa 	bl	8001560 <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e079      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	049b      	lsls	r3, r3, #18
 8002422:	4013      	ands	r3, r2
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002426:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	220f      	movs	r2, #15
 800242c:	4393      	bics	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a3a      	ldr	r2, [pc, #232]	; (8002528 <HAL_RCC_OscConfig+0x630>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	431a      	orrs	r2, r3
 800244e:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002450:	430a      	orrs	r2, r1
 8002452:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	0449      	lsls	r1, r1, #17
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7ff f87d 	bl	8001560 <HAL_GetTick>
 8002466:	0003      	movs	r3, r0
 8002468:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff f878 	bl	8001560 <HAL_GetTick>
 8002470:	0002      	movs	r2, r0
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e047      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	049b      	lsls	r3, r3, #18
 8002486:	4013      	ands	r3, r2
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x574>
 800248a:	e03f      	b.n	800250c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 8002492:	4924      	ldr	r1, [pc, #144]	; (8002524 <HAL_RCC_OscConfig+0x62c>)
 8002494:	400a      	ands	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff f862 	bl	8001560 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a2:	f7ff f85d 	bl	8001560 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e02c      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	049b      	lsls	r3, r3, #18
 80024bc:	4013      	ands	r3, r2
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x5aa>
 80024c0:	e024      	b.n	800250c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e01f      	b.n	800250e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_RCC_OscConfig+0x620>)
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	401a      	ands	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d10e      	bne.n	8002508 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	220f      	movs	r2, #15
 80024ee:	401a      	ands	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	23f0      	movs	r3, #240	; 0xf0
 80024fc:	039b      	lsls	r3, r3, #14
 80024fe:	401a      	ands	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b008      	add	sp, #32
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	40021000 	.word	0x40021000
 800251c:	00001388 	.word	0x00001388
 8002520:	efffffff 	.word	0xefffffff
 8002524:	feffffff 	.word	0xfeffffff
 8002528:	ffc2ffff 	.word	0xffc2ffff

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b3      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d911      	bls.n	8002572 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2201      	movs	r2, #1
 8002554:	4393      	bics	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e09a      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2202      	movs	r2, #2
 8002578:	4013      	ands	r3, r2
 800257a:	d015      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2204      	movs	r2, #4
 8002582:	4013      	ands	r3, r2
 8002584:	d006      	beq.n	8002594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002586:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 800258c:	21e0      	movs	r1, #224	; 0xe0
 800258e:	00c9      	lsls	r1, r1, #3
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002594:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	22f0      	movs	r2, #240	; 0xf0
 800259a:	4393      	bics	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2201      	movs	r2, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	d040      	beq.n	8002634 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	029b      	lsls	r3, r3, #10
 80025c2:	4013      	ands	r3, r2
 80025c4:	d114      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06e      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d2:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	049b      	lsls	r3, r3, #18
 80025da:	4013      	ands	r3, r2
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e062      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e05b      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2203      	movs	r2, #3
 80025f6:	4393      	bics	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002604:	f7fe ffac 	bl	8001560 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260c:	e009      	b.n	8002622 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260e:	f7fe ffa7 	bl	8001560 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <HAL_RCC_ClockConfig+0x18c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e042      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	220c      	movs	r2, #12
 8002628:	401a      	ands	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	429a      	cmp	r2, r3
 8002632:	d1ec      	bne.n	800260e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2201      	movs	r2, #1
 800263a:	4013      	ands	r3, r2
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d211      	bcs.n	8002666 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	4393      	bics	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_RCC_ClockConfig+0x184>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	4013      	ands	r3, r2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e020      	b.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2204      	movs	r2, #4
 800266c:	4013      	ands	r3, r2
 800266e:	d009      	beq.n	8002684 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <HAL_RCC_ClockConfig+0x190>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 8002680:	430a      	orrs	r2, r1
 8002682:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002684:	f000 f820 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002688:	0001      	movs	r1, r0
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_ClockConfig+0x188>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	220f      	movs	r2, #15
 8002692:	4013      	ands	r3, r2
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_RCC_ClockConfig+0x194>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	000a      	movs	r2, r1
 800269a:	40da      	lsrs	r2, r3
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x198>)
 800269e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe ff17 	bl	80014d4 <HAL_InitTick>
  
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b004      	add	sp, #16
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	00001388 	.word	0x00001388
 80026bc:	fffff8ff 	.word	0xfffff8ff
 80026c0:	08004f3c 	.word	0x08004f3c
 80026c4:	20000008 	.word	0x20000008

080026c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b08f      	sub	sp, #60	; 0x3c
 80026cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026ce:	2314      	movs	r3, #20
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026d6:	c313      	stmia	r3!, {r0, r1, r4}
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	4a29      	ldr	r2, [pc, #164]	; (8002784 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026e2:	c313      	stmia	r3!, {r0, r1, r4}
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ec:	2300      	movs	r3, #0
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f0:	2300      	movs	r3, #0
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80026fc:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	220c      	movs	r2, #12
 8002706:	4013      	ands	r3, r2
 8002708:	2b04      	cmp	r3, #4
 800270a:	d002      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x4a>
 800270c:	2b08      	cmp	r3, #8
 800270e:	d003      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x50>
 8002710:	e02d      	b.n	800276e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002716:	e02d      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	0c9b      	lsrs	r3, r3, #18
 800271c:	220f      	movs	r2, #15
 800271e:	4013      	ands	r3, r2
 8002720:	2214      	movs	r2, #20
 8002722:	18ba      	adds	r2, r7, r2
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_RCC_GetSysClockFreq+0xc0>)
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	220f      	movs	r2, #15
 800272e:	4013      	ands	r3, r2
 8002730:	1d3a      	adds	r2, r7, #4
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	025b      	lsls	r3, r3, #9
 800273c:	4013      	ands	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002742:	4812      	ldr	r0, [pc, #72]	; (800278c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002744:	f7fd fcf2 	bl	800012c <__udivsi3>
 8002748:	0003      	movs	r3, r0
 800274a:	001a      	movs	r2, r3
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	4353      	muls	r3, r2
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
 8002752:	e009      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002756:	000a      	movs	r2, r1
 8002758:	0152      	lsls	r2, r2, #5
 800275a:	1a52      	subs	r2, r2, r1
 800275c:	0193      	lsls	r3, r2, #6
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	185b      	adds	r3, r3, r1
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800276c:	e002      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002772:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b00f      	add	sp, #60	; 0x3c
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	08004e9c 	.word	0x08004e9c
 8002784:	08004eac 	.word	0x08004eac
 8002788:	40021000 	.word	0x40021000
 800278c:	007a1200 	.word	0x007a1200

08002790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	20000008 	.word	0x20000008

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027a8:	f7ff fff2 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027ac:	0001      	movs	r1, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	2207      	movs	r2, #7
 80027b6:	4013      	ands	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	40d9      	lsrs	r1, r3
 80027be:	000b      	movs	r3, r1
}    
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08004f4c 	.word	0x08004f4c

080027d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e042      	b.n	8002868 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	223d      	movs	r2, #61	; 0x3d
 80027e6:	5c9b      	ldrb	r3, [r3, r2]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223c      	movs	r2, #60	; 0x3c
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe fcd9 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223d      	movs	r2, #61	; 0x3d
 8002802:	2102      	movs	r1, #2
 8002804:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3304      	adds	r3, #4
 800280e:	0019      	movs	r1, r3
 8002810:	0010      	movs	r0, r2
 8002812:	f000 fa89 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2246      	movs	r2, #70	; 0x46
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	223e      	movs	r2, #62	; 0x3e
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	223f      	movs	r2, #63	; 0x3f
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2240      	movs	r2, #64	; 0x40
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2241      	movs	r2, #65	; 0x41
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2242      	movs	r2, #66	; 0x42
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2243      	movs	r2, #67	; 0x43
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2244      	movs	r2, #68	; 0x44
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2245      	movs	r2, #69	; 0x45
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	223d      	movs	r2, #61	; 0x3d
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	223d      	movs	r2, #61	; 0x3d
 800287c:	5c9b      	ldrb	r3, [r3, r2]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d001      	beq.n	8002888 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e033      	b.n	80028f0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	223d      	movs	r2, #61	; 0x3d
 800288c:	2102      	movs	r1, #2
 800288e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <HAL_TIM_Base_Start+0x88>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00f      	beq.n	80028ba <HAL_TIM_Base_Start+0x4a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d009      	beq.n	80028ba <HAL_TIM_Base_Start+0x4a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a14      	ldr	r2, [pc, #80]	; (80028fc <HAL_TIM_Base_Start+0x8c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_TIM_Base_Start+0x4a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <HAL_TIM_Base_Start+0x90>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d111      	bne.n	80028de <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2207      	movs	r2, #7
 80028c2:	4013      	ands	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b06      	cmp	r3, #6
 80028ca:	d010      	beq.n	80028ee <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028dc:	e007      	b.n	80028ee <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b004      	add	sp, #16
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40000400 	.word	0x40000400
 8002900:	40014000 	.word	0x40014000

08002904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2202      	movs	r2, #2
 8002914:	4013      	ands	r3, r2
 8002916:	2b02      	cmp	r3, #2
 8002918:	d124      	bne.n	8002964 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2202      	movs	r2, #2
 8002922:	4013      	ands	r3, r2
 8002924:	2b02      	cmp	r3, #2
 8002926:	d11d      	bne.n	8002964 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2203      	movs	r2, #3
 800292e:	4252      	negs	r2, r2
 8002930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2203      	movs	r2, #3
 8002940:	4013      	ands	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f000 f9d6 	bl	8002cf8 <HAL_TIM_IC_CaptureCallback>
 800294c:	e007      	b.n	800295e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0018      	movs	r0, r3
 8002952:	f000 f9c9 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f000 f9d5 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2204      	movs	r2, #4
 800296c:	4013      	ands	r3, r2
 800296e:	2b04      	cmp	r3, #4
 8002970:	d125      	bne.n	80029be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2204      	movs	r2, #4
 800297a:	4013      	ands	r3, r2
 800297c:	2b04      	cmp	r3, #4
 800297e:	d11e      	bne.n	80029be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2205      	movs	r2, #5
 8002986:	4252      	negs	r2, r2
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	23c0      	movs	r3, #192	; 0xc0
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d004      	beq.n	80029a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f9a9 	bl	8002cf8 <HAL_TIM_IC_CaptureCallback>
 80029a6:	e007      	b.n	80029b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f99c 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 f9a8 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2208      	movs	r2, #8
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d124      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2208      	movs	r2, #8
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d11d      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2209      	movs	r2, #9
 80029e0:	4252      	negs	r2, r2
 80029e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2204      	movs	r2, #4
 80029e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	2203      	movs	r2, #3
 80029f2:	4013      	ands	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 f97d 	bl	8002cf8 <HAL_TIM_IC_CaptureCallback>
 80029fe:	e007      	b.n	8002a10 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f970 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 f97c 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d125      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d11e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2211      	movs	r2, #17
 8002a38:	4252      	negs	r2, r2
 8002a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2208      	movs	r2, #8
 8002a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	23c0      	movs	r3, #192	; 0xc0
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 f950 	bl	8002cf8 <HAL_TIM_IC_CaptureCallback>
 8002a58:	e007      	b.n	8002a6a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 f943 	bl	8002ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f94f 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10f      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d108      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4252      	negs	r2, r2
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 f91d 	bl	8002cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d10f      	bne.n	8002acc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d108      	bne.n	8002acc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2281      	movs	r2, #129	; 0x81
 8002ac0:	4252      	negs	r2, r2
 8002ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 faae 	bl	8003028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2240      	movs	r2, #64	; 0x40
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d10f      	bne.n	8002afa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2240      	movs	r2, #64	; 0x40
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d108      	bne.n	8002afa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2241      	movs	r2, #65	; 0x41
 8002aee:	4252      	negs	r2, r2
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 f90f 	bl	8002d18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2220      	movs	r2, #32
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d10f      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d108      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2221      	movs	r2, #33	; 0x21
 8002b1c:	4252      	negs	r2, r2
 8002b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 fa78 	bl	8003018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	230f      	movs	r3, #15
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223c      	movs	r2, #60	; 0x3c
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIM_ConfigClockSource+0x20>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e0bc      	b.n	8002cca <HAL_TIM_ConfigClockSource+0x19a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	223c      	movs	r2, #60	; 0x3c
 8002b54:	2101      	movs	r1, #1
 8002b56:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	223d      	movs	r2, #61	; 0x3d
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2277      	movs	r2, #119	; 0x77
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4a58      	ldr	r2, [pc, #352]	; (8002cd4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	0192      	lsls	r2, r2, #6
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0xde>
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	0192      	lsls	r2, r2, #6
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d900      	bls.n	8002b96 <HAL_TIM_ConfigClockSource+0x66>
 8002b94:	e088      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002b96:	2280      	movs	r2, #128	; 0x80
 8002b98:	0152      	lsls	r2, r2, #5
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d100      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x70>
 8002b9e:	e088      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x182>
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	0152      	lsls	r2, r2, #5
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d900      	bls.n	8002baa <HAL_TIM_ConfigClockSource+0x7a>
 8002ba8:	e07e      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002baa:	2b70      	cmp	r3, #112	; 0x70
 8002bac:	d018      	beq.n	8002be0 <HAL_TIM_ConfigClockSource+0xb0>
 8002bae:	d900      	bls.n	8002bb2 <HAL_TIM_ConfigClockSource+0x82>
 8002bb0:	e07a      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bb2:	2b60      	cmp	r3, #96	; 0x60
 8002bb4:	d04f      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x126>
 8002bb6:	d900      	bls.n	8002bba <HAL_TIM_ConfigClockSource+0x8a>
 8002bb8:	e076      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bba:	2b50      	cmp	r3, #80	; 0x50
 8002bbc:	d03b      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0x106>
 8002bbe:	d900      	bls.n	8002bc2 <HAL_TIM_ConfigClockSource+0x92>
 8002bc0:	e072      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d057      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x146>
 8002bc6:	d900      	bls.n	8002bca <HAL_TIM_ConfigClockSource+0x9a>
 8002bc8:	e06e      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bca:	2b30      	cmp	r3, #48	; 0x30
 8002bcc:	d063      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x166>
 8002bce:	d86b      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d060      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x166>
 8002bd4:	d868      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d05d      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x166>
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d05b      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x166>
 8002bde:	e063      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6899      	ldr	r1, [r3, #8]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f000 f994 	bl	8002f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2277      	movs	r2, #119	; 0x77
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]
      break;
 8002c0c:	e052      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6899      	ldr	r1, [r3, #8]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f000 f97d 	bl	8002f1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	01c9      	lsls	r1, r1, #7
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
      break;
 8002c34:	e03e      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	001a      	movs	r2, r3
 8002c44:	f000 f8f0 	bl	8002e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2150      	movs	r1, #80	; 0x50
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 f94a 	bl	8002ee8 <TIM_ITRx_SetConfig>
      break;
 8002c54:	e02e      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	001a      	movs	r2, r3
 8002c64:	f000 f90e 	bl	8002e84 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2160      	movs	r1, #96	; 0x60
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 f93a 	bl	8002ee8 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e01e      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	001a      	movs	r2, r3
 8002c84:	f000 f8d0 	bl	8002e28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f92a 	bl	8002ee8 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e00e      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	0010      	movs	r0, r2
 8002ca2:	f000 f921 	bl	8002ee8 <TIM_ITRx_SetConfig>
      break;
 8002ca6:	e005      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ca8:	230f      	movs	r3, #15
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
      break;
 8002cb0:	e000      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002cb2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	223d      	movs	r2, #61	; 0x3d
 8002cb8:	2101      	movs	r1, #1
 8002cba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223c      	movs	r2, #60	; 0x3c
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

  return status;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	ffff00ff 	.word	0xffff00ff

08002cd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b002      	add	sp, #8
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <TIM_Base_SetConfig+0xe4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d008      	beq.n	8002d52 <TIM_Base_SetConfig+0x2a>
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	05db      	lsls	r3, r3, #23
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d003      	beq.n	8002d52 <TIM_Base_SetConfig+0x2a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <TIM_Base_SetConfig+0xe8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d108      	bne.n	8002d64 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2270      	movs	r2, #112	; 0x70
 8002d56:	4393      	bics	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <TIM_Base_SetConfig+0xe4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d018      	beq.n	8002d9e <TIM_Base_SetConfig+0x76>
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	05db      	lsls	r3, r3, #23
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d013      	beq.n	8002d9e <TIM_Base_SetConfig+0x76>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <TIM_Base_SetConfig+0xe8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00f      	beq.n	8002d9e <TIM_Base_SetConfig+0x76>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a24      	ldr	r2, [pc, #144]	; (8002e14 <TIM_Base_SetConfig+0xec>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00b      	beq.n	8002d9e <TIM_Base_SetConfig+0x76>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a23      	ldr	r2, [pc, #140]	; (8002e18 <TIM_Base_SetConfig+0xf0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <TIM_Base_SetConfig+0x76>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <TIM_Base_SetConfig+0xf4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d003      	beq.n	8002d9e <TIM_Base_SetConfig+0x76>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <TIM_Base_SetConfig+0xf8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d108      	bne.n	8002db0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <TIM_Base_SetConfig+0xfc>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	4393      	bics	r3, r2
 8002db6:	001a      	movs	r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a0c      	ldr	r2, [pc, #48]	; (8002e0c <TIM_Base_SetConfig+0xe4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <TIM_Base_SetConfig+0xce>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <TIM_Base_SetConfig+0xf0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <TIM_Base_SetConfig+0xce>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a0c      	ldr	r2, [pc, #48]	; (8002e1c <TIM_Base_SetConfig+0xf4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_Base_SetConfig+0xce>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <TIM_Base_SetConfig+0xf8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d103      	bne.n	8002dfe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	615a      	str	r2, [r3, #20]
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40012c00 	.word	0x40012c00
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40002000 	.word	0x40002000
 8002e18:	40014000 	.word	0x40014000
 8002e1c:	40014400 	.word	0x40014400
 8002e20:	40014800 	.word	0x40014800
 8002e24:	fffffcff 	.word	0xfffffcff

08002e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4393      	bics	r3, r2
 8002e42:	001a      	movs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	22f0      	movs	r2, #240	; 0xf0
 8002e52:	4393      	bics	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	220a      	movs	r2, #10
 8002e64:	4393      	bics	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	621a      	str	r2, [r3, #32]
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b006      	add	sp, #24
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	2210      	movs	r2, #16
 8002e96:	4393      	bics	r3, r2
 8002e98:	001a      	movs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <TIM_TI2_ConfigInputStage+0x60>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	031b      	lsls	r3, r3, #12
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	22a0      	movs	r2, #160	; 0xa0
 8002ec0:	4393      	bics	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b006      	add	sp, #24
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	ffff0fff 	.word	0xffff0fff

08002ee8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2270      	movs	r2, #112	; 0x70
 8002efc:	4393      	bics	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	2207      	movs	r2, #7
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b004      	add	sp, #16
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <TIM_ETR_SetConfig+0x3c>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	609a      	str	r2, [r3, #8]
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b006      	add	sp, #24
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	ffff00ff 	.word	0xffff00ff

08002f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	223c      	movs	r2, #60	; 0x3c
 8002f6a:	5c9b      	ldrb	r3, [r3, r2]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e047      	b.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	223c      	movs	r2, #60	; 0x3c
 8002f78:	2101      	movs	r1, #1
 8002f7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	223d      	movs	r2, #61	; 0x3d
 8002f80:	2102      	movs	r1, #2
 8002f82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2270      	movs	r2, #112	; 0x70
 8002f98:	4393      	bics	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a16      	ldr	r2, [pc, #88]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00f      	beq.n	8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	05db      	lsls	r3, r3, #23
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d009      	beq.n	8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a11      	ldr	r2, [pc, #68]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	4393      	bics	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	223d      	movs	r2, #61	; 0x3d
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	223c      	movs	r2, #60	; 0x3c
 8002ffe:	2100      	movs	r1, #0
 8003000:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	b004      	add	sp, #16
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400
 8003014:	40014000 	.word	0x40014000

08003018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e044      	b.n	80030d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2274      	movs	r2, #116	; 0x74
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f7fe f8cb 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2224      	movs	r2, #36	; 0x24
 8003066:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2101      	movs	r1, #1
 8003074:	438a      	bics	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	0018      	movs	r0, r3
 800307c:	f000 fbd2 	bl	8003824 <UART_SetConfig>
 8003080:	0003      	movs	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e024      	b.n	80030d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 fd05 	bl	8003aa4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	490d      	ldr	r1, [pc, #52]	; (80030dc <HAL_UART_Init+0xa4>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	212a      	movs	r1, #42	; 0x2a
 80030b6:	438a      	bics	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 fd9d 	bl	8003c0c <UART_CheckIdleState>
 80030d2:	0003      	movs	r3, r0
}
 80030d4:	0018      	movs	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	ffffb7ff 	.word	0xffffb7ff

080030e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	1dbb      	adds	r3, r7, #6
 80030ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d000      	beq.n	80030f8 <HAL_UART_Transmit_DMA+0x18>
 80030f6:	e08a      	b.n	800320e <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_Transmit_DMA+0x26>
 80030fe:	1dbb      	adds	r3, r7, #6
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e082      	b.n	8003210 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	015b      	lsls	r3, r3, #5
 8003112:	429a      	cmp	r2, r3
 8003114:	d109      	bne.n	800312a <HAL_UART_Transmit_DMA+0x4a>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2201      	movs	r2, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d001      	beq.n	800312a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e072      	b.n	8003210 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2274      	movs	r2, #116	; 0x74
 800312e:	5c9b      	ldrb	r3, [r3, r2]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_UART_Transmit_DMA+0x58>
 8003134:	2302      	movs	r3, #2
 8003136:	e06b      	b.n	8003210 <HAL_UART_Transmit_DMA+0x130>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2274      	movs	r2, #116	; 0x74
 800313c:	2101      	movs	r1, #1
 800313e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1dba      	adds	r2, r7, #6
 800314a:	2150      	movs	r1, #80	; 0x50
 800314c:	8812      	ldrh	r2, [r2, #0]
 800314e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1dba      	adds	r2, r7, #6
 8003154:	2152      	movs	r1, #82	; 0x52
 8003156:	8812      	ldrh	r2, [r2, #0]
 8003158:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	2100      	movs	r1, #0
 8003160:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2221      	movs	r2, #33	; 0x21
 8003166:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d02b      	beq.n	80031c8 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003174:	4a28      	ldr	r2, [pc, #160]	; (8003218 <HAL_UART_Transmit_DMA+0x138>)
 8003176:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <HAL_UART_Transmit_DMA+0x13c>)
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003184:	4a26      	ldr	r2, [pc, #152]	; (8003220 <HAL_UART_Transmit_DMA+0x140>)
 8003186:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318c:	2200      	movs	r2, #0
 800318e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	0019      	movs	r1, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3328      	adds	r3, #40	; 0x28
 80031a0:	001a      	movs	r2, r3
 80031a2:	1dbb      	adds	r3, r7, #6
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	f7fe fb2f 	bl	8001808 <HAL_DMA_Start_IT>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	2110      	movs	r1, #16
 80031b4:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2274      	movs	r2, #116	; 0x74
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e023      	b.n	8003210 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2240      	movs	r2, #64	; 0x40
 80031ce:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2274      	movs	r2, #116	; 0x74
 80031d4:	2100      	movs	r1, #0
 80031d6:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d8:	f3ef 8310 	mrs	r3, PRIMASK
 80031dc:	613b      	str	r3, [r7, #16]
  return(result);
 80031de:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	2301      	movs	r3, #1
 80031e4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f383 8810 	msr	PRIMASK, r3
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	430a      	orrs	r2, r1
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f383 8810 	msr	PRIMASK, r3
}
 8003208:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b008      	add	sp, #32
 8003216:	bd80      	pop	{r7, pc}
 8003218:	08004075 	.word	0x08004075
 800321c:	08004109 	.word	0x08004109
 8003220:	08004289 	.word	0x08004289

08003224 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b0ab      	sub	sp, #172	; 0xac
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	22a4      	movs	r2, #164	; 0xa4
 8003234:	18b9      	adds	r1, r7, r2
 8003236:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	20a0      	movs	r0, #160	; 0xa0
 8003240:	1839      	adds	r1, r7, r0
 8003242:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	219c      	movs	r1, #156	; 0x9c
 800324c:	1879      	adds	r1, r7, r1
 800324e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003250:	0011      	movs	r1, r2
 8003252:	18bb      	adds	r3, r7, r2
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a99      	ldr	r2, [pc, #612]	; (80034bc <HAL_UART_IRQHandler+0x298>)
 8003258:	4013      	ands	r3, r2
 800325a:	2298      	movs	r2, #152	; 0x98
 800325c:	18bc      	adds	r4, r7, r2
 800325e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003260:	18bb      	adds	r3, r7, r2
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d114      	bne.n	8003292 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003268:	187b      	adds	r3, r7, r1
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2220      	movs	r2, #32
 800326e:	4013      	ands	r3, r2
 8003270:	d00f      	beq.n	8003292 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003272:	183b      	adds	r3, r7, r0
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2220      	movs	r2, #32
 8003278:	4013      	ands	r3, r2
 800327a:	d00a      	beq.n	8003292 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003280:	2b00      	cmp	r3, #0
 8003282:	d100      	bne.n	8003286 <HAL_UART_IRQHandler+0x62>
 8003284:	e296      	b.n	80037b4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	0010      	movs	r0, r2
 800328e:	4798      	blx	r3
      }
      return;
 8003290:	e290      	b.n	80037b4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003292:	2398      	movs	r3, #152	; 0x98
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d100      	bne.n	800329e <HAL_UART_IRQHandler+0x7a>
 800329c:	e114      	b.n	80034c8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800329e:	239c      	movs	r3, #156	; 0x9c
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2201      	movs	r2, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	d106      	bne.n	80032b8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032aa:	23a0      	movs	r3, #160	; 0xa0
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a83      	ldr	r2, [pc, #524]	; (80034c0 <HAL_UART_IRQHandler+0x29c>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	d100      	bne.n	80032b8 <HAL_UART_IRQHandler+0x94>
 80032b6:	e107      	b.n	80034c8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032b8:	23a4      	movs	r3, #164	; 0xa4
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	4013      	ands	r3, r2
 80032c2:	d012      	beq.n	80032ea <HAL_UART_IRQHandler+0xc6>
 80032c4:	23a0      	movs	r3, #160	; 0xa0
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	d00b      	beq.n	80032ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2280      	movs	r2, #128	; 0x80
 80032de:	589b      	ldr	r3, [r3, r2]
 80032e0:	2201      	movs	r2, #1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032ea:	23a4      	movs	r3, #164	; 0xa4
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2202      	movs	r2, #2
 80032f2:	4013      	ands	r3, r2
 80032f4:	d011      	beq.n	800331a <HAL_UART_IRQHandler+0xf6>
 80032f6:	239c      	movs	r3, #156	; 0x9c
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2201      	movs	r2, #1
 80032fe:	4013      	ands	r3, r2
 8003300:	d00b      	beq.n	800331a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2202      	movs	r2, #2
 8003308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	589b      	ldr	r3, [r3, r2]
 8003310:	2204      	movs	r2, #4
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800331a:	23a4      	movs	r3, #164	; 0xa4
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2204      	movs	r2, #4
 8003322:	4013      	ands	r3, r2
 8003324:	d011      	beq.n	800334a <HAL_UART_IRQHandler+0x126>
 8003326:	239c      	movs	r3, #156	; 0x9c
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	4013      	ands	r3, r2
 8003330:	d00b      	beq.n	800334a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2204      	movs	r2, #4
 8003338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	589b      	ldr	r3, [r3, r2]
 8003340:	2202      	movs	r2, #2
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800334a:	23a4      	movs	r3, #164	; 0xa4
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2208      	movs	r2, #8
 8003352:	4013      	ands	r3, r2
 8003354:	d017      	beq.n	8003386 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003356:	23a0      	movs	r3, #160	; 0xa0
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2220      	movs	r2, #32
 800335e:	4013      	ands	r3, r2
 8003360:	d105      	bne.n	800336e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003362:	239c      	movs	r3, #156	; 0x9c
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2201      	movs	r2, #1
 800336a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800336c:	d00b      	beq.n	8003386 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2208      	movs	r2, #8
 8003374:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	589b      	ldr	r3, [r3, r2]
 800337c:	2208      	movs	r2, #8
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2180      	movs	r1, #128	; 0x80
 8003384:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003386:	23a4      	movs	r3, #164	; 0xa4
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	4013      	ands	r3, r2
 8003392:	d013      	beq.n	80033bc <HAL_UART_IRQHandler+0x198>
 8003394:	23a0      	movs	r3, #160	; 0xa0
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	04db      	lsls	r3, r3, #19
 800339e:	4013      	ands	r3, r2
 80033a0:	d00c      	beq.n	80033bc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2280      	movs	r2, #128	; 0x80
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	589b      	ldr	r3, [r3, r2]
 80033b2:	2220      	movs	r2, #32
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	589b      	ldr	r3, [r3, r2]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d100      	bne.n	80033c8 <HAL_UART_IRQHandler+0x1a4>
 80033c6:	e1f7      	b.n	80037b8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033c8:	23a4      	movs	r3, #164	; 0xa4
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2220      	movs	r2, #32
 80033d0:	4013      	ands	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033d4:	23a0      	movs	r3, #160	; 0xa0
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2220      	movs	r2, #32
 80033dc:	4013      	ands	r3, r2
 80033de:	d008      	beq.n	80033f2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d004      	beq.n	80033f2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	0010      	movs	r0, r2
 80033f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	589b      	ldr	r3, [r3, r2]
 80033f8:	2194      	movs	r1, #148	; 0x94
 80033fa:	187a      	adds	r2, r7, r1
 80033fc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2240      	movs	r2, #64	; 0x40
 8003406:	4013      	ands	r3, r2
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d004      	beq.n	8003416 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800340c:	187b      	adds	r3, r7, r1
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2228      	movs	r2, #40	; 0x28
 8003412:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003414:	d047      	beq.n	80034a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0018      	movs	r0, r3
 800341a:	f000 fdc9 	bl	8003fb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2240      	movs	r2, #64	; 0x40
 8003426:	4013      	ands	r3, r2
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d137      	bne.n	800349c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342c:	f3ef 8310 	mrs	r3, PRIMASK
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003434:	2090      	movs	r0, #144	; 0x90
 8003436:	183a      	adds	r2, r7, r0
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	2301      	movs	r3, #1
 800343c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003440:	f383 8810 	msr	PRIMASK, r3
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2140      	movs	r1, #64	; 0x40
 8003452:	438a      	bics	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	183b      	adds	r3, r7, r0
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800345e:	f383 8810 	msr	PRIMASK, r3
}
 8003462:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <HAL_UART_IRQHandler+0x2a0>)
 8003472:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	0018      	movs	r0, r3
 800347a:	f7fe fa63 	bl	8001944 <HAL_DMA_Abort_IT>
 800347e:	1e03      	subs	r3, r0, #0
 8003480:	d01a      	beq.n	80034b8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	0018      	movs	r0, r3
 800348e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003490:	e012      	b.n	80034b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0018      	movs	r0, r3
 8003496:	f000 f9bd 	bl	8003814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349a:	e00d      	b.n	80034b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 f9b8 	bl	8003814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a4:	e008      	b.n	80034b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f9b3 	bl	8003814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	2100      	movs	r1, #0
 80034b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80034b6:	e17f      	b.n	80037b8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	46c0      	nop			; (mov r8, r8)
    return;
 80034ba:	e17d      	b.n	80037b8 <HAL_UART_IRQHandler+0x594>
 80034bc:	0000080f 	.word	0x0000080f
 80034c0:	04000120 	.word	0x04000120
 80034c4:	0800430b 	.word	0x0800430b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d000      	beq.n	80034d2 <HAL_UART_IRQHandler+0x2ae>
 80034d0:	e131      	b.n	8003736 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034d2:	23a4      	movs	r3, #164	; 0xa4
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2210      	movs	r2, #16
 80034da:	4013      	ands	r3, r2
 80034dc:	d100      	bne.n	80034e0 <HAL_UART_IRQHandler+0x2bc>
 80034de:	e12a      	b.n	8003736 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034e0:	23a0      	movs	r3, #160	; 0xa0
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2210      	movs	r2, #16
 80034e8:	4013      	ands	r3, r2
 80034ea:	d100      	bne.n	80034ee <HAL_UART_IRQHandler+0x2ca>
 80034ec:	e123      	b.n	8003736 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2210      	movs	r2, #16
 80034f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2240      	movs	r2, #64	; 0x40
 80034fe:	4013      	ands	r3, r2
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d000      	beq.n	8003506 <HAL_UART_IRQHandler+0x2e2>
 8003504:	e09b      	b.n	800363e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	217e      	movs	r1, #126	; 0x7e
 8003510:	187b      	adds	r3, r7, r1
 8003512:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003514:	187b      	adds	r3, r7, r1
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d100      	bne.n	800351e <HAL_UART_IRQHandler+0x2fa>
 800351c:	e14e      	b.n	80037bc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2258      	movs	r2, #88	; 0x58
 8003522:	5a9b      	ldrh	r3, [r3, r2]
 8003524:	187a      	adds	r2, r7, r1
 8003526:	8812      	ldrh	r2, [r2, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d300      	bcc.n	800352e <HAL_UART_IRQHandler+0x30a>
 800352c:	e146      	b.n	80037bc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	187a      	adds	r2, r7, r1
 8003532:	215a      	movs	r1, #90	; 0x5a
 8003534:	8812      	ldrh	r2, [r2, #0]
 8003536:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b20      	cmp	r3, #32
 8003540:	d06e      	beq.n	8003620 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003542:	f3ef 8310 	mrs	r3, PRIMASK
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800354a:	67bb      	str	r3, [r7, #120]	; 0x78
 800354c:	2301      	movs	r3, #1
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	499a      	ldr	r1, [pc, #616]	; (80037cc <HAL_UART_IRQHandler+0x5a8>)
 8003564:	400a      	ands	r2, r1
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003574:	f3ef 8310 	mrs	r3, PRIMASK
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357c:	677b      	str	r3, [r7, #116]	; 0x74
 800357e:	2301      	movs	r3, #1
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003584:	f383 8810 	msr	PRIMASK, r3
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	438a      	bics	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800359c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a6:	f3ef 8310 	mrs	r3, PRIMASK
 80035aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80035ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ae:	673b      	str	r3, [r7, #112]	; 0x70
 80035b0:	2301      	movs	r3, #1
 80035b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b6:	f383 8810 	msr	PRIMASK, r3
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2140      	movs	r1, #64	; 0x40
 80035c8:	438a      	bics	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e4:	f3ef 8310 	mrs	r3, PRIMASK
 80035e8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80035ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ee:	2301      	movs	r3, #1
 80035f0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2110      	movs	r1, #16
 8003606:	438a      	bics	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003610:	f383 8810 	msr	PRIMASK, r3
}
 8003614:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	0018      	movs	r0, r3
 800361c:	f7fe f95a 	bl	80018d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2258      	movs	r2, #88	; 0x58
 8003624:	5a9a      	ldrh	r2, [r3, r2]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	215a      	movs	r1, #90	; 0x5a
 800362a:	5a5b      	ldrh	r3, [r3, r1]
 800362c:	b29b      	uxth	r3, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0011      	movs	r1, r2
 8003636:	0018      	movs	r0, r3
 8003638:	f7fd fa0e 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800363c:	e0be      	b.n	80037bc <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2258      	movs	r2, #88	; 0x58
 8003642:	5a99      	ldrh	r1, [r3, r2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	225a      	movs	r2, #90	; 0x5a
 8003648:	5a9b      	ldrh	r3, [r3, r2]
 800364a:	b29a      	uxth	r2, r3
 800364c:	208e      	movs	r0, #142	; 0x8e
 800364e:	183b      	adds	r3, r7, r0
 8003650:	1a8a      	subs	r2, r1, r2
 8003652:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	225a      	movs	r2, #90	; 0x5a
 8003658:	5a9b      	ldrh	r3, [r3, r2]
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d100      	bne.n	8003662 <HAL_UART_IRQHandler+0x43e>
 8003660:	e0ae      	b.n	80037c0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003662:	183b      	adds	r3, r7, r0
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d100      	bne.n	800366c <HAL_UART_IRQHandler+0x448>
 800366a:	e0a9      	b.n	80037c0 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366c:	f3ef 8310 	mrs	r3, PRIMASK
 8003670:	60fb      	str	r3, [r7, #12]
  return(result);
 8003672:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003674:	2488      	movs	r4, #136	; 0x88
 8003676:	193a      	adds	r2, r7, r4
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	2301      	movs	r3, #1
 800367c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	494f      	ldr	r1, [pc, #316]	; (80037d0 <HAL_UART_IRQHandler+0x5ac>)
 8003692:	400a      	ands	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	193b      	adds	r3, r7, r4
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a4:	f3ef 8310 	mrs	r3, PRIMASK
 80036a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80036aa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ac:	2484      	movs	r4, #132	; 0x84
 80036ae:	193a      	adds	r2, r7, r4
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	2301      	movs	r3, #1
 80036b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f383 8810 	msr	PRIMASK, r3
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	438a      	bics	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f383 8810 	msr	PRIMASK, r3
}
 80036da:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ee:	f3ef 8310 	mrs	r3, PRIMASK
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f6:	2480      	movs	r4, #128	; 0x80
 80036f8:	193a      	adds	r2, r7, r4
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	2301      	movs	r3, #1
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	f383 8810 	msr	PRIMASK, r3
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2110      	movs	r1, #16
 8003714:	438a      	bics	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	193b      	adds	r3, r7, r4
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	f383 8810 	msr	PRIMASK, r3
}
 8003724:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003726:	183b      	adds	r3, r7, r0
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0011      	movs	r1, r2
 800372e:	0018      	movs	r0, r3
 8003730:	f7fd f992 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003734:	e044      	b.n	80037c0 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003736:	23a4      	movs	r3, #164	; 0xa4
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	035b      	lsls	r3, r3, #13
 8003740:	4013      	ands	r3, r2
 8003742:	d010      	beq.n	8003766 <HAL_UART_IRQHandler+0x542>
 8003744:	239c      	movs	r3, #156	; 0x9c
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	03db      	lsls	r3, r3, #15
 800374e:	4013      	ands	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	0352      	lsls	r2, r2, #13
 800375a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	0018      	movs	r0, r3
 8003760:	f000 fe15 	bl	800438e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003764:	e02f      	b.n	80037c6 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003766:	23a4      	movs	r3, #164	; 0xa4
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	4013      	ands	r3, r2
 8003770:	d00f      	beq.n	8003792 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003772:	23a0      	movs	r3, #160	; 0xa0
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	4013      	ands	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01e      	beq.n	80037c4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	0010      	movs	r0, r2
 800378e:	4798      	blx	r3
    }
    return;
 8003790:	e018      	b.n	80037c4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003792:	23a4      	movs	r3, #164	; 0xa4
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2240      	movs	r2, #64	; 0x40
 800379a:	4013      	ands	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_UART_IRQHandler+0x5a2>
 800379e:	23a0      	movs	r3, #160	; 0xa0
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	4013      	ands	r3, r2
 80037a8:	d00d      	beq.n	80037c6 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 fdc3 	bl	8004338 <UART_EndTransmit_IT>
    return;
 80037b2:	e008      	b.n	80037c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	e006      	b.n	80037c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	e004      	b.n	80037c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	e002      	b.n	80037c6 <HAL_UART_IRQHandler+0x5a2>
      return;
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	e000      	b.n	80037c6 <HAL_UART_IRQHandler+0x5a2>
    return;
 80037c4:	46c0      	nop			; (mov r8, r8)
  }

}
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b02b      	add	sp, #172	; 0xac
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	fffffeff 	.word	0xfffffeff
 80037d0:	fffffedf 	.word	0xfffffedf

080037d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}

08003824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800382c:	231e      	movs	r3, #30
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a8d      	ldr	r2, [pc, #564]	; (8003a88 <UART_SetConfig+0x264>)
 8003854:	4013      	ands	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a88      	ldr	r2, [pc, #544]	; (8003a8c <UART_SetConfig+0x268>)
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a7f      	ldr	r2, [pc, #508]	; (8003a90 <UART_SetConfig+0x26c>)
 8003892:	4013      	ands	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	430a      	orrs	r2, r1
 800389e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7b      	ldr	r2, [pc, #492]	; (8003a94 <UART_SetConfig+0x270>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d127      	bne.n	80038fa <UART_SetConfig+0xd6>
 80038aa:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <UART_SetConfig+0x274>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	2203      	movs	r2, #3
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d00d      	beq.n	80038d2 <UART_SetConfig+0xae>
 80038b6:	d81b      	bhi.n	80038f0 <UART_SetConfig+0xcc>
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d014      	beq.n	80038e6 <UART_SetConfig+0xc2>
 80038bc:	d818      	bhi.n	80038f0 <UART_SetConfig+0xcc>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <UART_SetConfig+0xa4>
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d00a      	beq.n	80038dc <UART_SetConfig+0xb8>
 80038c6:	e013      	b.n	80038f0 <UART_SetConfig+0xcc>
 80038c8:	231f      	movs	r3, #31
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	e021      	b.n	8003916 <UART_SetConfig+0xf2>
 80038d2:	231f      	movs	r3, #31
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2202      	movs	r2, #2
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e01c      	b.n	8003916 <UART_SetConfig+0xf2>
 80038dc:	231f      	movs	r3, #31
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	2204      	movs	r2, #4
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e017      	b.n	8003916 <UART_SetConfig+0xf2>
 80038e6:	231f      	movs	r3, #31
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	2208      	movs	r2, #8
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e012      	b.n	8003916 <UART_SetConfig+0xf2>
 80038f0:	231f      	movs	r3, #31
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	2210      	movs	r2, #16
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e00d      	b.n	8003916 <UART_SetConfig+0xf2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a67      	ldr	r2, [pc, #412]	; (8003a9c <UART_SetConfig+0x278>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d104      	bne.n	800390e <UART_SetConfig+0xea>
 8003904:	231f      	movs	r3, #31
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e003      	b.n	8003916 <UART_SetConfig+0xf2>
 800390e:	231f      	movs	r3, #31
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2210      	movs	r2, #16
 8003914:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	429a      	cmp	r2, r3
 8003920:	d15d      	bne.n	80039de <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003922:	231f      	movs	r3, #31
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d015      	beq.n	8003958 <UART_SetConfig+0x134>
 800392c:	dc18      	bgt.n	8003960 <UART_SetConfig+0x13c>
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00d      	beq.n	800394e <UART_SetConfig+0x12a>
 8003932:	dc15      	bgt.n	8003960 <UART_SetConfig+0x13c>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <UART_SetConfig+0x11a>
 8003938:	2b02      	cmp	r3, #2
 800393a:	d005      	beq.n	8003948 <UART_SetConfig+0x124>
 800393c:	e010      	b.n	8003960 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800393e:	f7fe ff31 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003942:	0003      	movs	r3, r0
 8003944:	61bb      	str	r3, [r7, #24]
        break;
 8003946:	e012      	b.n	800396e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003948:	4b55      	ldr	r3, [pc, #340]	; (8003aa0 <UART_SetConfig+0x27c>)
 800394a:	61bb      	str	r3, [r7, #24]
        break;
 800394c:	e00f      	b.n	800396e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394e:	f7fe febb 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8003952:	0003      	movs	r3, r0
 8003954:	61bb      	str	r3, [r7, #24]
        break;
 8003956:	e00a      	b.n	800396e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	61bb      	str	r3, [r7, #24]
        break;
 800395e:	e006      	b.n	800396e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003964:	231e      	movs	r3, #30
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
        break;
 800396c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d100      	bne.n	8003976 <UART_SetConfig+0x152>
 8003974:	e07b      	b.n	8003a6e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	005a      	lsls	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	18d2      	adds	r2, r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	0019      	movs	r1, r3
 8003988:	0010      	movs	r0, r2
 800398a:	f7fc fbcf 	bl	800012c <__udivsi3>
 800398e:	0003      	movs	r3, r0
 8003990:	b29b      	uxth	r3, r3
 8003992:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	d91c      	bls.n	80039d4 <UART_SetConfig+0x1b0>
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	025b      	lsls	r3, r3, #9
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d217      	bcs.n	80039d4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	200e      	movs	r0, #14
 80039aa:	183b      	adds	r3, r7, r0
 80039ac:	210f      	movs	r1, #15
 80039ae:	438a      	bics	r2, r1
 80039b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2207      	movs	r2, #7
 80039ba:	4013      	ands	r3, r2
 80039bc:	b299      	uxth	r1, r3
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	183a      	adds	r2, r7, r0
 80039c2:	8812      	ldrh	r2, [r2, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	183a      	adds	r2, r7, r0
 80039ce:	8812      	ldrh	r2, [r2, #0]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	e04c      	b.n	8003a6e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80039d4:	231e      	movs	r3, #30
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e047      	b.n	8003a6e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039de:	231f      	movs	r3, #31
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d015      	beq.n	8003a14 <UART_SetConfig+0x1f0>
 80039e8:	dc18      	bgt.n	8003a1c <UART_SetConfig+0x1f8>
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d00d      	beq.n	8003a0a <UART_SetConfig+0x1e6>
 80039ee:	dc15      	bgt.n	8003a1c <UART_SetConfig+0x1f8>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <UART_SetConfig+0x1d6>
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d005      	beq.n	8003a04 <UART_SetConfig+0x1e0>
 80039f8:	e010      	b.n	8003a1c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039fa:	f7fe fed3 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 80039fe:	0003      	movs	r3, r0
 8003a00:	61bb      	str	r3, [r7, #24]
        break;
 8003a02:	e012      	b.n	8003a2a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a04:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <UART_SetConfig+0x27c>)
 8003a06:	61bb      	str	r3, [r7, #24]
        break;
 8003a08:	e00f      	b.n	8003a2a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7fe fe5d 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8003a0e:	0003      	movs	r3, r0
 8003a10:	61bb      	str	r3, [r7, #24]
        break;
 8003a12:	e00a      	b.n	8003a2a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	61bb      	str	r3, [r7, #24]
        break;
 8003a1a:	e006      	b.n	8003a2a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a20:	231e      	movs	r3, #30
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
        break;
 8003a28:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01e      	beq.n	8003a6e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	085a      	lsrs	r2, r3, #1
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	18d2      	adds	r2, r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	0019      	movs	r1, r3
 8003a40:	0010      	movs	r0, r2
 8003a42:	f7fc fb73 	bl	800012c <__udivsi3>
 8003a46:	0003      	movs	r3, r0
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	d909      	bls.n	8003a66 <UART_SetConfig+0x242>
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	025b      	lsls	r3, r3, #9
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d204      	bcs.n	8003a66 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	e003      	b.n	8003a6e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003a66:	231e      	movs	r3, #30
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a7a:	231e      	movs	r3, #30
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	781b      	ldrb	r3, [r3, #0]
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b008      	add	sp, #32
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	ffff69f3 	.word	0xffff69f3
 8003a8c:	ffffcfff 	.word	0xffffcfff
 8003a90:	fffff4ff 	.word	0xfffff4ff
 8003a94:	40013800 	.word	0x40013800
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40004400 	.word	0x40004400
 8003aa0:	007a1200 	.word	0x007a1200

08003aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d00b      	beq.n	8003ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a4a      	ldr	r2, [pc, #296]	; (8003be8 <UART_AdvFeatureConfig+0x144>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4a43      	ldr	r2, [pc, #268]	; (8003bec <UART_AdvFeatureConfig+0x148>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	2204      	movs	r2, #4
 8003af6:	4013      	ands	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <UART_AdvFeatureConfig+0x14c>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	0019      	movs	r1, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	2208      	movs	r2, #8
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4a34      	ldr	r2, [pc, #208]	; (8003bf4 <UART_AdvFeatureConfig+0x150>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	0019      	movs	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	2210      	movs	r2, #16
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d00b      	beq.n	8003b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4a2c      	ldr	r2, [pc, #176]	; (8003bf8 <UART_AdvFeatureConfig+0x154>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	0019      	movs	r1, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d00b      	beq.n	8003b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4a25      	ldr	r2, [pc, #148]	; (8003bfc <UART_AdvFeatureConfig+0x158>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	2240      	movs	r2, #64	; 0x40
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d01d      	beq.n	8003bbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <UART_AdvFeatureConfig+0x15c>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	035b      	lsls	r3, r3, #13
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d10b      	bne.n	8003bbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <UART_AdvFeatureConfig+0x160>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <UART_AdvFeatureConfig+0x164>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  }
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	fffdffff 	.word	0xfffdffff
 8003bec:	fffeffff 	.word	0xfffeffff
 8003bf0:	fffbffff 	.word	0xfffbffff
 8003bf4:	ffff7fff 	.word	0xffff7fff
 8003bf8:	ffffefff 	.word	0xffffefff
 8003bfc:	ffffdfff 	.word	0xffffdfff
 8003c00:	ffefffff 	.word	0xffefffff
 8003c04:	ff9fffff 	.word	0xff9fffff
 8003c08:	fff7ffff 	.word	0xfff7ffff

08003c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c1c:	f7fd fca0 	bl	8001560 <HAL_GetTick>
 8003c20:	0003      	movs	r3, r0
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d10c      	bne.n	8003c4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	0391      	lsls	r1, r2, #14
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <UART_CheckIdleState+0x8c>)
 8003c3c:	9200      	str	r2, [sp, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f000 f82c 	bl	8003c9c <UART_WaitOnFlagUntilTimeout>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d001      	beq.n	8003c4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e021      	b.n	8003c90 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2204      	movs	r2, #4
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d10c      	bne.n	8003c74 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	03d1      	lsls	r1, r2, #15
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <UART_CheckIdleState+0x8c>)
 8003c64:	9200      	str	r2, [sp, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f000 f818 	bl	8003c9c <UART_WaitOnFlagUntilTimeout>
 8003c6c:	1e03      	subs	r3, r0, #0
 8003c6e:	d001      	beq.n	8003c74 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e00d      	b.n	8003c90 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2274      	movs	r2, #116	; 0x74
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b004      	add	sp, #16
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	01ffffff 	.word	0x01ffffff

08003c9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b094      	sub	sp, #80	; 0x50
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	1dfb      	adds	r3, r7, #7
 8003caa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cac:	e0a3      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	d100      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003cb4:	e09f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7fd fc53 	bl	8001560 <HAL_GetTick>
 8003cba:	0002      	movs	r2, r0
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d13d      	bne.n	8003d48 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	494c      	ldr	r1, [pc, #304]	; (8003e20 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003cee:	400a      	ands	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40
 8003d08:	2301      	movs	r3, #1
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	f383 8810 	msr	PRIMASK, r3
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	438a      	bics	r2, r1
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2a:	f383 8810 	msr	PRIMASK, r3
}
 8003d2e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2274      	movs	r2, #116	; 0x74
 8003d40:	2100      	movs	r1, #0
 8003d42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e067      	b.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	4013      	ands	r3, r2
 8003d52:	d050      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	401a      	ands	r2, r3
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d146      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	0112      	lsls	r2, r2, #4
 8003d70:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d72:	f3ef 8310 	mrs	r3, PRIMASK
 8003d76:	613b      	str	r3, [r7, #16]
  return(result);
 8003d78:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f383 8810 	msr	PRIMASK, r3
}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4923      	ldr	r1, [pc, #140]	; (8003e20 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f383 8810 	msr	PRIMASK, r3
}
 8003da2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da4:	f3ef 8310 	mrs	r3, PRIMASK
 8003da8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003daa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dae:	2301      	movs	r3, #1
 8003db0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f383 8810 	msr	PRIMASK, r3
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	438a      	bics	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	2120      	movs	r1, #32
 8003de8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2274      	movs	r2, #116	; 0x74
 8003dee:	2100      	movs	r1, #0
 8003df0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e010      	b.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	425a      	negs	r2, r3
 8003e06:	4153      	adcs	r3, r2
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	1dfb      	adds	r3, r7, #7
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d100      	bne.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003e14:	e74b      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b014      	add	sp, #80	; 0x50
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	fffffe5f 	.word	0xfffffe5f

08003e24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b090      	sub	sp, #64	; 0x40
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	1dbb      	adds	r3, r7, #6
 8003e30:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1dba      	adds	r2, r7, #6
 8003e3c:	2158      	movs	r1, #88	; 0x58
 8003e3e:	8812      	ldrh	r2, [r2, #0]
 8003e40:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	2100      	movs	r1, #0
 8003e48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2222      	movs	r2, #34	; 0x22
 8003e4e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d02b      	beq.n	8003eb0 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a3f      	ldr	r2, [pc, #252]	; (8003f5c <UART_Start_Receive_DMA+0x138>)
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a3e      	ldr	r2, [pc, #248]	; (8003f60 <UART_Start_Receive_DMA+0x13c>)
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4a3d      	ldr	r2, [pc, #244]	; (8003f64 <UART_Start_Receive_DMA+0x140>)
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	2200      	movs	r2, #0
 8003e76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3324      	adds	r3, #36	; 0x24
 8003e82:	0019      	movs	r1, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dbb      	adds	r3, r7, #6
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	f7fd fcbb 	bl	8001808 <HAL_DMA_Start_IT>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d00c      	beq.n	8003eb0 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2280      	movs	r2, #128	; 0x80
 8003e9a:	2110      	movs	r1, #16
 8003e9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2274      	movs	r2, #116	; 0x74
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e050      	b.n	8003f52 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2274      	movs	r2, #116	; 0x74
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8003ebe:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f383 8810 	msr	PRIMASK, r3
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	0049      	lsls	r1, r1, #1
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ef2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f383 8810 	msr	PRIMASK, r3
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	f383 8810 	msr	PRIMASK, r3
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
 8003f28:	2301      	movs	r3, #1
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	f383 8810 	msr	PRIMASK, r3
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2140      	movs	r1, #64	; 0x40
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	f383 8810 	msr	PRIMASK, r3
}
 8003f4e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b010      	add	sp, #64	; 0x40
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	08004129 	.word	0x08004129
 8003f60:	0800424d 	.word	0x0800424d
 8003f64:	08004289 	.word	0x08004289

08003f68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f70:	f3ef 8310 	mrs	r3, PRIMASK
 8003f74:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f76:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f383 8810 	msr	PRIMASK, r3
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	21c0      	movs	r1, #192	; 0xc0
 8003f92:	438a      	bics	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f383 8810 	msr	PRIMASK, r3
}
 8003fa0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b006      	add	sp, #24
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08e      	sub	sp, #56	; 0x38
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8003fbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4925      	ldr	r1, [pc, #148]	; (8004070 <UART_EndRxTransfer+0xc0>)
 8003fda:	400a      	ands	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f383 8810 	msr	PRIMASK, r3
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fea:	f3ef 8310 	mrs	r3, PRIMASK
 8003fee:	623b      	str	r3, [r7, #32]
  return(result);
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	f383 8810 	msr	PRIMASK, r3
}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2101      	movs	r1, #1
 800400c:	438a      	bics	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	2b01      	cmp	r3, #1
 8004022:	d118      	bne.n	8004056 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004024:	f3ef 8310 	mrs	r3, PRIMASK
 8004028:	60bb      	str	r3, [r7, #8]
  return(result);
 800402a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402e:	2301      	movs	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f383 8810 	msr	PRIMASK, r3
}
 8004038:	46c0      	nop			; (mov r8, r8)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2110      	movs	r1, #16
 8004046:	438a      	bics	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	b00e      	add	sp, #56	; 0x38
 800406e:	bd80      	pop	{r7, pc}
 8004070:	fffffedf 	.word	0xfffffedf

08004074 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08c      	sub	sp, #48	; 0x30
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2b20      	cmp	r3, #32
 8004088:	d035      	beq.n	80040f6 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	2252      	movs	r2, #82	; 0x52
 800408e:	2100      	movs	r1, #0
 8004090:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004092:	f3ef 8310 	mrs	r3, PRIMASK
 8004096:	60fb      	str	r3, [r7, #12]
  return(result);
 8004098:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
 800409c:	2301      	movs	r3, #1
 800409e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f383 8810 	msr	PRIMASK, r3
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2180      	movs	r1, #128	; 0x80
 80040b4:	438a      	bics	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f383 8810 	msr	PRIMASK, r3
}
 80040c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c4:	f3ef 8310 	mrs	r3, PRIMASK
 80040c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80040ca:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
 80040ce:	2301      	movs	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f383 8810 	msr	PRIMASK, r3
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f383 8810 	msr	PRIMASK, r3
}
 80040f4:	e004      	b.n	8004100 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7ff fb6b 	bl	80037d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b00c      	add	sp, #48	; 0x30
 8004106:	bd80      	pop	{r7, pc}

08004108 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	0018      	movs	r0, r3
 800411a:	f7ff fb63 	bl	80037e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b004      	add	sp, #16
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b094      	sub	sp, #80	; 0x50
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b20      	cmp	r3, #32
 800413c:	d06e      	beq.n	800421c <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 800413e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004140:	225a      	movs	r2, #90	; 0x5a
 8004142:	2100      	movs	r1, #0
 8004144:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004146:	f3ef 8310 	mrs	r3, PRIMASK
 800414a:	61bb      	str	r3, [r7, #24]
  return(result);
 800414c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800414e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004150:	2301      	movs	r3, #1
 8004152:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4938      	ldr	r1, [pc, #224]	; (8004248 <UART_DMAReceiveCplt+0x120>)
 8004168:	400a      	ands	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800416e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004178:	f3ef 8310 	mrs	r3, PRIMASK
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	647b      	str	r3, [r7, #68]	; 0x44
 8004182:	2301      	movs	r3, #1
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	f383 8810 	msr	PRIMASK, r3
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	438a      	bics	r2, r1
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	f383 8810 	msr	PRIMASK, r3
}
 80041a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041aa:	f3ef 8310 	mrs	r3, PRIMASK
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b2:	643b      	str	r3, [r7, #64]	; 0x40
 80041b4:	2301      	movs	r3, #1
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2140      	movs	r1, #64	; 0x40
 80041cc:	438a      	bics	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	f383 8810 	msr	PRIMASK, r3
}
 80041da:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041de:	2220      	movs	r2, #32
 80041e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d118      	bne.n	800421c <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ea:	f3ef 8310 	mrs	r3, PRIMASK
 80041ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80041f0:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f4:	2301      	movs	r3, #1
 80041f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f383 8810 	msr	PRIMASK, r3
}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2110      	movs	r1, #16
 800420c:	438a      	bics	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f383 8810 	msr	PRIMASK, r3
}
 800421a:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004220:	2b01      	cmp	r3, #1
 8004222:	d108      	bne.n	8004236 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004226:	2258      	movs	r2, #88	; 0x58
 8004228:	5a9a      	ldrh	r2, [r3, r2]
 800422a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422c:	0011      	movs	r1, r2
 800422e:	0018      	movs	r0, r3
 8004230:	f7fc fc12 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004234:	e003      	b.n	800423e <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8004236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004238:	0018      	movs	r0, r3
 800423a:	f7ff fadb 	bl	80037f4 <HAL_UART_RxCpltCallback>
}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	46bd      	mov	sp, r7
 8004242:	b014      	add	sp, #80	; 0x50
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	fffffeff 	.word	0xfffffeff

0800424c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425e:	2b01      	cmp	r3, #1
 8004260:	d10a      	bne.n	8004278 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2258      	movs	r2, #88	; 0x58
 8004266:	5a9b      	ldrh	r3, [r3, r2]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	0011      	movs	r1, r2
 8004270:	0018      	movs	r0, r3
 8004272:	f7fc fbf1 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004276:	e003      	b.n	8004280 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	0018      	movs	r0, r3
 800427c:	f7ff fac2 	bl	8003804 <HAL_UART_RxHalfCpltCallback>
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b004      	add	sp, #16
 8004286:	bd80      	pop	{r7, pc}

08004288 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2280      	movs	r2, #128	; 0x80
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d10a      	bne.n	80042c6 <UART_DMAError+0x3e>
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b21      	cmp	r3, #33	; 0x21
 80042b4:	d107      	bne.n	80042c6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2252      	movs	r2, #82	; 0x52
 80042ba:	2100      	movs	r1, #0
 80042bc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fe51 	bl	8003f68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2240      	movs	r2, #64	; 0x40
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b40      	cmp	r3, #64	; 0x40
 80042d2:	d10a      	bne.n	80042ea <UART_DMAError+0x62>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b22      	cmp	r3, #34	; 0x22
 80042d8:	d107      	bne.n	80042ea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	225a      	movs	r2, #90	; 0x5a
 80042de:	2100      	movs	r1, #0
 80042e0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff fe63 	bl	8003fb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2280      	movs	r2, #128	; 0x80
 80042ee:	589b      	ldr	r3, [r3, r2]
 80042f0:	2210      	movs	r2, #16
 80042f2:	431a      	orrs	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2180      	movs	r1, #128	; 0x80
 80042f8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7ff fa89 	bl	8003814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b006      	add	sp, #24
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	225a      	movs	r2, #90	; 0x5a
 800431c:	2100      	movs	r1, #0
 800431e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2252      	movs	r2, #82	; 0x52
 8004324:	2100      	movs	r1, #0
 8004326:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	0018      	movs	r0, r3
 800432c:	f7ff fa72 	bl	8003814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b004      	add	sp, #16
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004340:	f3ef 8310 	mrs	r3, PRIMASK
 8004344:	60bb      	str	r3, [r7, #8]
  return(result);
 8004346:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	2301      	movs	r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2140      	movs	r1, #64	; 0x40
 8004362:	438a      	bics	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f383 8810 	msr	PRIMASK, r3
}
 8004370:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff fa27 	bl	80037d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b006      	add	sp, #24
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b002      	add	sp, #8
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800439e:	b5b0      	push	{r4, r5, r7, lr}
 80043a0:	b08a      	sub	sp, #40	; 0x28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	1dbb      	adds	r3, r7, #6
 80043aa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d15e      	bne.n	8004472 <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80043ba:	1dbb      	adds	r3, r7, #6
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e056      	b.n	8004474 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	015b      	lsls	r3, r3, #5
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d109      	bne.n	80043e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2201      	movs	r2, #1
 80043de:	4013      	ands	r3, r2
 80043e0:	d001      	beq.n	80043e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e046      	b.n	8004474 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2274      	movs	r2, #116	; 0x74
 80043ea:	5c9b      	ldrb	r3, [r3, r2]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e03f      	b.n	8004474 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2274      	movs	r2, #116	; 0x74
 80043f8:	2101      	movs	r1, #1
 80043fa:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004402:	2527      	movs	r5, #39	; 0x27
 8004404:	197c      	adds	r4, r7, r5
 8004406:	1dbb      	adds	r3, r7, #6
 8004408:	881a      	ldrh	r2, [r3, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	0018      	movs	r0, r3
 8004410:	f7ff fd08 	bl	8003e24 <UART_Start_Receive_DMA>
 8004414:	0003      	movs	r3, r0
 8004416:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004418:	197b      	adds	r3, r7, r5
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d124      	bne.n	800446a <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	2b01      	cmp	r3, #1
 8004426:	d11c      	bne.n	8004462 <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2210      	movs	r2, #16
 800442e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004430:	f3ef 8310 	mrs	r3, PRIMASK
 8004434:	617b      	str	r3, [r7, #20]
  return(result);
 8004436:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004438:	623b      	str	r3, [r7, #32]
 800443a:	2301      	movs	r3, #1
 800443c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f383 8810 	msr	PRIMASK, r3
}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2110      	movs	r1, #16
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f383 8810 	msr	PRIMASK, r3
}
 8004460:	e003      	b.n	800446a <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004462:	2327      	movs	r3, #39	; 0x27
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800446a:	2327      	movs	r3, #39	; 0x27
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	e000      	b.n	8004474 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 8004472:	2302      	movs	r3, #2
  }
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	b00a      	add	sp, #40	; 0x28
 800447a:	bdb0      	pop	{r4, r5, r7, pc}

0800447c <__errno>:
 800447c:	4b01      	ldr	r3, [pc, #4]	; (8004484 <__errno+0x8>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	4770      	bx	lr
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	20000014 	.word	0x20000014

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	2600      	movs	r6, #0
 800448c:	4d0c      	ldr	r5, [pc, #48]	; (80044c0 <__libc_init_array+0x38>)
 800448e:	4c0d      	ldr	r4, [pc, #52]	; (80044c4 <__libc_init_array+0x3c>)
 8004490:	1b64      	subs	r4, r4, r5
 8004492:	10a4      	asrs	r4, r4, #2
 8004494:	42a6      	cmp	r6, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	2600      	movs	r6, #0
 800449a:	f000 fc9d 	bl	8004dd8 <_init>
 800449e:	4d0a      	ldr	r5, [pc, #40]	; (80044c8 <__libc_init_array+0x40>)
 80044a0:	4c0a      	ldr	r4, [pc, #40]	; (80044cc <__libc_init_array+0x44>)
 80044a2:	1b64      	subs	r4, r4, r5
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	42a6      	cmp	r6, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	00b3      	lsls	r3, r6, #2
 80044ae:	58eb      	ldr	r3, [r5, r3]
 80044b0:	4798      	blx	r3
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	00b3      	lsls	r3, r6, #2
 80044b8:	58eb      	ldr	r3, [r5, r3]
 80044ba:	4798      	blx	r3
 80044bc:	3601      	adds	r6, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	08004f88 	.word	0x08004f88
 80044c4:	08004f88 	.word	0x08004f88
 80044c8:	08004f88 	.word	0x08004f88
 80044cc:	08004f8c 	.word	0x08004f8c

080044d0 <memcpy>:
 80044d0:	2300      	movs	r3, #0
 80044d2:	b510      	push	{r4, lr}
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d100      	bne.n	80044da <memcpy+0xa>
 80044d8:	bd10      	pop	{r4, pc}
 80044da:	5ccc      	ldrb	r4, [r1, r3]
 80044dc:	54c4      	strb	r4, [r0, r3]
 80044de:	3301      	adds	r3, #1
 80044e0:	e7f8      	b.n	80044d4 <memcpy+0x4>

080044e2 <memset>:
 80044e2:	0003      	movs	r3, r0
 80044e4:	1882      	adds	r2, r0, r2
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d100      	bne.n	80044ec <memset+0xa>
 80044ea:	4770      	bx	lr
 80044ec:	7019      	strb	r1, [r3, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	e7f9      	b.n	80044e6 <memset+0x4>
	...

080044f4 <siprintf>:
 80044f4:	b40e      	push	{r1, r2, r3}
 80044f6:	b500      	push	{lr}
 80044f8:	490b      	ldr	r1, [pc, #44]	; (8004528 <siprintf+0x34>)
 80044fa:	b09c      	sub	sp, #112	; 0x70
 80044fc:	ab1d      	add	r3, sp, #116	; 0x74
 80044fe:	9002      	str	r0, [sp, #8]
 8004500:	9006      	str	r0, [sp, #24]
 8004502:	9107      	str	r1, [sp, #28]
 8004504:	9104      	str	r1, [sp, #16]
 8004506:	4809      	ldr	r0, [pc, #36]	; (800452c <siprintf+0x38>)
 8004508:	4909      	ldr	r1, [pc, #36]	; (8004530 <siprintf+0x3c>)
 800450a:	cb04      	ldmia	r3!, {r2}
 800450c:	9105      	str	r1, [sp, #20]
 800450e:	6800      	ldr	r0, [r0, #0]
 8004510:	a902      	add	r1, sp, #8
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	f000 f882 	bl	800461c <_svfiprintf_r>
 8004518:	2300      	movs	r3, #0
 800451a:	9a02      	ldr	r2, [sp, #8]
 800451c:	7013      	strb	r3, [r2, #0]
 800451e:	b01c      	add	sp, #112	; 0x70
 8004520:	bc08      	pop	{r3}
 8004522:	b003      	add	sp, #12
 8004524:	4718      	bx	r3
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	7fffffff 	.word	0x7fffffff
 800452c:	20000014 	.word	0x20000014
 8004530:	ffff0208 	.word	0xffff0208

08004534 <strncmp>:
 8004534:	b530      	push	{r4, r5, lr}
 8004536:	0005      	movs	r5, r0
 8004538:	1e10      	subs	r0, r2, #0
 800453a:	d008      	beq.n	800454e <strncmp+0x1a>
 800453c:	2400      	movs	r4, #0
 800453e:	3a01      	subs	r2, #1
 8004540:	5d2b      	ldrb	r3, [r5, r4]
 8004542:	5d08      	ldrb	r0, [r1, r4]
 8004544:	4283      	cmp	r3, r0
 8004546:	d101      	bne.n	800454c <strncmp+0x18>
 8004548:	4294      	cmp	r4, r2
 800454a:	d101      	bne.n	8004550 <strncmp+0x1c>
 800454c:	1a18      	subs	r0, r3, r0
 800454e:	bd30      	pop	{r4, r5, pc}
 8004550:	3401      	adds	r4, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f4      	bne.n	8004540 <strncmp+0xc>
 8004556:	e7f9      	b.n	800454c <strncmp+0x18>

08004558 <__ssputs_r>:
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	688e      	ldr	r6, [r1, #8]
 800455c:	b085      	sub	sp, #20
 800455e:	0007      	movs	r7, r0
 8004560:	000c      	movs	r4, r1
 8004562:	9203      	str	r2, [sp, #12]
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	429e      	cmp	r6, r3
 8004568:	d83c      	bhi.n	80045e4 <__ssputs_r+0x8c>
 800456a:	2390      	movs	r3, #144	; 0x90
 800456c:	898a      	ldrh	r2, [r1, #12]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	421a      	tst	r2, r3
 8004572:	d034      	beq.n	80045de <__ssputs_r+0x86>
 8004574:	6909      	ldr	r1, [r1, #16]
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	6960      	ldr	r0, [r4, #20]
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	9302      	str	r3, [sp, #8]
 800457e:	2303      	movs	r3, #3
 8004580:	4343      	muls	r3, r0
 8004582:	0fdd      	lsrs	r5, r3, #31
 8004584:	18ed      	adds	r5, r5, r3
 8004586:	9b01      	ldr	r3, [sp, #4]
 8004588:	9802      	ldr	r0, [sp, #8]
 800458a:	3301      	adds	r3, #1
 800458c:	181b      	adds	r3, r3, r0
 800458e:	106d      	asrs	r5, r5, #1
 8004590:	42ab      	cmp	r3, r5
 8004592:	d900      	bls.n	8004596 <__ssputs_r+0x3e>
 8004594:	001d      	movs	r5, r3
 8004596:	0553      	lsls	r3, r2, #21
 8004598:	d532      	bpl.n	8004600 <__ssputs_r+0xa8>
 800459a:	0029      	movs	r1, r5
 800459c:	0038      	movs	r0, r7
 800459e:	f000 fb49 	bl	8004c34 <_malloc_r>
 80045a2:	1e06      	subs	r6, r0, #0
 80045a4:	d109      	bne.n	80045ba <__ssputs_r+0x62>
 80045a6:	230c      	movs	r3, #12
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	2340      	movs	r3, #64	; 0x40
 80045ac:	2001      	movs	r0, #1
 80045ae:	89a2      	ldrh	r2, [r4, #12]
 80045b0:	4240      	negs	r0, r0
 80045b2:	4313      	orrs	r3, r2
 80045b4:	81a3      	strh	r3, [r4, #12]
 80045b6:	b005      	add	sp, #20
 80045b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ba:	9a02      	ldr	r2, [sp, #8]
 80045bc:	6921      	ldr	r1, [r4, #16]
 80045be:	f7ff ff87 	bl	80044d0 <memcpy>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <__ssputs_r+0xc0>)
 80045c6:	401a      	ands	r2, r3
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	4313      	orrs	r3, r2
 80045cc:	81a3      	strh	r3, [r4, #12]
 80045ce:	9b02      	ldr	r3, [sp, #8]
 80045d0:	6126      	str	r6, [r4, #16]
 80045d2:	18f6      	adds	r6, r6, r3
 80045d4:	6026      	str	r6, [r4, #0]
 80045d6:	6165      	str	r5, [r4, #20]
 80045d8:	9e01      	ldr	r6, [sp, #4]
 80045da:	1aed      	subs	r5, r5, r3
 80045dc:	60a5      	str	r5, [r4, #8]
 80045de:	9b01      	ldr	r3, [sp, #4]
 80045e0:	429e      	cmp	r6, r3
 80045e2:	d900      	bls.n	80045e6 <__ssputs_r+0x8e>
 80045e4:	9e01      	ldr	r6, [sp, #4]
 80045e6:	0032      	movs	r2, r6
 80045e8:	9903      	ldr	r1, [sp, #12]
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	f000 faa3 	bl	8004b36 <memmove>
 80045f0:	68a3      	ldr	r3, [r4, #8]
 80045f2:	2000      	movs	r0, #0
 80045f4:	1b9b      	subs	r3, r3, r6
 80045f6:	60a3      	str	r3, [r4, #8]
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	199e      	adds	r6, r3, r6
 80045fc:	6026      	str	r6, [r4, #0]
 80045fe:	e7da      	b.n	80045b6 <__ssputs_r+0x5e>
 8004600:	002a      	movs	r2, r5
 8004602:	0038      	movs	r0, r7
 8004604:	f000 fb8c 	bl	8004d20 <_realloc_r>
 8004608:	1e06      	subs	r6, r0, #0
 800460a:	d1e0      	bne.n	80045ce <__ssputs_r+0x76>
 800460c:	0038      	movs	r0, r7
 800460e:	6921      	ldr	r1, [r4, #16]
 8004610:	f000 faa4 	bl	8004b5c <_free_r>
 8004614:	e7c7      	b.n	80045a6 <__ssputs_r+0x4e>
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	fffffb7f 	.word	0xfffffb7f

0800461c <_svfiprintf_r>:
 800461c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800461e:	b0a1      	sub	sp, #132	; 0x84
 8004620:	9003      	str	r0, [sp, #12]
 8004622:	001d      	movs	r5, r3
 8004624:	898b      	ldrh	r3, [r1, #12]
 8004626:	000f      	movs	r7, r1
 8004628:	0016      	movs	r6, r2
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	d511      	bpl.n	8004652 <_svfiprintf_r+0x36>
 800462e:	690b      	ldr	r3, [r1, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10e      	bne.n	8004652 <_svfiprintf_r+0x36>
 8004634:	2140      	movs	r1, #64	; 0x40
 8004636:	f000 fafd 	bl	8004c34 <_malloc_r>
 800463a:	6038      	str	r0, [r7, #0]
 800463c:	6138      	str	r0, [r7, #16]
 800463e:	2800      	cmp	r0, #0
 8004640:	d105      	bne.n	800464e <_svfiprintf_r+0x32>
 8004642:	230c      	movs	r3, #12
 8004644:	9a03      	ldr	r2, [sp, #12]
 8004646:	3801      	subs	r0, #1
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	b021      	add	sp, #132	; 0x84
 800464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464e:	2340      	movs	r3, #64	; 0x40
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	2300      	movs	r3, #0
 8004654:	ac08      	add	r4, sp, #32
 8004656:	6163      	str	r3, [r4, #20]
 8004658:	3320      	adds	r3, #32
 800465a:	7663      	strb	r3, [r4, #25]
 800465c:	3310      	adds	r3, #16
 800465e:	76a3      	strb	r3, [r4, #26]
 8004660:	9507      	str	r5, [sp, #28]
 8004662:	0035      	movs	r5, r6
 8004664:	782b      	ldrb	r3, [r5, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <_svfiprintf_r+0x52>
 800466a:	2b25      	cmp	r3, #37	; 0x25
 800466c:	d147      	bne.n	80046fe <_svfiprintf_r+0xe2>
 800466e:	1bab      	subs	r3, r5, r6
 8004670:	9305      	str	r3, [sp, #20]
 8004672:	42b5      	cmp	r5, r6
 8004674:	d00c      	beq.n	8004690 <_svfiprintf_r+0x74>
 8004676:	0032      	movs	r2, r6
 8004678:	0039      	movs	r1, r7
 800467a:	9803      	ldr	r0, [sp, #12]
 800467c:	f7ff ff6c 	bl	8004558 <__ssputs_r>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d100      	bne.n	8004686 <_svfiprintf_r+0x6a>
 8004684:	e0ae      	b.n	80047e4 <_svfiprintf_r+0x1c8>
 8004686:	6962      	ldr	r2, [r4, #20]
 8004688:	9b05      	ldr	r3, [sp, #20]
 800468a:	4694      	mov	ip, r2
 800468c:	4463      	add	r3, ip
 800468e:	6163      	str	r3, [r4, #20]
 8004690:	782b      	ldrb	r3, [r5, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d100      	bne.n	8004698 <_svfiprintf_r+0x7c>
 8004696:	e0a5      	b.n	80047e4 <_svfiprintf_r+0x1c8>
 8004698:	2201      	movs	r2, #1
 800469a:	2300      	movs	r3, #0
 800469c:	4252      	negs	r2, r2
 800469e:	6062      	str	r2, [r4, #4]
 80046a0:	a904      	add	r1, sp, #16
 80046a2:	3254      	adds	r2, #84	; 0x54
 80046a4:	1852      	adds	r2, r2, r1
 80046a6:	1c6e      	adds	r6, r5, #1
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	60e3      	str	r3, [r4, #12]
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	7013      	strb	r3, [r2, #0]
 80046b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80046b2:	2205      	movs	r2, #5
 80046b4:	7831      	ldrb	r1, [r6, #0]
 80046b6:	4854      	ldr	r0, [pc, #336]	; (8004808 <_svfiprintf_r+0x1ec>)
 80046b8:	f000 fa32 	bl	8004b20 <memchr>
 80046bc:	1c75      	adds	r5, r6, #1
 80046be:	2800      	cmp	r0, #0
 80046c0:	d11f      	bne.n	8004702 <_svfiprintf_r+0xe6>
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	06d3      	lsls	r3, r2, #27
 80046c6:	d504      	bpl.n	80046d2 <_svfiprintf_r+0xb6>
 80046c8:	2353      	movs	r3, #83	; 0x53
 80046ca:	a904      	add	r1, sp, #16
 80046cc:	185b      	adds	r3, r3, r1
 80046ce:	2120      	movs	r1, #32
 80046d0:	7019      	strb	r1, [r3, #0]
 80046d2:	0713      	lsls	r3, r2, #28
 80046d4:	d504      	bpl.n	80046e0 <_svfiprintf_r+0xc4>
 80046d6:	2353      	movs	r3, #83	; 0x53
 80046d8:	a904      	add	r1, sp, #16
 80046da:	185b      	adds	r3, r3, r1
 80046dc:	212b      	movs	r1, #43	; 0x2b
 80046de:	7019      	strb	r1, [r3, #0]
 80046e0:	7833      	ldrb	r3, [r6, #0]
 80046e2:	2b2a      	cmp	r3, #42	; 0x2a
 80046e4:	d016      	beq.n	8004714 <_svfiprintf_r+0xf8>
 80046e6:	0035      	movs	r5, r6
 80046e8:	2100      	movs	r1, #0
 80046ea:	200a      	movs	r0, #10
 80046ec:	68e3      	ldr	r3, [r4, #12]
 80046ee:	782a      	ldrb	r2, [r5, #0]
 80046f0:	1c6e      	adds	r6, r5, #1
 80046f2:	3a30      	subs	r2, #48	; 0x30
 80046f4:	2a09      	cmp	r2, #9
 80046f6:	d94e      	bls.n	8004796 <_svfiprintf_r+0x17a>
 80046f8:	2900      	cmp	r1, #0
 80046fa:	d111      	bne.n	8004720 <_svfiprintf_r+0x104>
 80046fc:	e017      	b.n	800472e <_svfiprintf_r+0x112>
 80046fe:	3501      	adds	r5, #1
 8004700:	e7b0      	b.n	8004664 <_svfiprintf_r+0x48>
 8004702:	4b41      	ldr	r3, [pc, #260]	; (8004808 <_svfiprintf_r+0x1ec>)
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	1ac0      	subs	r0, r0, r3
 8004708:	2301      	movs	r3, #1
 800470a:	4083      	lsls	r3, r0
 800470c:	4313      	orrs	r3, r2
 800470e:	002e      	movs	r6, r5
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	e7ce      	b.n	80046b2 <_svfiprintf_r+0x96>
 8004714:	9b07      	ldr	r3, [sp, #28]
 8004716:	1d19      	adds	r1, r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	9107      	str	r1, [sp, #28]
 800471c:	2b00      	cmp	r3, #0
 800471e:	db01      	blt.n	8004724 <_svfiprintf_r+0x108>
 8004720:	930b      	str	r3, [sp, #44]	; 0x2c
 8004722:	e004      	b.n	800472e <_svfiprintf_r+0x112>
 8004724:	425b      	negs	r3, r3
 8004726:	60e3      	str	r3, [r4, #12]
 8004728:	2302      	movs	r3, #2
 800472a:	4313      	orrs	r3, r2
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	782b      	ldrb	r3, [r5, #0]
 8004730:	2b2e      	cmp	r3, #46	; 0x2e
 8004732:	d10a      	bne.n	800474a <_svfiprintf_r+0x12e>
 8004734:	786b      	ldrb	r3, [r5, #1]
 8004736:	2b2a      	cmp	r3, #42	; 0x2a
 8004738:	d135      	bne.n	80047a6 <_svfiprintf_r+0x18a>
 800473a:	9b07      	ldr	r3, [sp, #28]
 800473c:	3502      	adds	r5, #2
 800473e:	1d1a      	adds	r2, r3, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	9207      	str	r2, [sp, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	db2b      	blt.n	80047a0 <_svfiprintf_r+0x184>
 8004748:	9309      	str	r3, [sp, #36]	; 0x24
 800474a:	4e30      	ldr	r6, [pc, #192]	; (800480c <_svfiprintf_r+0x1f0>)
 800474c:	2203      	movs	r2, #3
 800474e:	0030      	movs	r0, r6
 8004750:	7829      	ldrb	r1, [r5, #0]
 8004752:	f000 f9e5 	bl	8004b20 <memchr>
 8004756:	2800      	cmp	r0, #0
 8004758:	d006      	beq.n	8004768 <_svfiprintf_r+0x14c>
 800475a:	2340      	movs	r3, #64	; 0x40
 800475c:	1b80      	subs	r0, r0, r6
 800475e:	4083      	lsls	r3, r0
 8004760:	6822      	ldr	r2, [r4, #0]
 8004762:	3501      	adds	r5, #1
 8004764:	4313      	orrs	r3, r2
 8004766:	6023      	str	r3, [r4, #0]
 8004768:	7829      	ldrb	r1, [r5, #0]
 800476a:	2206      	movs	r2, #6
 800476c:	4828      	ldr	r0, [pc, #160]	; (8004810 <_svfiprintf_r+0x1f4>)
 800476e:	1c6e      	adds	r6, r5, #1
 8004770:	7621      	strb	r1, [r4, #24]
 8004772:	f000 f9d5 	bl	8004b20 <memchr>
 8004776:	2800      	cmp	r0, #0
 8004778:	d03c      	beq.n	80047f4 <_svfiprintf_r+0x1d8>
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <_svfiprintf_r+0x1f8>)
 800477c:	2b00      	cmp	r3, #0
 800477e:	d125      	bne.n	80047cc <_svfiprintf_r+0x1b0>
 8004780:	2207      	movs	r2, #7
 8004782:	9b07      	ldr	r3, [sp, #28]
 8004784:	3307      	adds	r3, #7
 8004786:	4393      	bics	r3, r2
 8004788:	3308      	adds	r3, #8
 800478a:	9307      	str	r3, [sp, #28]
 800478c:	6963      	ldr	r3, [r4, #20]
 800478e:	9a04      	ldr	r2, [sp, #16]
 8004790:	189b      	adds	r3, r3, r2
 8004792:	6163      	str	r3, [r4, #20]
 8004794:	e765      	b.n	8004662 <_svfiprintf_r+0x46>
 8004796:	4343      	muls	r3, r0
 8004798:	0035      	movs	r5, r6
 800479a:	2101      	movs	r1, #1
 800479c:	189b      	adds	r3, r3, r2
 800479e:	e7a6      	b.n	80046ee <_svfiprintf_r+0xd2>
 80047a0:	2301      	movs	r3, #1
 80047a2:	425b      	negs	r3, r3
 80047a4:	e7d0      	b.n	8004748 <_svfiprintf_r+0x12c>
 80047a6:	2300      	movs	r3, #0
 80047a8:	200a      	movs	r0, #10
 80047aa:	001a      	movs	r2, r3
 80047ac:	3501      	adds	r5, #1
 80047ae:	6063      	str	r3, [r4, #4]
 80047b0:	7829      	ldrb	r1, [r5, #0]
 80047b2:	1c6e      	adds	r6, r5, #1
 80047b4:	3930      	subs	r1, #48	; 0x30
 80047b6:	2909      	cmp	r1, #9
 80047b8:	d903      	bls.n	80047c2 <_svfiprintf_r+0x1a6>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0c5      	beq.n	800474a <_svfiprintf_r+0x12e>
 80047be:	9209      	str	r2, [sp, #36]	; 0x24
 80047c0:	e7c3      	b.n	800474a <_svfiprintf_r+0x12e>
 80047c2:	4342      	muls	r2, r0
 80047c4:	0035      	movs	r5, r6
 80047c6:	2301      	movs	r3, #1
 80047c8:	1852      	adds	r2, r2, r1
 80047ca:	e7f1      	b.n	80047b0 <_svfiprintf_r+0x194>
 80047cc:	ab07      	add	r3, sp, #28
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	003a      	movs	r2, r7
 80047d2:	0021      	movs	r1, r4
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <_svfiprintf_r+0x1fc>)
 80047d6:	9803      	ldr	r0, [sp, #12]
 80047d8:	e000      	b.n	80047dc <_svfiprintf_r+0x1c0>
 80047da:	bf00      	nop
 80047dc:	9004      	str	r0, [sp, #16]
 80047de:	9b04      	ldr	r3, [sp, #16]
 80047e0:	3301      	adds	r3, #1
 80047e2:	d1d3      	bne.n	800478c <_svfiprintf_r+0x170>
 80047e4:	89bb      	ldrh	r3, [r7, #12]
 80047e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80047e8:	065b      	lsls	r3, r3, #25
 80047ea:	d400      	bmi.n	80047ee <_svfiprintf_r+0x1d2>
 80047ec:	e72d      	b.n	800464a <_svfiprintf_r+0x2e>
 80047ee:	2001      	movs	r0, #1
 80047f0:	4240      	negs	r0, r0
 80047f2:	e72a      	b.n	800464a <_svfiprintf_r+0x2e>
 80047f4:	ab07      	add	r3, sp, #28
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	003a      	movs	r2, r7
 80047fa:	0021      	movs	r1, r4
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <_svfiprintf_r+0x1fc>)
 80047fe:	9803      	ldr	r0, [sp, #12]
 8004800:	f000 f87c 	bl	80048fc <_printf_i>
 8004804:	e7ea      	b.n	80047dc <_svfiprintf_r+0x1c0>
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	08004f54 	.word	0x08004f54
 800480c:	08004f5a 	.word	0x08004f5a
 8004810:	08004f5e 	.word	0x08004f5e
 8004814:	00000000 	.word	0x00000000
 8004818:	08004559 	.word	0x08004559

0800481c <_printf_common>:
 800481c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800481e:	0015      	movs	r5, r2
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	688a      	ldr	r2, [r1, #8]
 8004824:	690b      	ldr	r3, [r1, #16]
 8004826:	000c      	movs	r4, r1
 8004828:	9000      	str	r0, [sp, #0]
 800482a:	4293      	cmp	r3, r2
 800482c:	da00      	bge.n	8004830 <_printf_common+0x14>
 800482e:	0013      	movs	r3, r2
 8004830:	0022      	movs	r2, r4
 8004832:	602b      	str	r3, [r5, #0]
 8004834:	3243      	adds	r2, #67	; 0x43
 8004836:	7812      	ldrb	r2, [r2, #0]
 8004838:	2a00      	cmp	r2, #0
 800483a:	d001      	beq.n	8004840 <_printf_common+0x24>
 800483c:	3301      	adds	r3, #1
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	069b      	lsls	r3, r3, #26
 8004844:	d502      	bpl.n	800484c <_printf_common+0x30>
 8004846:	682b      	ldr	r3, [r5, #0]
 8004848:	3302      	adds	r3, #2
 800484a:	602b      	str	r3, [r5, #0]
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	2306      	movs	r3, #6
 8004850:	0017      	movs	r7, r2
 8004852:	401f      	ands	r7, r3
 8004854:	421a      	tst	r2, r3
 8004856:	d027      	beq.n	80048a8 <_printf_common+0x8c>
 8004858:	0023      	movs	r3, r4
 800485a:	3343      	adds	r3, #67	; 0x43
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	4193      	sbcs	r3, r2
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	0692      	lsls	r2, r2, #26
 8004866:	d430      	bmi.n	80048ca <_printf_common+0xae>
 8004868:	0022      	movs	r2, r4
 800486a:	9901      	ldr	r1, [sp, #4]
 800486c:	9800      	ldr	r0, [sp, #0]
 800486e:	9e08      	ldr	r6, [sp, #32]
 8004870:	3243      	adds	r2, #67	; 0x43
 8004872:	47b0      	blx	r6
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d025      	beq.n	80048c4 <_printf_common+0xa8>
 8004878:	2306      	movs	r3, #6
 800487a:	6820      	ldr	r0, [r4, #0]
 800487c:	682a      	ldr	r2, [r5, #0]
 800487e:	68e1      	ldr	r1, [r4, #12]
 8004880:	2500      	movs	r5, #0
 8004882:	4003      	ands	r3, r0
 8004884:	2b04      	cmp	r3, #4
 8004886:	d103      	bne.n	8004890 <_printf_common+0x74>
 8004888:	1a8d      	subs	r5, r1, r2
 800488a:	43eb      	mvns	r3, r5
 800488c:	17db      	asrs	r3, r3, #31
 800488e:	401d      	ands	r5, r3
 8004890:	68a3      	ldr	r3, [r4, #8]
 8004892:	6922      	ldr	r2, [r4, #16]
 8004894:	4293      	cmp	r3, r2
 8004896:	dd01      	ble.n	800489c <_printf_common+0x80>
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	18ed      	adds	r5, r5, r3
 800489c:	2700      	movs	r7, #0
 800489e:	42bd      	cmp	r5, r7
 80048a0:	d120      	bne.n	80048e4 <_printf_common+0xc8>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e010      	b.n	80048c8 <_printf_common+0xac>
 80048a6:	3701      	adds	r7, #1
 80048a8:	68e3      	ldr	r3, [r4, #12]
 80048aa:	682a      	ldr	r2, [r5, #0]
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	42bb      	cmp	r3, r7
 80048b0:	ddd2      	ble.n	8004858 <_printf_common+0x3c>
 80048b2:	0022      	movs	r2, r4
 80048b4:	2301      	movs	r3, #1
 80048b6:	9901      	ldr	r1, [sp, #4]
 80048b8:	9800      	ldr	r0, [sp, #0]
 80048ba:	9e08      	ldr	r6, [sp, #32]
 80048bc:	3219      	adds	r2, #25
 80048be:	47b0      	blx	r6
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d1f0      	bne.n	80048a6 <_printf_common+0x8a>
 80048c4:	2001      	movs	r0, #1
 80048c6:	4240      	negs	r0, r0
 80048c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048ca:	2030      	movs	r0, #48	; 0x30
 80048cc:	18e1      	adds	r1, r4, r3
 80048ce:	3143      	adds	r1, #67	; 0x43
 80048d0:	7008      	strb	r0, [r1, #0]
 80048d2:	0021      	movs	r1, r4
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	3145      	adds	r1, #69	; 0x45
 80048d8:	7809      	ldrb	r1, [r1, #0]
 80048da:	18a2      	adds	r2, r4, r2
 80048dc:	3243      	adds	r2, #67	; 0x43
 80048de:	3302      	adds	r3, #2
 80048e0:	7011      	strb	r1, [r2, #0]
 80048e2:	e7c1      	b.n	8004868 <_printf_common+0x4c>
 80048e4:	0022      	movs	r2, r4
 80048e6:	2301      	movs	r3, #1
 80048e8:	9901      	ldr	r1, [sp, #4]
 80048ea:	9800      	ldr	r0, [sp, #0]
 80048ec:	9e08      	ldr	r6, [sp, #32]
 80048ee:	321a      	adds	r2, #26
 80048f0:	47b0      	blx	r6
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	d0e6      	beq.n	80048c4 <_printf_common+0xa8>
 80048f6:	3701      	adds	r7, #1
 80048f8:	e7d1      	b.n	800489e <_printf_common+0x82>
	...

080048fc <_printf_i>:
 80048fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048fe:	b08b      	sub	sp, #44	; 0x2c
 8004900:	9206      	str	r2, [sp, #24]
 8004902:	000a      	movs	r2, r1
 8004904:	3243      	adds	r2, #67	; 0x43
 8004906:	9307      	str	r3, [sp, #28]
 8004908:	9005      	str	r0, [sp, #20]
 800490a:	9204      	str	r2, [sp, #16]
 800490c:	7e0a      	ldrb	r2, [r1, #24]
 800490e:	000c      	movs	r4, r1
 8004910:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004912:	2a78      	cmp	r2, #120	; 0x78
 8004914:	d807      	bhi.n	8004926 <_printf_i+0x2a>
 8004916:	2a62      	cmp	r2, #98	; 0x62
 8004918:	d809      	bhi.n	800492e <_printf_i+0x32>
 800491a:	2a00      	cmp	r2, #0
 800491c:	d100      	bne.n	8004920 <_printf_i+0x24>
 800491e:	e0c1      	b.n	8004aa4 <_printf_i+0x1a8>
 8004920:	2a58      	cmp	r2, #88	; 0x58
 8004922:	d100      	bne.n	8004926 <_printf_i+0x2a>
 8004924:	e08c      	b.n	8004a40 <_printf_i+0x144>
 8004926:	0026      	movs	r6, r4
 8004928:	3642      	adds	r6, #66	; 0x42
 800492a:	7032      	strb	r2, [r6, #0]
 800492c:	e022      	b.n	8004974 <_printf_i+0x78>
 800492e:	0010      	movs	r0, r2
 8004930:	3863      	subs	r0, #99	; 0x63
 8004932:	2815      	cmp	r0, #21
 8004934:	d8f7      	bhi.n	8004926 <_printf_i+0x2a>
 8004936:	f7fb fbef 	bl	8000118 <__gnu_thumb1_case_shi>
 800493a:	0016      	.short	0x0016
 800493c:	fff6001f 	.word	0xfff6001f
 8004940:	fff6fff6 	.word	0xfff6fff6
 8004944:	001ffff6 	.word	0x001ffff6
 8004948:	fff6fff6 	.word	0xfff6fff6
 800494c:	fff6fff6 	.word	0xfff6fff6
 8004950:	003600a8 	.word	0x003600a8
 8004954:	fff6009a 	.word	0xfff6009a
 8004958:	00b9fff6 	.word	0x00b9fff6
 800495c:	0036fff6 	.word	0x0036fff6
 8004960:	fff6fff6 	.word	0xfff6fff6
 8004964:	009e      	.short	0x009e
 8004966:	0026      	movs	r6, r4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	3642      	adds	r6, #66	; 0x42
 800496c:	1d11      	adds	r1, r2, #4
 800496e:	6019      	str	r1, [r3, #0]
 8004970:	6813      	ldr	r3, [r2, #0]
 8004972:	7033      	strb	r3, [r6, #0]
 8004974:	2301      	movs	r3, #1
 8004976:	e0a7      	b.n	8004ac8 <_printf_i+0x1cc>
 8004978:	6808      	ldr	r0, [r1, #0]
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	1d0a      	adds	r2, r1, #4
 800497e:	0605      	lsls	r5, r0, #24
 8004980:	d50b      	bpl.n	800499a <_printf_i+0x9e>
 8004982:	680d      	ldr	r5, [r1, #0]
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	2d00      	cmp	r5, #0
 8004988:	da03      	bge.n	8004992 <_printf_i+0x96>
 800498a:	232d      	movs	r3, #45	; 0x2d
 800498c:	9a04      	ldr	r2, [sp, #16]
 800498e:	426d      	negs	r5, r5
 8004990:	7013      	strb	r3, [r2, #0]
 8004992:	4b61      	ldr	r3, [pc, #388]	; (8004b18 <_printf_i+0x21c>)
 8004994:	270a      	movs	r7, #10
 8004996:	9303      	str	r3, [sp, #12]
 8004998:	e01b      	b.n	80049d2 <_printf_i+0xd6>
 800499a:	680d      	ldr	r5, [r1, #0]
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	0641      	lsls	r1, r0, #25
 80049a0:	d5f1      	bpl.n	8004986 <_printf_i+0x8a>
 80049a2:	b22d      	sxth	r5, r5
 80049a4:	e7ef      	b.n	8004986 <_printf_i+0x8a>
 80049a6:	680d      	ldr	r5, [r1, #0]
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	1d08      	adds	r0, r1, #4
 80049ac:	6018      	str	r0, [r3, #0]
 80049ae:	062e      	lsls	r6, r5, #24
 80049b0:	d501      	bpl.n	80049b6 <_printf_i+0xba>
 80049b2:	680d      	ldr	r5, [r1, #0]
 80049b4:	e003      	b.n	80049be <_printf_i+0xc2>
 80049b6:	066d      	lsls	r5, r5, #25
 80049b8:	d5fb      	bpl.n	80049b2 <_printf_i+0xb6>
 80049ba:	680d      	ldr	r5, [r1, #0]
 80049bc:	b2ad      	uxth	r5, r5
 80049be:	4b56      	ldr	r3, [pc, #344]	; (8004b18 <_printf_i+0x21c>)
 80049c0:	2708      	movs	r7, #8
 80049c2:	9303      	str	r3, [sp, #12]
 80049c4:	2a6f      	cmp	r2, #111	; 0x6f
 80049c6:	d000      	beq.n	80049ca <_printf_i+0xce>
 80049c8:	3702      	adds	r7, #2
 80049ca:	0023      	movs	r3, r4
 80049cc:	2200      	movs	r2, #0
 80049ce:	3343      	adds	r3, #67	; 0x43
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	60a3      	str	r3, [r4, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db03      	blt.n	80049e2 <_printf_i+0xe6>
 80049da:	2204      	movs	r2, #4
 80049dc:	6821      	ldr	r1, [r4, #0]
 80049de:	4391      	bics	r1, r2
 80049e0:	6021      	str	r1, [r4, #0]
 80049e2:	2d00      	cmp	r5, #0
 80049e4:	d102      	bne.n	80049ec <_printf_i+0xf0>
 80049e6:	9e04      	ldr	r6, [sp, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00c      	beq.n	8004a06 <_printf_i+0x10a>
 80049ec:	9e04      	ldr	r6, [sp, #16]
 80049ee:	0028      	movs	r0, r5
 80049f0:	0039      	movs	r1, r7
 80049f2:	f7fb fc21 	bl	8000238 <__aeabi_uidivmod>
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	3e01      	subs	r6, #1
 80049fa:	5c5b      	ldrb	r3, [r3, r1]
 80049fc:	7033      	strb	r3, [r6, #0]
 80049fe:	002b      	movs	r3, r5
 8004a00:	0005      	movs	r5, r0
 8004a02:	429f      	cmp	r7, r3
 8004a04:	d9f3      	bls.n	80049ee <_printf_i+0xf2>
 8004a06:	2f08      	cmp	r7, #8
 8004a08:	d109      	bne.n	8004a1e <_printf_i+0x122>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	07db      	lsls	r3, r3, #31
 8004a0e:	d506      	bpl.n	8004a1e <_printf_i+0x122>
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	6922      	ldr	r2, [r4, #16]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	dc02      	bgt.n	8004a1e <_printf_i+0x122>
 8004a18:	2330      	movs	r3, #48	; 0x30
 8004a1a:	3e01      	subs	r6, #1
 8004a1c:	7033      	strb	r3, [r6, #0]
 8004a1e:	9b04      	ldr	r3, [sp, #16]
 8004a20:	1b9b      	subs	r3, r3, r6
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	9b07      	ldr	r3, [sp, #28]
 8004a26:	0021      	movs	r1, r4
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	9805      	ldr	r0, [sp, #20]
 8004a2c:	9b06      	ldr	r3, [sp, #24]
 8004a2e:	aa09      	add	r2, sp, #36	; 0x24
 8004a30:	f7ff fef4 	bl	800481c <_printf_common>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d14c      	bne.n	8004ad2 <_printf_i+0x1d6>
 8004a38:	2001      	movs	r0, #1
 8004a3a:	4240      	negs	r0, r0
 8004a3c:	b00b      	add	sp, #44	; 0x2c
 8004a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a40:	3145      	adds	r1, #69	; 0x45
 8004a42:	700a      	strb	r2, [r1, #0]
 8004a44:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <_printf_i+0x21c>)
 8004a46:	9203      	str	r2, [sp, #12]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	6821      	ldr	r1, [r4, #0]
 8004a4c:	ca20      	ldmia	r2!, {r5}
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	0608      	lsls	r0, r1, #24
 8004a52:	d516      	bpl.n	8004a82 <_printf_i+0x186>
 8004a54:	07cb      	lsls	r3, r1, #31
 8004a56:	d502      	bpl.n	8004a5e <_printf_i+0x162>
 8004a58:	2320      	movs	r3, #32
 8004a5a:	4319      	orrs	r1, r3
 8004a5c:	6021      	str	r1, [r4, #0]
 8004a5e:	2710      	movs	r7, #16
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	d1b2      	bne.n	80049ca <_printf_i+0xce>
 8004a64:	2320      	movs	r3, #32
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	439a      	bics	r2, r3
 8004a6a:	6022      	str	r2, [r4, #0]
 8004a6c:	e7ad      	b.n	80049ca <_printf_i+0xce>
 8004a6e:	2220      	movs	r2, #32
 8004a70:	6809      	ldr	r1, [r1, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	6022      	str	r2, [r4, #0]
 8004a76:	0022      	movs	r2, r4
 8004a78:	2178      	movs	r1, #120	; 0x78
 8004a7a:	3245      	adds	r2, #69	; 0x45
 8004a7c:	7011      	strb	r1, [r2, #0]
 8004a7e:	4a27      	ldr	r2, [pc, #156]	; (8004b1c <_printf_i+0x220>)
 8004a80:	e7e1      	b.n	8004a46 <_printf_i+0x14a>
 8004a82:	0648      	lsls	r0, r1, #25
 8004a84:	d5e6      	bpl.n	8004a54 <_printf_i+0x158>
 8004a86:	b2ad      	uxth	r5, r5
 8004a88:	e7e4      	b.n	8004a54 <_printf_i+0x158>
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	680d      	ldr	r5, [r1, #0]
 8004a8e:	1d10      	adds	r0, r2, #4
 8004a90:	6949      	ldr	r1, [r1, #20]
 8004a92:	6018      	str	r0, [r3, #0]
 8004a94:	6813      	ldr	r3, [r2, #0]
 8004a96:	062e      	lsls	r6, r5, #24
 8004a98:	d501      	bpl.n	8004a9e <_printf_i+0x1a2>
 8004a9a:	6019      	str	r1, [r3, #0]
 8004a9c:	e002      	b.n	8004aa4 <_printf_i+0x1a8>
 8004a9e:	066d      	lsls	r5, r5, #25
 8004aa0:	d5fb      	bpl.n	8004a9a <_printf_i+0x19e>
 8004aa2:	8019      	strh	r1, [r3, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	9e04      	ldr	r6, [sp, #16]
 8004aa8:	6123      	str	r3, [r4, #16]
 8004aaa:	e7bb      	b.n	8004a24 <_printf_i+0x128>
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	1d11      	adds	r1, r2, #4
 8004ab0:	6019      	str	r1, [r3, #0]
 8004ab2:	6816      	ldr	r6, [r2, #0]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	0030      	movs	r0, r6
 8004ab8:	6862      	ldr	r2, [r4, #4]
 8004aba:	f000 f831 	bl	8004b20 <memchr>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d001      	beq.n	8004ac6 <_printf_i+0x1ca>
 8004ac2:	1b80      	subs	r0, r0, r6
 8004ac4:	6060      	str	r0, [r4, #4]
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	6123      	str	r3, [r4, #16]
 8004aca:	2300      	movs	r3, #0
 8004acc:	9a04      	ldr	r2, [sp, #16]
 8004ace:	7013      	strb	r3, [r2, #0]
 8004ad0:	e7a8      	b.n	8004a24 <_printf_i+0x128>
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	0032      	movs	r2, r6
 8004ad6:	9906      	ldr	r1, [sp, #24]
 8004ad8:	9805      	ldr	r0, [sp, #20]
 8004ada:	9d07      	ldr	r5, [sp, #28]
 8004adc:	47a8      	blx	r5
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d0aa      	beq.n	8004a38 <_printf_i+0x13c>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	079b      	lsls	r3, r3, #30
 8004ae6:	d415      	bmi.n	8004b14 <_printf_i+0x218>
 8004ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aea:	68e0      	ldr	r0, [r4, #12]
 8004aec:	4298      	cmp	r0, r3
 8004aee:	daa5      	bge.n	8004a3c <_printf_i+0x140>
 8004af0:	0018      	movs	r0, r3
 8004af2:	e7a3      	b.n	8004a3c <_printf_i+0x140>
 8004af4:	0022      	movs	r2, r4
 8004af6:	2301      	movs	r3, #1
 8004af8:	9906      	ldr	r1, [sp, #24]
 8004afa:	9805      	ldr	r0, [sp, #20]
 8004afc:	9e07      	ldr	r6, [sp, #28]
 8004afe:	3219      	adds	r2, #25
 8004b00:	47b0      	blx	r6
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	d098      	beq.n	8004a38 <_printf_i+0x13c>
 8004b06:	3501      	adds	r5, #1
 8004b08:	68e3      	ldr	r3, [r4, #12]
 8004b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	42ab      	cmp	r3, r5
 8004b10:	dcf0      	bgt.n	8004af4 <_printf_i+0x1f8>
 8004b12:	e7e9      	b.n	8004ae8 <_printf_i+0x1ec>
 8004b14:	2500      	movs	r5, #0
 8004b16:	e7f7      	b.n	8004b08 <_printf_i+0x20c>
 8004b18:	08004f65 	.word	0x08004f65
 8004b1c:	08004f76 	.word	0x08004f76

08004b20 <memchr>:
 8004b20:	b2c9      	uxtb	r1, r1
 8004b22:	1882      	adds	r2, r0, r2
 8004b24:	4290      	cmp	r0, r2
 8004b26:	d101      	bne.n	8004b2c <memchr+0xc>
 8004b28:	2000      	movs	r0, #0
 8004b2a:	4770      	bx	lr
 8004b2c:	7803      	ldrb	r3, [r0, #0]
 8004b2e:	428b      	cmp	r3, r1
 8004b30:	d0fb      	beq.n	8004b2a <memchr+0xa>
 8004b32:	3001      	adds	r0, #1
 8004b34:	e7f6      	b.n	8004b24 <memchr+0x4>

08004b36 <memmove>:
 8004b36:	b510      	push	{r4, lr}
 8004b38:	4288      	cmp	r0, r1
 8004b3a:	d902      	bls.n	8004b42 <memmove+0xc>
 8004b3c:	188b      	adds	r3, r1, r2
 8004b3e:	4298      	cmp	r0, r3
 8004b40:	d303      	bcc.n	8004b4a <memmove+0x14>
 8004b42:	2300      	movs	r3, #0
 8004b44:	e007      	b.n	8004b56 <memmove+0x20>
 8004b46:	5c8b      	ldrb	r3, [r1, r2]
 8004b48:	5483      	strb	r3, [r0, r2]
 8004b4a:	3a01      	subs	r2, #1
 8004b4c:	d2fb      	bcs.n	8004b46 <memmove+0x10>
 8004b4e:	bd10      	pop	{r4, pc}
 8004b50:	5ccc      	ldrb	r4, [r1, r3]
 8004b52:	54c4      	strb	r4, [r0, r3]
 8004b54:	3301      	adds	r3, #1
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d1fa      	bne.n	8004b50 <memmove+0x1a>
 8004b5a:	e7f8      	b.n	8004b4e <memmove+0x18>

08004b5c <_free_r>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	0005      	movs	r5, r0
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d010      	beq.n	8004b86 <_free_r+0x2a>
 8004b64:	1f0c      	subs	r4, r1, #4
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da00      	bge.n	8004b6e <_free_r+0x12>
 8004b6c:	18e4      	adds	r4, r4, r3
 8004b6e:	0028      	movs	r0, r5
 8004b70:	f000 f918 	bl	8004da4 <__malloc_lock>
 8004b74:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <_free_r+0x90>)
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <_free_r+0x2c>
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	6014      	str	r4, [r2, #0]
 8004b80:	0028      	movs	r0, r5
 8004b82:	f000 f917 	bl	8004db4 <__malloc_unlock>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	42a3      	cmp	r3, r4
 8004b8a:	d908      	bls.n	8004b9e <_free_r+0x42>
 8004b8c:	6821      	ldr	r1, [r4, #0]
 8004b8e:	1860      	adds	r0, r4, r1
 8004b90:	4283      	cmp	r3, r0
 8004b92:	d1f3      	bne.n	8004b7c <_free_r+0x20>
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	1841      	adds	r1, r0, r1
 8004b9a:	6021      	str	r1, [r4, #0]
 8004b9c:	e7ee      	b.n	8004b7c <_free_r+0x20>
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <_free_r+0x4e>
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	d9f9      	bls.n	8004b9e <_free_r+0x42>
 8004baa:	6811      	ldr	r1, [r2, #0]
 8004bac:	1850      	adds	r0, r2, r1
 8004bae:	42a0      	cmp	r0, r4
 8004bb0:	d10b      	bne.n	8004bca <_free_r+0x6e>
 8004bb2:	6820      	ldr	r0, [r4, #0]
 8004bb4:	1809      	adds	r1, r1, r0
 8004bb6:	1850      	adds	r0, r2, r1
 8004bb8:	6011      	str	r1, [r2, #0]
 8004bba:	4283      	cmp	r3, r0
 8004bbc:	d1e0      	bne.n	8004b80 <_free_r+0x24>
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	1841      	adds	r1, r0, r1
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	6053      	str	r3, [r2, #4]
 8004bc8:	e7da      	b.n	8004b80 <_free_r+0x24>
 8004bca:	42a0      	cmp	r0, r4
 8004bcc:	d902      	bls.n	8004bd4 <_free_r+0x78>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	602b      	str	r3, [r5, #0]
 8004bd2:	e7d5      	b.n	8004b80 <_free_r+0x24>
 8004bd4:	6821      	ldr	r1, [r4, #0]
 8004bd6:	1860      	adds	r0, r4, r1
 8004bd8:	4283      	cmp	r3, r0
 8004bda:	d103      	bne.n	8004be4 <_free_r+0x88>
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	1841      	adds	r1, r0, r1
 8004be2:	6021      	str	r1, [r4, #0]
 8004be4:	6063      	str	r3, [r4, #4]
 8004be6:	6054      	str	r4, [r2, #4]
 8004be8:	e7ca      	b.n	8004b80 <_free_r+0x24>
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	2000027c 	.word	0x2000027c

08004bf0 <sbrk_aligned>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4e0f      	ldr	r6, [pc, #60]	; (8004c30 <sbrk_aligned+0x40>)
 8004bf4:	000d      	movs	r5, r1
 8004bf6:	6831      	ldr	r1, [r6, #0]
 8004bf8:	0004      	movs	r4, r0
 8004bfa:	2900      	cmp	r1, #0
 8004bfc:	d102      	bne.n	8004c04 <sbrk_aligned+0x14>
 8004bfe:	f000 f8bf 	bl	8004d80 <_sbrk_r>
 8004c02:	6030      	str	r0, [r6, #0]
 8004c04:	0029      	movs	r1, r5
 8004c06:	0020      	movs	r0, r4
 8004c08:	f000 f8ba 	bl	8004d80 <_sbrk_r>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d00a      	beq.n	8004c26 <sbrk_aligned+0x36>
 8004c10:	2303      	movs	r3, #3
 8004c12:	1cc5      	adds	r5, r0, #3
 8004c14:	439d      	bics	r5, r3
 8004c16:	42a8      	cmp	r0, r5
 8004c18:	d007      	beq.n	8004c2a <sbrk_aligned+0x3a>
 8004c1a:	1a29      	subs	r1, r5, r0
 8004c1c:	0020      	movs	r0, r4
 8004c1e:	f000 f8af 	bl	8004d80 <_sbrk_r>
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	d101      	bne.n	8004c2a <sbrk_aligned+0x3a>
 8004c26:	2501      	movs	r5, #1
 8004c28:	426d      	negs	r5, r5
 8004c2a:	0028      	movs	r0, r5
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	20000280 	.word	0x20000280

08004c34 <_malloc_r>:
 8004c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c36:	2203      	movs	r2, #3
 8004c38:	1ccb      	adds	r3, r1, #3
 8004c3a:	4393      	bics	r3, r2
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	0006      	movs	r6, r0
 8004c40:	001f      	movs	r7, r3
 8004c42:	2b0c      	cmp	r3, #12
 8004c44:	d232      	bcs.n	8004cac <_malloc_r+0x78>
 8004c46:	270c      	movs	r7, #12
 8004c48:	42b9      	cmp	r1, r7
 8004c4a:	d831      	bhi.n	8004cb0 <_malloc_r+0x7c>
 8004c4c:	0030      	movs	r0, r6
 8004c4e:	f000 f8a9 	bl	8004da4 <__malloc_lock>
 8004c52:	4d32      	ldr	r5, [pc, #200]	; (8004d1c <_malloc_r+0xe8>)
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	001c      	movs	r4, r3
 8004c58:	2c00      	cmp	r4, #0
 8004c5a:	d12e      	bne.n	8004cba <_malloc_r+0x86>
 8004c5c:	0039      	movs	r1, r7
 8004c5e:	0030      	movs	r0, r6
 8004c60:	f7ff ffc6 	bl	8004bf0 <sbrk_aligned>
 8004c64:	0004      	movs	r4, r0
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	d11e      	bne.n	8004ca8 <_malloc_r+0x74>
 8004c6a:	682c      	ldr	r4, [r5, #0]
 8004c6c:	0025      	movs	r5, r4
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	d14a      	bne.n	8004d08 <_malloc_r+0xd4>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	0029      	movs	r1, r5
 8004c76:	18e3      	adds	r3, r4, r3
 8004c78:	0030      	movs	r0, r6
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	f000 f880 	bl	8004d80 <_sbrk_r>
 8004c80:	9b01      	ldr	r3, [sp, #4]
 8004c82:	4283      	cmp	r3, r0
 8004c84:	d143      	bne.n	8004d0e <_malloc_r+0xda>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	3703      	adds	r7, #3
 8004c8a:	1aff      	subs	r7, r7, r3
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	439f      	bics	r7, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	2f0c      	cmp	r7, #12
 8004c94:	d200      	bcs.n	8004c98 <_malloc_r+0x64>
 8004c96:	270c      	movs	r7, #12
 8004c98:	0039      	movs	r1, r7
 8004c9a:	0030      	movs	r0, r6
 8004c9c:	f7ff ffa8 	bl	8004bf0 <sbrk_aligned>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	d034      	beq.n	8004d0e <_malloc_r+0xda>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	19df      	adds	r7, r3, r7
 8004ca8:	6027      	str	r7, [r4, #0]
 8004caa:	e013      	b.n	8004cd4 <_malloc_r+0xa0>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dacb      	bge.n	8004c48 <_malloc_r+0x14>
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	2500      	movs	r5, #0
 8004cb4:	6033      	str	r3, [r6, #0]
 8004cb6:	0028      	movs	r0, r5
 8004cb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cba:	6822      	ldr	r2, [r4, #0]
 8004cbc:	1bd1      	subs	r1, r2, r7
 8004cbe:	d420      	bmi.n	8004d02 <_malloc_r+0xce>
 8004cc0:	290b      	cmp	r1, #11
 8004cc2:	d917      	bls.n	8004cf4 <_malloc_r+0xc0>
 8004cc4:	19e2      	adds	r2, r4, r7
 8004cc6:	6027      	str	r7, [r4, #0]
 8004cc8:	42a3      	cmp	r3, r4
 8004cca:	d111      	bne.n	8004cf0 <_malloc_r+0xbc>
 8004ccc:	602a      	str	r2, [r5, #0]
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	6011      	str	r1, [r2, #0]
 8004cd2:	6053      	str	r3, [r2, #4]
 8004cd4:	0030      	movs	r0, r6
 8004cd6:	0025      	movs	r5, r4
 8004cd8:	f000 f86c 	bl	8004db4 <__malloc_unlock>
 8004cdc:	2207      	movs	r2, #7
 8004cde:	350b      	adds	r5, #11
 8004ce0:	1d23      	adds	r3, r4, #4
 8004ce2:	4395      	bics	r5, r2
 8004ce4:	1aea      	subs	r2, r5, r3
 8004ce6:	429d      	cmp	r5, r3
 8004ce8:	d0e5      	beq.n	8004cb6 <_malloc_r+0x82>
 8004cea:	1b5b      	subs	r3, r3, r5
 8004cec:	50a3      	str	r3, [r4, r2]
 8004cee:	e7e2      	b.n	8004cb6 <_malloc_r+0x82>
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	e7ec      	b.n	8004cce <_malloc_r+0x9a>
 8004cf4:	6862      	ldr	r2, [r4, #4]
 8004cf6:	42a3      	cmp	r3, r4
 8004cf8:	d101      	bne.n	8004cfe <_malloc_r+0xca>
 8004cfa:	602a      	str	r2, [r5, #0]
 8004cfc:	e7ea      	b.n	8004cd4 <_malloc_r+0xa0>
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	e7e8      	b.n	8004cd4 <_malloc_r+0xa0>
 8004d02:	0023      	movs	r3, r4
 8004d04:	6864      	ldr	r4, [r4, #4]
 8004d06:	e7a7      	b.n	8004c58 <_malloc_r+0x24>
 8004d08:	002c      	movs	r4, r5
 8004d0a:	686d      	ldr	r5, [r5, #4]
 8004d0c:	e7af      	b.n	8004c6e <_malloc_r+0x3a>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	0030      	movs	r0, r6
 8004d12:	6033      	str	r3, [r6, #0]
 8004d14:	f000 f84e 	bl	8004db4 <__malloc_unlock>
 8004d18:	e7cd      	b.n	8004cb6 <_malloc_r+0x82>
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	2000027c 	.word	0x2000027c

08004d20 <_realloc_r>:
 8004d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d22:	0007      	movs	r7, r0
 8004d24:	000e      	movs	r6, r1
 8004d26:	0014      	movs	r4, r2
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d105      	bne.n	8004d38 <_realloc_r+0x18>
 8004d2c:	0011      	movs	r1, r2
 8004d2e:	f7ff ff81 	bl	8004c34 <_malloc_r>
 8004d32:	0005      	movs	r5, r0
 8004d34:	0028      	movs	r0, r5
 8004d36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d38:	2a00      	cmp	r2, #0
 8004d3a:	d103      	bne.n	8004d44 <_realloc_r+0x24>
 8004d3c:	f7ff ff0e 	bl	8004b5c <_free_r>
 8004d40:	0025      	movs	r5, r4
 8004d42:	e7f7      	b.n	8004d34 <_realloc_r+0x14>
 8004d44:	f000 f83e 	bl	8004dc4 <_malloc_usable_size_r>
 8004d48:	9001      	str	r0, [sp, #4]
 8004d4a:	4284      	cmp	r4, r0
 8004d4c:	d803      	bhi.n	8004d56 <_realloc_r+0x36>
 8004d4e:	0035      	movs	r5, r6
 8004d50:	0843      	lsrs	r3, r0, #1
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	d3ee      	bcc.n	8004d34 <_realloc_r+0x14>
 8004d56:	0021      	movs	r1, r4
 8004d58:	0038      	movs	r0, r7
 8004d5a:	f7ff ff6b 	bl	8004c34 <_malloc_r>
 8004d5e:	1e05      	subs	r5, r0, #0
 8004d60:	d0e8      	beq.n	8004d34 <_realloc_r+0x14>
 8004d62:	9b01      	ldr	r3, [sp, #4]
 8004d64:	0022      	movs	r2, r4
 8004d66:	429c      	cmp	r4, r3
 8004d68:	d900      	bls.n	8004d6c <_realloc_r+0x4c>
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	0031      	movs	r1, r6
 8004d6e:	0028      	movs	r0, r5
 8004d70:	f7ff fbae 	bl	80044d0 <memcpy>
 8004d74:	0031      	movs	r1, r6
 8004d76:	0038      	movs	r0, r7
 8004d78:	f7ff fef0 	bl	8004b5c <_free_r>
 8004d7c:	e7da      	b.n	8004d34 <_realloc_r+0x14>
	...

08004d80 <_sbrk_r>:
 8004d80:	2300      	movs	r3, #0
 8004d82:	b570      	push	{r4, r5, r6, lr}
 8004d84:	4d06      	ldr	r5, [pc, #24]	; (8004da0 <_sbrk_r+0x20>)
 8004d86:	0004      	movs	r4, r0
 8004d88:	0008      	movs	r0, r1
 8004d8a:	602b      	str	r3, [r5, #0]
 8004d8c:	f7fc fb28 	bl	80013e0 <_sbrk>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d103      	bne.n	8004d9c <_sbrk_r+0x1c>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d000      	beq.n	8004d9c <_sbrk_r+0x1c>
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	20000284 	.word	0x20000284

08004da4 <__malloc_lock>:
 8004da4:	b510      	push	{r4, lr}
 8004da6:	4802      	ldr	r0, [pc, #8]	; (8004db0 <__malloc_lock+0xc>)
 8004da8:	f000 f814 	bl	8004dd4 <__retarget_lock_acquire_recursive>
 8004dac:	bd10      	pop	{r4, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	20000288 	.word	0x20000288

08004db4 <__malloc_unlock>:
 8004db4:	b510      	push	{r4, lr}
 8004db6:	4802      	ldr	r0, [pc, #8]	; (8004dc0 <__malloc_unlock+0xc>)
 8004db8:	f000 f80d 	bl	8004dd6 <__retarget_lock_release_recursive>
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	20000288 	.word	0x20000288

08004dc4 <_malloc_usable_size_r>:
 8004dc4:	1f0b      	subs	r3, r1, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	1f18      	subs	r0, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	da01      	bge.n	8004dd2 <_malloc_usable_size_r+0xe>
 8004dce:	580b      	ldr	r3, [r1, r0]
 8004dd0:	18c0      	adds	r0, r0, r3
 8004dd2:	4770      	bx	lr

08004dd4 <__retarget_lock_acquire_recursive>:
 8004dd4:	4770      	bx	lr

08004dd6 <__retarget_lock_release_recursive>:
 8004dd6:	4770      	bx	lr

08004dd8 <_init>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr

08004de4 <_fini>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dea:	bc08      	pop	{r3}
 8004dec:	469e      	mov	lr, r3
 8004dee:	4770      	bx	lr
