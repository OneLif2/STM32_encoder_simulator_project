
STM32_UART_DMA_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c24  08003c24  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003c24  08003c24  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c24  08003c24  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000078  08003ca4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003ca4  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001861  00000000  00000000  0002928b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0002aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011bb1  00000000  00000000  0002b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093d6  00000000  00000000  0003d3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006912c  00000000  00000000  0004678f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af8bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ad0  00000000  00000000  000af90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b10 	.word	0x08003b10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08003b10 	.word	0x08003b10

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_UARTEx_RxEventCallback>:
uint8_t mainbuff[mainbuff_size]; // Data will be finally store here
_Bool uart_rx_int = 0;

// Code for DMA data Rx and Tx

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	000a      	movs	r2, r1
 800024e:	1cbb      	adds	r3, r7, #2
 8000250:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART2) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <HAL_UARTEx_RxEventCallback+0x60>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d11e      	bne.n	800029a <HAL_UARTEx_RxEventCallback+0x56>
		memcpy(mainbuff, rxbuff, Size - 1); // store value fm Uart2, need #include "string.h"
 800025c:	1cbb      	adds	r3, r7, #2
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	3b01      	subs	r3, #1
 8000262:	001a      	movs	r2, r3
 8000264:	4910      	ldr	r1, [pc, #64]	; (80002a8 <HAL_UARTEx_RxEventCallback+0x64>)
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <HAL_UARTEx_RxEventCallback+0x68>)
 8000268:	0018      	movs	r0, r3
 800026a:	f002 ffcd 	bl	8003208 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuff, rxbuff_size); // rx stop after receive, restart it again
 800026e:	490e      	ldr	r1, [pc, #56]	; (80002a8 <HAL_UARTEx_RxEventCallback+0x64>)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000272:	220a      	movs	r2, #10
 8000274:	0018      	movs	r0, r3
 8000276:	f002 ff2e 	bl	80030d6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <HAL_UARTEx_RxEventCallback+0x70>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <HAL_UARTEx_RxEventCallback+0x70>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2104      	movs	r1, #4
 8000286:	438a      	bics	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
		rxdatasize = Size;
 800028a:	1cbb      	adds	r3, r7, #2
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <HAL_UARTEx_RxEventCallback+0x74>)
 8000292:	701a      	strb	r2, [r3, #0]
		uart_rx_int = 1;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <HAL_UARTEx_RxEventCallback+0x78>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
	}
}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	b002      	add	sp, #8
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	40004400 	.word	0x40004400
 80002a8:	200001d4 	.word	0x200001d4
 80002ac:	200001f4 	.word	0x200001f4
 80002b0:	20000094 	.word	0x20000094
 80002b4:	20000118 	.word	0x20000118
 80002b8:	200001d2 	.word	0x200001d2
 80002bc:	20000208 	.word	0x20000208

080002c0 <printpolestep>:

void printpolestep( txbuffer, counter) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	sprintf(txbuffer, "counter = %03d\n\r", counter);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	683a      	ldr	r2, [r7, #0]
 80002ce:	4906      	ldr	r1, [pc, #24]	; (80002e8 <printpolestep+0x28>)
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 ffab 	bl	800322c <siprintf>
	tx_msg((char*) txbuffer);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 f807 	bl	80002ec <tx_msg>
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b002      	add	sp, #8
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	08003b28 	.word	0x08003b28

080002ec <tx_msg>:

void tx_msg( txbuffer) {
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) txbuffer, strlen(txbuffer));
 80002f4:	687c      	ldr	r4, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	0018      	movs	r0, r3
 80002fa:	f7ff ff05 	bl	8000108 <strlen>
 80002fe:	0003      	movs	r3, r0
 8000300:	b29a      	uxth	r2, r3
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <tx_msg+0x30>)
 8000304:	0021      	movs	r1, r4
 8000306:	0018      	movs	r0, r3
 8000308:	f001 fd86 	bl	8001e18 <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 800030c:	2064      	movs	r0, #100	; 0x64
 800030e:	f000 fc1d 	bl	8000b4c <HAL_Delay>
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b003      	add	sp, #12
 8000318:	bd90      	pop	{r4, r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	20000094 	.word	0x20000094

08000320 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000324:	f000 fbae 	bl	8000a84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000328:	f000 f93e 	bl	80005a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800032c:	f000 f9d4 	bl	80006d8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000330:	f000 f9b4 	bl	800069c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000334:	f000 f982 	bl	800063c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuff, rxbuff_size); // call uart rx function, data store in rxbuff
 8000338:	4985      	ldr	r1, [pc, #532]	; (8000550 <main+0x230>)
 800033a:	4b86      	ldr	r3, [pc, #536]	; (8000554 <main+0x234>)
 800033c:	220a      	movs	r2, #10
 800033e:	0018      	movs	r0, r3
 8000340:	f002 fec9 	bl	80030d6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // hal dma it start by default, disable half tx IT, this IT trigger when half data has been transfer
 8000344:	4b84      	ldr	r3, [pc, #528]	; (8000558 <main+0x238>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4b83      	ldr	r3, [pc, #524]	; (8000558 <main+0x238>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2104      	movs	r1, #4
 8000350:	438a      	bics	r2, r1
 8000352:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (uart_rx_int == 1) {
 8000354:	4b81      	ldr	r3, [pc, #516]	; (800055c <main+0x23c>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d100      	bne.n	800035e <main+0x3e>
 800035c:	e0a5      	b.n	80004aa <main+0x18a>
			uart_rx_int = 0;
 800035e:	4b7f      	ldr	r3, [pc, #508]	; (800055c <main+0x23c>)
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
			if (rxdatasize == 1) {
 8000364:	4b7e      	ldr	r3, [pc, #504]	; (8000560 <main+0x240>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d100      	bne.n	800036e <main+0x4e>
 800036c:	e0ed      	b.n	800054a <main+0x22a>
				continue;
			}
			if (strncmp((char*) mainbuff, "resume", rxdatasize - 1) == 0) {
 800036e:	4b7c      	ldr	r3, [pc, #496]	; (8000560 <main+0x240>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	3b01      	subs	r3, #1
 8000374:	001a      	movs	r2, r3
 8000376:	497b      	ldr	r1, [pc, #492]	; (8000564 <main+0x244>)
 8000378:	4b7b      	ldr	r3, [pc, #492]	; (8000568 <main+0x248>)
 800037a:	0018      	movs	r0, r3
 800037c:	f002 ff76 	bl	800326c <strncmp>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d117      	bne.n	80003b4 <main+0x94>
				pause = 0;
 8000384:	4b79      	ldr	r3, [pc, #484]	; (800056c <main+0x24c>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 800038a:	4a77      	ldr	r2, [pc, #476]	; (8000568 <main+0x248>)
 800038c:	4978      	ldr	r1, [pc, #480]	; (8000570 <main+0x250>)
 800038e:	4b79      	ldr	r3, [pc, #484]	; (8000574 <main+0x254>)
 8000390:	0018      	movs	r0, r3
 8000392:	f002 ff4b 	bl	800322c <siprintf>
				tx_msg((char*) txbuffer);
 8000396:	4b77      	ldr	r3, [pc, #476]	; (8000574 <main+0x254>)
 8000398:	0018      	movs	r0, r3
 800039a:	f7ff ffa7 	bl	80002ec <tx_msg>

				sprintf(txbuffer, "program resume \n\r");
 800039e:	4a76      	ldr	r2, [pc, #472]	; (8000578 <main+0x258>)
 80003a0:	4b74      	ldr	r3, [pc, #464]	; (8000574 <main+0x254>)
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f002 ff41 	bl	800322c <siprintf>
				tx_msg((char*) txbuffer);
 80003aa:	4b72      	ldr	r3, [pc, #456]	; (8000574 <main+0x254>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff ff9d 	bl	80002ec <tx_msg>
 80003b2:	e074      	b.n	800049e <main+0x17e>

			} else if (strncmp((char*) mainbuff, "stop", rxdatasize - 1) == 0) {
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <main+0x240>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	001a      	movs	r2, r3
 80003bc:	496f      	ldr	r1, [pc, #444]	; (800057c <main+0x25c>)
 80003be:	4b6a      	ldr	r3, [pc, #424]	; (8000568 <main+0x248>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f002 ff53 	bl	800326c <strncmp>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d123      	bne.n	8000412 <main+0xf2>
				pause = 1;
 80003ca:	4b68      	ldr	r3, [pc, #416]	; (800056c <main+0x24c>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 80003d0:	4a65      	ldr	r2, [pc, #404]	; (8000568 <main+0x248>)
 80003d2:	4967      	ldr	r1, [pc, #412]	; (8000570 <main+0x250>)
 80003d4:	4b67      	ldr	r3, [pc, #412]	; (8000574 <main+0x254>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f002 ff28 	bl	800322c <siprintf>
				tx_msg((char*) txbuffer);
 80003dc:	4b65      	ldr	r3, [pc, #404]	; (8000574 <main+0x254>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f7ff ff84 	bl	80002ec <tx_msg>

				sprintf(txbuffer, "program stop \n\r");
 80003e4:	4a66      	ldr	r2, [pc, #408]	; (8000580 <main+0x260>)
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <main+0x254>)
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f002 ff1e 	bl	800322c <siprintf>
				tx_msg((char*) txbuffer);
 80003f0:	4b60      	ldr	r3, [pc, #384]	; (8000574 <main+0x254>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f7ff ff7a 	bl	80002ec <tx_msg>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 80003f8:	4b62      	ldr	r3, [pc, #392]	; (8000584 <main+0x264>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2140      	movs	r1, #64	; 0x40
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 f82c 	bl	800145c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 8000404:	4b5f      	ldr	r3, [pc, #380]	; (8000584 <main+0x264>)
 8000406:	2200      	movs	r2, #0
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	0018      	movs	r0, r3
 800040c:	f001 f826 	bl	800145c <HAL_GPIO_WritePin>
 8000410:	e045      	b.n	800049e <main+0x17e>

			} else if (strncmp((char*) mainbuff, "forward", rxdatasize - 1)
 8000412:	4b53      	ldr	r3, [pc, #332]	; (8000560 <main+0x240>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	3b01      	subs	r3, #1
 8000418:	001a      	movs	r2, r3
 800041a:	495b      	ldr	r1, [pc, #364]	; (8000588 <main+0x268>)
 800041c:	4b52      	ldr	r3, [pc, #328]	; (8000568 <main+0x248>)
 800041e:	0018      	movs	r0, r3
 8000420:	f002 ff24 	bl	800326c <strncmp>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d10d      	bne.n	8000444 <main+0x124>
					== 0) {

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 8000428:	4a4f      	ldr	r2, [pc, #316]	; (8000568 <main+0x248>)
 800042a:	4951      	ldr	r1, [pc, #324]	; (8000570 <main+0x250>)
 800042c:	4b51      	ldr	r3, [pc, #324]	; (8000574 <main+0x254>)
 800042e:	0018      	movs	r0, r3
 8000430:	f002 fefc 	bl	800322c <siprintf>
				tx_msg((char*) txbuffer);
 8000434:	4b4f      	ldr	r3, [pc, #316]	; (8000574 <main+0x254>)
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff ff58 	bl	80002ec <tx_msg>
				direction_mode = 1;
 800043c:	4b53      	ldr	r3, [pc, #332]	; (800058c <main+0x26c>)
 800043e:	2201      	movs	r2, #1
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	e02c      	b.n	800049e <main+0x17e>

			} else if (strncmp((char*) mainbuff, "backward", rxdatasize - 1)
 8000444:	4b46      	ldr	r3, [pc, #280]	; (8000560 <main+0x240>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	3b01      	subs	r3, #1
 800044a:	001a      	movs	r2, r3
 800044c:	4950      	ldr	r1, [pc, #320]	; (8000590 <main+0x270>)
 800044e:	4b46      	ldr	r3, [pc, #280]	; (8000568 <main+0x248>)
 8000450:	0018      	movs	r0, r3
 8000452:	f002 ff0b 	bl	800326c <strncmp>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d10d      	bne.n	8000476 <main+0x156>
					== 0) {

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 800045a:	4a43      	ldr	r2, [pc, #268]	; (8000568 <main+0x248>)
 800045c:	4944      	ldr	r1, [pc, #272]	; (8000570 <main+0x250>)
 800045e:	4b45      	ldr	r3, [pc, #276]	; (8000574 <main+0x254>)
 8000460:	0018      	movs	r0, r3
 8000462:	f002 fee3 	bl	800322c <siprintf>
				tx_msg((char*) txbuffer);
 8000466:	4b43      	ldr	r3, [pc, #268]	; (8000574 <main+0x254>)
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff ff3f 	bl	80002ec <tx_msg>
				direction_mode = 0;
 800046e:	4b47      	ldr	r3, [pc, #284]	; (800058c <main+0x26c>)
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	e013      	b.n	800049e <main+0x17e>
			}

			else {
				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 8000476:	4a3c      	ldr	r2, [pc, #240]	; (8000568 <main+0x248>)
 8000478:	493d      	ldr	r1, [pc, #244]	; (8000570 <main+0x250>)
 800047a:	4b3e      	ldr	r3, [pc, #248]	; (8000574 <main+0x254>)
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fed5 	bl	800322c <siprintf>
				tx_msg((char*) txbuffer);
 8000482:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <main+0x254>)
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ff31 	bl	80002ec <tx_msg>
				sprintf(txbuffer, "===invalid input=== \n\r");
 800048a:	4a42      	ldr	r2, [pc, #264]	; (8000594 <main+0x274>)
 800048c:	4b39      	ldr	r3, [pc, #228]	; (8000574 <main+0x254>)
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fecb 	bl	800322c <siprintf>
				tx_msg((char*) txbuffer);
 8000496:	4b37      	ldr	r3, [pc, #220]	; (8000574 <main+0x254>)
 8000498:	0018      	movs	r0, r3
 800049a:	f7ff ff27 	bl	80002ec <tx_msg>
			}
			memcpy(mainbuff, blankdata, rxbuff_size);
 800049e:	493e      	ldr	r1, [pc, #248]	; (8000598 <main+0x278>)
 80004a0:	4b31      	ldr	r3, [pc, #196]	; (8000568 <main+0x248>)
 80004a2:	220a      	movs	r2, #10
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 feaf 	bl	8003208 <memcpy>
		}

		if (pause == 0) {
 80004aa:	4b30      	ldr	r3, [pc, #192]	; (800056c <main+0x24c>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2201      	movs	r2, #1
 80004b0:	4053      	eors	r3, r2
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d100      	bne.n	80004ba <main+0x19a>
 80004b8:	e74c      	b.n	8000354 <main+0x34>
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, bled_state);
 80004ba:	4b38      	ldr	r3, [pc, #224]	; (800059c <main+0x27c>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	001a      	movs	r2, r3
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	482f      	ldr	r0, [pc, #188]	; (8000584 <main+0x264>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	f000 ffc8 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LD4_Pin, gled_state);
 80004cc:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <main+0x280>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	001a      	movs	r2, r3
 80004d2:	2380      	movs	r3, #128	; 0x80
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	482b      	ldr	r0, [pc, #172]	; (8000584 <main+0x264>)
 80004d8:	0019      	movs	r1, r3
 80004da:	f000 ffbf 	bl	800145c <HAL_GPIO_WritePin>
			gled_state = !gled_state;
 80004de:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <main+0x280>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	1e5a      	subs	r2, r3, #1
 80004e4:	4193      	sbcs	r3, r2
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2201      	movs	r2, #1
 80004ea:	4053      	eors	r3, r2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	1c1a      	adds	r2, r3, #0
 80004f0:	2301      	movs	r3, #1
 80004f2:	4013      	ands	r3, r2
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <main+0x280>)
 80004f8:	701a      	strb	r2, [r3, #0]
			bled_state = !bled_state;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <main+0x27c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	1e5a      	subs	r2, r3, #1
 8000500:	4193      	sbcs	r3, r2
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2201      	movs	r2, #1
 8000506:	4053      	eors	r3, r2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	1c1a      	adds	r2, r3, #0
 800050c:	2301      	movs	r3, #1
 800050e:	4013      	ands	r3, r2
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <main+0x27c>)
 8000514:	701a      	strb	r2, [r3, #0]
			if (direction_mode == 1)
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <main+0x26c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d105      	bne.n	800052a <main+0x20a>
				counter++;
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <main+0x284>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <main+0x284>)
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	e004      	b.n	8000534 <main+0x214>
			else
				counter--;
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <main+0x284>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <main+0x284>)
 8000532:	601a      	str	r2, [r3, #0]
			printpolestep((char*) txbuffer, counter);
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <main+0x284>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <main+0x254>)
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f7ff febf 	bl	80002c0 <printpolestep>
			HAL_Delay(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f000 fb02 	bl	8000b4c <HAL_Delay>
 8000548:	e704      	b.n	8000354 <main+0x34>
				continue;
 800054a:	46c0      	nop			; (mov r8, r8)
		if (uart_rx_int == 1) {
 800054c:	e702      	b.n	8000354 <main+0x34>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	200001d4 	.word	0x200001d4
 8000554:	20000094 	.word	0x20000094
 8000558:	20000118 	.word	0x20000118
 800055c:	20000208 	.word	0x20000208
 8000560:	200001d2 	.word	0x200001d2
 8000564:	08003b3c 	.word	0x08003b3c
 8000568:	200001f4 	.word	0x200001f4
 800056c:	20000210 	.word	0x20000210
 8000570:	08003b44 	.word	0x08003b44
 8000574:	200001a0 	.word	0x200001a0
 8000578:	08003b60 	.word	0x08003b60
 800057c:	08003b74 	.word	0x08003b74
 8000580:	08003b7c 	.word	0x08003b7c
 8000584:	48000800 	.word	0x48000800
 8000588:	08003b8c 	.word	0x08003b8c
 800058c:	20000000 	.word	0x20000000
 8000590:	08003b94 	.word	0x08003b94
 8000594:	08003ba0 	.word	0x08003ba0
 8000598:	200001e0 	.word	0x200001e0
 800059c:	20000211 	.word	0x20000211
 80005a0:	20000004 	.word	0x20000004
 80005a4:	2000020c 	.word	0x2000020c

080005a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b091      	sub	sp, #68	; 0x44
 80005ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ae:	2410      	movs	r4, #16
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	2330      	movs	r3, #48	; 0x30
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f002 fe2e 	bl	800321a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005be:	003b      	movs	r3, r7
 80005c0:	0018      	movs	r0, r3
 80005c2:	2310      	movs	r3, #16
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f002 fe27 	bl	800321a <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	0021      	movs	r1, r4
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2202      	movs	r2, #2
 80005d2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2201      	movs	r2, #1
 80005d8:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2210      	movs	r2, #16
 80005de:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2202      	movs	r2, #2
 80005e4:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	22a0      	movs	r2, #160	; 0xa0
 80005f0:	0392      	lsls	r2, r2, #14
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 ff4b 	bl	8001498 <HAL_RCC_OscConfig>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x62>
		Error_Handler();
 8000606:	f000 f8c3 	bl	8000790 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800060a:	003b      	movs	r3, r7
 800060c:	2207      	movs	r2, #7
 800060e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	003b      	movs	r3, r7
 8000612:	2202      	movs	r2, #2
 8000614:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	003b      	movs	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	003b      	movs	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000622:	003b      	movs	r3, r7
 8000624:	2101      	movs	r1, #1
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fa50 	bl	8001acc <HAL_RCC_ClockConfig>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x8c>
		Error_Handler();
 8000630:	f000 f8ae 	bl	8000790 <Error_Handler>
	}
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b011      	add	sp, #68	; 0x44
 800063a:	bd90      	pop	{r4, r7, pc}

0800063c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000642:	4a15      	ldr	r2, [pc, #84]	; (8000698 <MX_USART2_UART_Init+0x5c>)
 8000644:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000648:	22e1      	movs	r2, #225	; 0xe1
 800064a:	0252      	lsls	r2, r2, #9
 800064c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fb75 	bl	8001d70 <HAL_UART_Init>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800068a:	f000 f881 	bl	8000790 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000094 	.word	0x20000094
 8000698:	40004400 	.word	0x40004400

0800069c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_DMA_Init+0x38>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_DMA_Init+0x38>)
 80006a8:	2101      	movs	r1, #1
 80006aa:	430a      	orrs	r2, r1
 80006ac:	615a      	str	r2, [r3, #20]
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_DMA_Init+0x38>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	2201      	movs	r2, #1
 80006b4:	4013      	ands	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	200b      	movs	r0, #11
 80006c0:	f000 fb14 	bl	8000cec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80006c4:	200b      	movs	r0, #11
 80006c6:	f000 fb26 	bl	8000d16 <HAL_NVIC_EnableIRQ>

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40021000 	.word	0x40021000

080006d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006de:	240c      	movs	r4, #12
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	0018      	movs	r0, r3
 80006e4:	2314      	movs	r3, #20
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f002 fd96 	bl	800321a <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xb0>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b25      	ldr	r3, [pc, #148]	; (8000788 <MX_GPIO_Init+0xb0>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0289      	lsls	r1, r1, #10
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_GPIO_Init+0xb0>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	029b      	lsls	r3, r3, #10
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xb0>)
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_GPIO_Init+0xb0>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0309      	lsls	r1, r1, #12
 8000714:	430a      	orrs	r2, r1
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_GPIO_Init+0xb0>)
 800071a:	695a      	ldr	r2, [r3, #20]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	031b      	lsls	r3, r3, #12
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LD4_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000726:	23c0      	movs	r3, #192	; 0xc0
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4818      	ldr	r0, [pc, #96]	; (800078c <MX_GPIO_Init+0xb4>)
 800072c:	2200      	movs	r2, #0
 800072e:	0019      	movs	r1, r3
 8000730:	f000 fe94 	bl	800145c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2290      	movs	r2, #144	; 0x90
 800073e:	0352      	lsls	r2, r2, #13
 8000740:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000748:	193a      	adds	r2, r7, r4
 800074a:	2390      	movs	r3, #144	; 0x90
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fd13 	bl	800117c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin;
 8000756:	0021      	movs	r1, r4
 8000758:	187b      	adds	r3, r7, r1
 800075a:	22c0      	movs	r2, #192	; 0xc0
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2201      	movs	r2, #1
 8000764:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	187b      	adds	r3, r7, r1
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <MX_GPIO_Init+0xb4>)
 8000776:	0019      	movs	r1, r3
 8000778:	0010      	movs	r0, r2
 800077a:	f000 fcff 	bl	800117c <HAL_GPIO_Init>

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b009      	add	sp, #36	; 0x24
 8000784:	bd90      	pop	{r4, r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	40021000 	.word	0x40021000
 800078c:	48000800 	.word	0x48000800

08000790 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_MspInit+0x54>)
 80007a4:	699a      	ldr	r2, [r3, #24]
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_MspInit+0x54>)
 80007a8:	2101      	movs	r1, #1
 80007aa:	430a      	orrs	r2, r1
 80007ac:	619a      	str	r2, [r3, #24]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_MspInit+0x54>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	2201      	movs	r2, #1
 80007b4:	4013      	ands	r3, r2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_MspInit+0x54>)
 80007bc:	69da      	ldr	r2, [r3, #28]
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x54>)
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0549      	lsls	r1, r1, #21
 80007c4:	430a      	orrs	r2, r1
 80007c6:	61da      	str	r2, [r3, #28]
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x54>)
 80007ca:	69da      	ldr	r2, [r3, #28]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	055b      	lsls	r3, r3, #21
 80007d0:	4013      	ands	r3, r2
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2004      	movs	r0, #4
 80007dc:	f000 fa86 	bl	8000cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80007e0:	2004      	movs	r0, #4
 80007e2:	f000 fa98 	bl	8000d16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b08b      	sub	sp, #44	; 0x2c
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	2414      	movs	r4, #20
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	2314      	movs	r3, #20
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f002 fd07 	bl	800321a <memset>
  if(huart->Instance==USART2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a47      	ldr	r2, [pc, #284]	; (8000930 <HAL_UART_MspInit+0x13c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d000      	beq.n	8000818 <HAL_UART_MspInit+0x24>
 8000816:	e086      	b.n	8000926 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000818:	4b46      	ldr	r3, [pc, #280]	; (8000934 <HAL_UART_MspInit+0x140>)
 800081a:	69da      	ldr	r2, [r3, #28]
 800081c:	4b45      	ldr	r3, [pc, #276]	; (8000934 <HAL_UART_MspInit+0x140>)
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	0289      	lsls	r1, r1, #10
 8000822:	430a      	orrs	r2, r1
 8000824:	61da      	str	r2, [r3, #28]
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <HAL_UART_MspInit+0x140>)
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	029b      	lsls	r3, r3, #10
 800082e:	4013      	ands	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <HAL_UART_MspInit+0x140>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <HAL_UART_MspInit+0x140>)
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	0289      	lsls	r1, r1, #10
 800083e:	430a      	orrs	r2, r1
 8000840:	615a      	str	r2, [r3, #20]
 8000842:	4b3c      	ldr	r3, [pc, #240]	; (8000934 <HAL_UART_MspInit+0x140>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	029b      	lsls	r3, r3, #10
 800084a:	4013      	ands	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000850:	0021      	movs	r1, r4
 8000852:	187b      	adds	r3, r7, r1
 8000854:	220c      	movs	r2, #12
 8000856:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2202      	movs	r2, #2
 800085c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2203      	movs	r2, #3
 8000868:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2201      	movs	r2, #1
 800086e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	187a      	adds	r2, r7, r1
 8000872:	2390      	movs	r3, #144	; 0x90
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f000 fc7f 	bl	800117c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <HAL_UART_MspInit+0x144>)
 8000880:	4a2e      	ldr	r2, [pc, #184]	; (800093c <HAL_UART_MspInit+0x148>)
 8000882:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <HAL_UART_MspInit+0x144>)
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <HAL_UART_MspInit+0x144>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <HAL_UART_MspInit+0x144>)
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <HAL_UART_MspInit+0x144>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <HAL_UART_MspInit+0x144>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <HAL_UART_MspInit+0x144>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <HAL_UART_MspInit+0x144>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <HAL_UART_MspInit+0x144>)
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fa4d 	bl	8000d50 <HAL_DMA_Init>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80008ba:	f7ff ff69 	bl	8000790 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <HAL_UART_MspInit+0x144>)
 80008c2:	671a      	str	r2, [r3, #112]	; 0x70
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_UART_MspInit+0x144>)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <HAL_UART_MspInit+0x14c>)
 80008cc:	4a1d      	ldr	r2, [pc, #116]	; (8000944 <HAL_UART_MspInit+0x150>)
 80008ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_UART_MspInit+0x14c>)
 80008d2:	2210      	movs	r2, #16
 80008d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <HAL_UART_MspInit+0x14c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_UART_MspInit+0x14c>)
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_UART_MspInit+0x14c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x14c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_UART_MspInit+0x14c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_UART_MspInit+0x14c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_UART_MspInit+0x14c>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fa27 	bl	8000d50 <HAL_DMA_Init>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8000906:	f7ff ff43 	bl	8000790 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <HAL_UART_MspInit+0x14c>)
 800090e:	66da      	str	r2, [r3, #108]	; 0x6c
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_UART_MspInit+0x14c>)
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	201c      	movs	r0, #28
 800091c:	f000 f9e6 	bl	8000cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000920:	201c      	movs	r0, #28
 8000922:	f000 f9f8 	bl	8000d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b00b      	add	sp, #44	; 0x2c
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40004400 	.word	0x40004400
 8000934:	40021000 	.word	0x40021000
 8000938:	20000118 	.word	0x20000118
 800093c:	40020058 	.word	0x40020058
 8000940:	2000015c 	.word	0x2000015c
 8000944:	40020044 	.word	0x40020044

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 *  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f8d0 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fb0f 	bl	8000fa6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <DMA1_Channel4_5_IRQHandler+0x20>)
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fb0b 	bl	8000fa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	2000015c 	.word	0x2000015c
 800099c:	20000118 	.word	0x20000118

080009a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <USART2_IRQHandler+0x14>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 fad8 	bl	8001f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	20000094 	.word	0x20000094

080009b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c0:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <_sbrk+0x5c>)
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <_sbrk+0x60>)
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_sbrk+0x64>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <_sbrk+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	18d3      	adds	r3, r2, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d207      	bcs.n	80009f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e8:	f002 fbe4 	bl	80031b4 <__errno>
 80009ec:	0003      	movs	r3, r0
 80009ee:	220c      	movs	r2, #12
 80009f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	425b      	negs	r3, r3
 80009f6:	e009      	b.n	8000a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	18d2      	adds	r2, r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <_sbrk+0x64>)
 8000a08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b006      	add	sp, #24
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20002000 	.word	0x20002000
 8000a18:	00000400 	.word	0x00000400
 8000a1c:	20000214 	.word	0x20000214
 8000a20:	20000230 	.word	0x20000230

08000a24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a5a:	f7ff ffe3 	bl	8000a24 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f002 fbaf 	bl	80031c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff fc5d 	bl	8000320 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a74:	08003c2c 	.word	0x08003c2c
  ldr r2, =_sbss
 8000a78:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a7c:	2000022c 	.word	0x2000022c

08000a80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_COMP_IRQHandler>
	...

08000a84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_Init+0x24>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_Init+0x24>)
 8000a8e:	2110      	movs	r1, #16
 8000a90:	430a      	orrs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f809 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9a:	f7ff fe7f 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_InitTick+0x5c>)
 8000ab6:	681c      	ldr	r4, [r3, #0]
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_InitTick+0x60>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	0019      	movs	r1, r3
 8000abe:	23fa      	movs	r3, #250	; 0xfa
 8000ac0:	0098      	lsls	r0, r3, #2
 8000ac2:	f7ff fb33 	bl	800012c <__udivsi3>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0020      	movs	r0, r4
 8000acc:	f7ff fb2e 	bl	800012c <__udivsi3>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f92f 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e00f      	b.n	8000b00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d80b      	bhi.n	8000afe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	425b      	negs	r3, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f8fc 	bl	8000cec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_InitTick+0x64>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b003      	add	sp, #12
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000010 	.word	0x20000010
 8000b10:	2000000c 	.word	0x2000000c

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	18d2      	adds	r2, r2, r3
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_IncTick+0x20>)
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20000010 	.word	0x20000010
 8000b34:	20000218 	.word	0x20000218

08000b38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_GetTick+0x10>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000218 	.word	0x20000218

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff fff0 	bl	8000b38 <HAL_GetTick>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3301      	adds	r3, #1
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	189b      	adds	r3, r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	f7ff ffe0 	bl	8000b38 <HAL_GetTick>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	20000010 	.word	0x20000010

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba6:	d809      	bhi.n	8000bbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	001a      	movs	r2, r3
 8000bae:	231f      	movs	r3, #31
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_EnableIRQ+0x30>)
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4091      	lsls	r1, r2
 8000bb8:	000a      	movs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
  }
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	0002      	movs	r2, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b7f      	cmp	r3, #127	; 0x7f
 8000bdc:	d828      	bhi.n	8000c30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bde:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <__NVIC_SetPriority+0xd4>)
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	33c0      	adds	r3, #192	; 0xc0
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	589b      	ldr	r3, [r3, r2]
 8000bee:	1dfa      	adds	r2, r7, #7
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	400a      	ands	r2, r1
 8000bf8:	00d2      	lsls	r2, r2, #3
 8000bfa:	21ff      	movs	r1, #255	; 0xff
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	000a      	movs	r2, r1
 8000c00:	43d2      	mvns	r2, r2
 8000c02:	401a      	ands	r2, r3
 8000c04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	019b      	lsls	r3, r3, #6
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	0018      	movs	r0, r3
 8000c14:	2303      	movs	r3, #3
 8000c16:	4003      	ands	r3, r0
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1c:	481f      	ldr	r0, [pc, #124]	; (8000c9c <__NVIC_SetPriority+0xd4>)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	430a      	orrs	r2, r1
 8000c28:	33c0      	adds	r3, #192	; 0xc0
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c2e:	e031      	b.n	8000c94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c30:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <__NVIC_SetPriority+0xd8>)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0019      	movs	r1, r3
 8000c38:	230f      	movs	r3, #15
 8000c3a:	400b      	ands	r3, r1
 8000c3c:	3b08      	subs	r3, #8
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3306      	adds	r3, #6
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	18d3      	adds	r3, r2, r3
 8000c46:	3304      	adds	r3, #4
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	1dfa      	adds	r2, r7, #7
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	0011      	movs	r1, r2
 8000c50:	2203      	movs	r2, #3
 8000c52:	400a      	ands	r2, r1
 8000c54:	00d2      	lsls	r2, r2, #3
 8000c56:	21ff      	movs	r1, #255	; 0xff
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	43d2      	mvns	r2, r2
 8000c5e:	401a      	ands	r2, r3
 8000c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	22ff      	movs	r2, #255	; 0xff
 8000c68:	401a      	ands	r2, r3
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	0018      	movs	r0, r3
 8000c70:	2303      	movs	r3, #3
 8000c72:	4003      	ands	r3, r0
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <__NVIC_SetPriority+0xd8>)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	001c      	movs	r4, r3
 8000c80:	230f      	movs	r3, #15
 8000c82:	4023      	ands	r3, r4
 8000c84:	3b08      	subs	r3, #8
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	3306      	adds	r3, #6
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	18c3      	adds	r3, r0, r3
 8000c90:	3304      	adds	r3, #4
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b003      	add	sp, #12
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	1e5a      	subs	r2, r3, #1
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	045b      	lsls	r3, r3, #17
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d301      	bcc.n	8000cbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e010      	b.n	8000cde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <SysTick_Config+0x44>)
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	2103      	movs	r1, #3
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff ff7c 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x44>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x44>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	1c02      	adds	r2, r0, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	0011      	movs	r1, r2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff5d 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b004      	add	sp, #16
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ff33 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff ffaf 	bl	8000ca4 <SysTick_Config>
 8000d46:	0003      	movs	r3, r0
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e036      	b.n	8000dd4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2221      	movs	r2, #33	; 0x21
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <HAL_DMA_Init+0x8c>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 f9c4 	bl	8001144 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2221      	movs	r2, #33	; 0x21
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2220      	movs	r2, #32
 8000dce:	2100      	movs	r1, #0
 8000dd0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}  
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b004      	add	sp, #16
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	ffffc00f 	.word	0xffffc00f

08000de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000dee:	2317      	movs	r3, #23
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2220      	movs	r2, #32
 8000dfa:	5c9b      	ldrb	r3, [r3, r2]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d101      	bne.n	8000e04 <HAL_DMA_Start_IT+0x24>
 8000e00:	2302      	movs	r3, #2
 8000e02:	e04f      	b.n	8000ea4 <HAL_DMA_Start_IT+0xc4>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2220      	movs	r2, #32
 8000e08:	2101      	movs	r1, #1
 8000e0a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2221      	movs	r2, #33	; 0x21
 8000e10:	5c9b      	ldrb	r3, [r3, r2]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d13a      	bne.n	8000e8e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2221      	movs	r2, #33	; 0x21
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2200      	movs	r2, #0
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	438a      	bics	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f000 f954 	bl	80010ea <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d008      	beq.n	8000e5c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	210e      	movs	r1, #14
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e00f      	b.n	8000e7c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	210a      	movs	r1, #10
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2104      	movs	r1, #4
 8000e78:	438a      	bics	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2101      	movs	r1, #1
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e007      	b.n	8000e9e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2220      	movs	r2, #32
 8000e92:	2100      	movs	r1, #0
 8000e94:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000e96:	2317      	movs	r3, #23
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000e9e:	2317      	movs	r3, #23
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	781b      	ldrb	r3, [r3, #0]
} 
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b006      	add	sp, #24
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2221      	movs	r2, #33	; 0x21
 8000eb8:	5c9b      	ldrb	r3, [r3, r2]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d008      	beq.n	8000ed2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2100      	movs	r1, #0
 8000ecc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e020      	b.n	8000f14 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	210e      	movs	r1, #14
 8000ede:	438a      	bics	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	438a      	bics	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efa:	2101      	movs	r1, #1
 8000efc:	4091      	lsls	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2221      	movs	r2, #33	; 0x21
 8000f06:	2101      	movs	r1, #1
 8000f08:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	2100      	movs	r1, #0
 8000f10:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f24:	210f      	movs	r1, #15
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2221      	movs	r2, #33	; 0x21
 8000f30:	5c9b      	ldrb	r3, [r3, r2]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d006      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e028      	b.n	8000f98 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	210e      	movs	r1, #14
 8000f52:	438a      	bics	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	438a      	bics	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2221      	movs	r2, #33	; 0x21
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2220      	movs	r2, #32
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d004      	beq.n	8000f98 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	0010      	movs	r0, r2
 8000f96:	4798      	blx	r3
    } 
  }
  return status;
 8000f98:	230f      	movs	r3, #15
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	781b      	ldrb	r3, [r3, #0]
}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b004      	add	sp, #16
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	0013      	movs	r3, r2
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d024      	beq.n	8001018 <HAL_DMA_IRQHandler+0x72>
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d020      	beq.n	8001018 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2220      	movs	r2, #32
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d107      	bne.n	8000ff2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2104      	movs	r1, #4
 8000fee:	438a      	bics	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	000a      	movs	r2, r1
 8001000:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001006:	2b00      	cmp	r3, #0
 8001008:	d100      	bne.n	800100c <HAL_DMA_IRQHandler+0x66>
 800100a:	e06a      	b.n	80010e2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	0010      	movs	r0, r2
 8001014:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001016:	e064      	b.n	80010e2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	2202      	movs	r2, #2
 800101e:	409a      	lsls	r2, r3
 8001020:	0013      	movs	r3, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4013      	ands	r3, r2
 8001026:	d02b      	beq.n	8001080 <HAL_DMA_IRQHandler+0xda>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2202      	movs	r2, #2
 800102c:	4013      	ands	r3, r2
 800102e:	d027      	beq.n	8001080 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2220      	movs	r2, #32
 8001038:	4013      	ands	r3, r2
 800103a:	d10b      	bne.n	8001054 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	210a      	movs	r1, #10
 8001048:	438a      	bics	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2221      	movs	r2, #33	; 0x21
 8001050:	2101      	movs	r1, #1
 8001052:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105c:	2102      	movs	r1, #2
 800105e:	4091      	lsls	r1, r2
 8001060:	000a      	movs	r2, r1
 8001062:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2220      	movs	r2, #32
 8001068:	2100      	movs	r1, #0
 800106a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001070:	2b00      	cmp	r3, #0
 8001072:	d036      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	0010      	movs	r0, r2
 800107c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800107e:	e030      	b.n	80010e2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	2208      	movs	r2, #8
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	d028      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x13c>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2208      	movs	r2, #8
 8001094:	4013      	ands	r3, r2
 8001096:	d024      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	210e      	movs	r1, #14
 80010a4:	438a      	bics	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b0:	2101      	movs	r1, #1
 80010b2:	4091      	lsls	r1, r2
 80010b4:	000a      	movs	r2, r1
 80010b6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2221      	movs	r2, #33	; 0x21
 80010c2:	2101      	movs	r1, #1
 80010c4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2220      	movs	r2, #32
 80010ca:	2100      	movs	r1, #0
 80010cc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	0010      	movs	r0, r2
 80010de:	4798      	blx	r3
    }
   }
}  
 80010e0:	e7ff      	b.n	80010e2 <HAL_DMA_IRQHandler+0x13c>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}

080010ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001100:	2101      	movs	r1, #1
 8001102:	4091      	lsls	r1, r2
 8001104:	000a      	movs	r2, r1
 8001106:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b10      	cmp	r3, #16
 8001116:	d108      	bne.n	800112a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001128:	e007      	b.n	800113a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	60da      	str	r2, [r3, #12]
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b004      	add	sp, #16
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <DMA_CalcBaseAndBitshift+0x30>)
 8001152:	4694      	mov	ip, r2
 8001154:	4463      	add	r3, ip
 8001156:	2114      	movs	r1, #20
 8001158:	0018      	movs	r0, r3
 800115a:	f7fe ffe7 	bl	800012c <__udivsi3>
 800115e:	0003      	movs	r3, r0
 8001160:	009a      	lsls	r2, r3, #2
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a03      	ldr	r2, [pc, #12]	; (8001178 <DMA_CalcBaseAndBitshift+0x34>)
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	bffdfff8 	.word	0xbffdfff8
 8001178:	40020000 	.word	0x40020000

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	e14f      	b.n	800142c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4091      	lsls	r1, r2
 8001196:	000a      	movs	r2, r1
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d100      	bne.n	80011a4 <HAL_GPIO_Init+0x28>
 80011a2:	e140      	b.n	8001426 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2203      	movs	r2, #3
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d005      	beq.n	80011bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2203      	movs	r2, #3
 80011b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d130      	bne.n	800121e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	409a      	lsls	r2, r3
 80011ca:	0013      	movs	r3, r2
 80011cc:	43da      	mvns	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f2:	2201      	movs	r2, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	2201      	movs	r2, #1
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2203      	movs	r2, #3
 8001224:	4013      	ands	r3, r2
 8001226:	2b03      	cmp	r3, #3
 8001228:	d017      	beq.n	800125a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	409a      	lsls	r2, r3
 8001238:	0013      	movs	r3, r2
 800123a:	43da      	mvns	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2203      	movs	r2, #3
 8001260:	4013      	ands	r3, r2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d123      	bne.n	80012ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	58d3      	ldr	r3, [r2, r3]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2207      	movs	r2, #7
 8001278:	4013      	ands	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2107      	movs	r1, #7
 8001292:	400b      	ands	r3, r1
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	08da      	lsrs	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	0092      	lsls	r2, r2, #2
 80012aa:	6939      	ldr	r1, [r7, #16]
 80012ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	401a      	ands	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	23c0      	movs	r3, #192	; 0xc0
 80012e8:	029b      	lsls	r3, r3, #10
 80012ea:	4013      	ands	r3, r2
 80012ec:	d100      	bne.n	80012f0 <HAL_GPIO_Init+0x174>
 80012ee:	e09a      	b.n	8001426 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f0:	4b54      	ldr	r3, [pc, #336]	; (8001444 <HAL_GPIO_Init+0x2c8>)
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	4b53      	ldr	r3, [pc, #332]	; (8001444 <HAL_GPIO_Init+0x2c8>)
 80012f6:	2101      	movs	r1, #1
 80012f8:	430a      	orrs	r2, r1
 80012fa:	619a      	str	r2, [r3, #24]
 80012fc:	4b51      	ldr	r3, [pc, #324]	; (8001444 <HAL_GPIO_Init+0x2c8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2201      	movs	r2, #1
 8001302:	4013      	ands	r3, r2
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001308:	4a4f      	ldr	r2, [pc, #316]	; (8001448 <HAL_GPIO_Init+0x2cc>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	589b      	ldr	r3, [r3, r2]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2203      	movs	r2, #3
 800131a:	4013      	ands	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	409a      	lsls	r2, r3
 8001322:	0013      	movs	r3, r2
 8001324:	43da      	mvns	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	2390      	movs	r3, #144	; 0x90
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	429a      	cmp	r2, r3
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x1e2>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a44      	ldr	r2, [pc, #272]	; (800144c <HAL_GPIO_Init+0x2d0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x1de>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a43      	ldr	r2, [pc, #268]	; (8001450 <HAL_GPIO_Init+0x2d4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x1da>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a42      	ldr	r2, [pc, #264]	; (8001454 <HAL_GPIO_Init+0x2d8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x1d6>
 800134e:	2303      	movs	r3, #3
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x1e4>
 8001352:	2305      	movs	r3, #5
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x1e4>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x1e4>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x1e4>
 800135e:	2300      	movs	r3, #0
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	2103      	movs	r1, #3
 8001364:	400a      	ands	r2, r1
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x2cc>)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137e:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43da      	mvns	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	025b      	lsls	r3, r3, #9
 8001396:	4013      	ands	r3, r2
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43da      	mvns	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	035b      	lsls	r3, r3, #13
 80013ea:	4013      	ands	r3, r2
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43da      	mvns	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	039b      	lsls	r3, r3, #14
 8001414:	4013      	ands	r3, r2
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	40da      	lsrs	r2, r3
 8001434:	1e13      	subs	r3, r2, #0
 8001436:	d000      	beq.n	800143a <HAL_GPIO_Init+0x2be>
 8001438:	e6a8      	b.n	800118c <HAL_GPIO_Init+0x10>
  } 
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b006      	add	sp, #24
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800
 8001454:	48000c00 	.word	0x48000c00
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	0008      	movs	r0, r1
 8001466:	0011      	movs	r1, r2
 8001468:	1cbb      	adds	r3, r7, #2
 800146a:	1c02      	adds	r2, r0, #0
 800146c:	801a      	strh	r2, [r3, #0]
 800146e:	1c7b      	adds	r3, r7, #1
 8001470:	1c0a      	adds	r2, r1, #0
 8001472:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001474:	1c7b      	adds	r3, r7, #1
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147c:	1cbb      	adds	r3, r7, #2
 800147e:	881a      	ldrh	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	1cbb      	adds	r3, r7, #2
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e301      	b.n	8001aae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2201      	movs	r2, #1
 80014b0:	4013      	ands	r3, r2
 80014b2:	d100      	bne.n	80014b6 <HAL_RCC_OscConfig+0x1e>
 80014b4:	e08d      	b.n	80015d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014b6:	4bc3      	ldr	r3, [pc, #780]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	220c      	movs	r2, #12
 80014bc:	4013      	ands	r3, r2
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d00e      	beq.n	80014e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c2:	4bc0      	ldr	r3, [pc, #768]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	220c      	movs	r2, #12
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d116      	bne.n	80014fc <HAL_RCC_OscConfig+0x64>
 80014ce:	4bbd      	ldr	r3, [pc, #756]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	025b      	lsls	r3, r3, #9
 80014d6:	401a      	ands	r2, r3
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	429a      	cmp	r2, r3
 80014de:	d10d      	bne.n	80014fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	4bb8      	ldr	r3, [pc, #736]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	029b      	lsls	r3, r3, #10
 80014e8:	4013      	ands	r3, r2
 80014ea:	d100      	bne.n	80014ee <HAL_RCC_OscConfig+0x56>
 80014ec:	e070      	b.n	80015d0 <HAL_RCC_OscConfig+0x138>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d000      	beq.n	80014f8 <HAL_RCC_OscConfig+0x60>
 80014f6:	e06b      	b.n	80015d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e2d8      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x7c>
 8001504:	4baf      	ldr	r3, [pc, #700]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4bae      	ldr	r3, [pc, #696]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	0249      	lsls	r1, r1, #9
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e02f      	b.n	8001574 <HAL_RCC_OscConfig+0xdc>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10c      	bne.n	8001536 <HAL_RCC_OscConfig+0x9e>
 800151c:	4ba9      	ldr	r3, [pc, #676]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4ba8      	ldr	r3, [pc, #672]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001522:	49a9      	ldr	r1, [pc, #676]	; (80017c8 <HAL_RCC_OscConfig+0x330>)
 8001524:	400a      	ands	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	4ba6      	ldr	r3, [pc, #664]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4ba5      	ldr	r3, [pc, #660]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800152e:	49a7      	ldr	r1, [pc, #668]	; (80017cc <HAL_RCC_OscConfig+0x334>)
 8001530:	400a      	ands	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e01e      	b.n	8001574 <HAL_RCC_OscConfig+0xdc>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10e      	bne.n	800155c <HAL_RCC_OscConfig+0xc4>
 800153e:	4ba1      	ldr	r3, [pc, #644]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4ba0      	ldr	r3, [pc, #640]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	02c9      	lsls	r1, r1, #11
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	4b9d      	ldr	r3, [pc, #628]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b9c      	ldr	r3, [pc, #624]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	0249      	lsls	r1, r1, #9
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xdc>
 800155c:	4b99      	ldr	r3, [pc, #612]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b98      	ldr	r3, [pc, #608]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001562:	4999      	ldr	r1, [pc, #612]	; (80017c8 <HAL_RCC_OscConfig+0x330>)
 8001564:	400a      	ands	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	4b96      	ldr	r3, [pc, #600]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b95      	ldr	r3, [pc, #596]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800156e:	4997      	ldr	r1, [pc, #604]	; (80017cc <HAL_RCC_OscConfig+0x334>)
 8001570:	400a      	ands	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d014      	beq.n	80015a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fadc 	bl	8000b38 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001586:	f7ff fad7 	bl	8000b38 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b64      	cmp	r3, #100	; 0x64
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e28a      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001598:	4b8a      	ldr	r3, [pc, #552]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	029b      	lsls	r3, r3, #10
 80015a0:	4013      	ands	r3, r2
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0xee>
 80015a4:	e015      	b.n	80015d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff fac7 	bl	8000b38 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fac2 	bl	8000b38 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e275      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b80      	ldr	r3, [pc, #512]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	029b      	lsls	r3, r3, #10
 80015ca:	4013      	ands	r3, r2
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x118>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d100      	bne.n	80015de <HAL_RCC_OscConfig+0x146>
 80015dc:	e069      	b.n	80016b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015de:	4b79      	ldr	r3, [pc, #484]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	220c      	movs	r2, #12
 80015e4:	4013      	ands	r3, r2
 80015e6:	d00b      	beq.n	8001600 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	220c      	movs	r2, #12
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d11c      	bne.n	800162e <HAL_RCC_OscConfig+0x196>
 80015f4:	4b73      	ldr	r3, [pc, #460]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	4013      	ands	r3, r2
 80015fe:	d116      	bne.n	800162e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001600:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x17e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e24b      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b6b      	ldr	r3, [pc, #428]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	22f8      	movs	r2, #248	; 0xf8
 800161c:	4393      	bics	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	00da      	lsls	r2, r3, #3
 8001626:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162c:	e041      	b.n	80016b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d024      	beq.n	8001680 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001636:	4b63      	ldr	r3, [pc, #396]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800163c:	2101      	movs	r1, #1
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fa79 	bl	8000b38 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fa74 	bl	8000b38 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e227      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d0f1      	beq.n	800164c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	22f8      	movs	r2, #248	; 0xf8
 800166e:	4393      	bics	r3, r2
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00da      	lsls	r2, r3, #3
 8001678:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e018      	b.n	80016b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001686:	2101      	movs	r1, #1
 8001688:	438a      	bics	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fa54 	bl	8000b38 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fa4f 	bl	8000b38 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e202      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a8:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2202      	movs	r2, #2
 80016ae:	4013      	ands	r3, r2
 80016b0:	d1f1      	bne.n	8001696 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2208      	movs	r2, #8
 80016b8:	4013      	ands	r3, r2
 80016ba:	d036      	beq.n	800172a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d019      	beq.n	80016f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c4:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c8:	4b3e      	ldr	r3, [pc, #248]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d0:	f7ff fa32 	bl	8000b38 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fa2d 	bl	8000b38 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1e0      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0f1      	beq.n	80016da <HAL_RCC_OscConfig+0x242>
 80016f6:	e018      	b.n	800172a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	2101      	movs	r1, #1
 8001700:	438a      	bics	r2, r1
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff fa18 	bl	8000b38 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff fa13 	bl	8000b38 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1c6      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d1f1      	bne.n	800170e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2204      	movs	r2, #4
 8001730:	4013      	ands	r3, r2
 8001732:	d100      	bne.n	8001736 <HAL_RCC_OscConfig+0x29e>
 8001734:	e0b4      	b.n	80018a0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001736:	201f      	movs	r0, #31
 8001738:	183b      	adds	r3, r7, r0
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	055b      	lsls	r3, r3, #21
 8001746:	4013      	ands	r3, r2
 8001748:	d110      	bne.n	800176c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800174c:	69da      	ldr	r2, [r3, #28]
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0549      	lsls	r1, r1, #21
 8001754:	430a      	orrs	r2, r1
 8001756:	61da      	str	r2, [r3, #28]
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 800175a:	69da      	ldr	r2, [r3, #28]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	055b      	lsls	r3, r3, #21
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001766:	183b      	adds	r3, r7, r0
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_RCC_OscConfig+0x338>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4013      	ands	r3, r2
 8001776:	d11a      	bne.n	80017ae <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_RCC_OscConfig+0x338>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_RCC_OscConfig+0x338>)
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	0049      	lsls	r1, r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001786:	f7ff f9d7 	bl	8000b38 <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001790:	f7ff f9d2 	bl	8000b38 <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e185      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_OscConfig+0x338>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10e      	bne.n	80017d4 <HAL_RCC_OscConfig+0x33c>
 80017b6:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	621a      	str	r2, [r3, #32]
 80017c2:	e035      	b.n	8001830 <HAL_RCC_OscConfig+0x398>
 80017c4:	40021000 	.word	0x40021000
 80017c8:	fffeffff 	.word	0xfffeffff
 80017cc:	fffbffff 	.word	0xfffbffff
 80017d0:	40007000 	.word	0x40007000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x35e>
 80017dc:	4bb6      	ldr	r3, [pc, #728]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80017de:	6a1a      	ldr	r2, [r3, #32]
 80017e0:	4bb5      	ldr	r3, [pc, #724]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	438a      	bics	r2, r1
 80017e6:	621a      	str	r2, [r3, #32]
 80017e8:	4bb3      	ldr	r3, [pc, #716]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80017ea:	6a1a      	ldr	r2, [r3, #32]
 80017ec:	4bb2      	ldr	r3, [pc, #712]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80017ee:	2104      	movs	r1, #4
 80017f0:	438a      	bics	r2, r1
 80017f2:	621a      	str	r2, [r3, #32]
 80017f4:	e01c      	b.n	8001830 <HAL_RCC_OscConfig+0x398>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x380>
 80017fe:	4bae      	ldr	r3, [pc, #696]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001800:	6a1a      	ldr	r2, [r3, #32]
 8001802:	4bad      	ldr	r3, [pc, #692]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001804:	2104      	movs	r1, #4
 8001806:	430a      	orrs	r2, r1
 8001808:	621a      	str	r2, [r3, #32]
 800180a:	4bab      	ldr	r3, [pc, #684]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800180c:	6a1a      	ldr	r2, [r3, #32]
 800180e:	4baa      	ldr	r3, [pc, #680]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	621a      	str	r2, [r3, #32]
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0x398>
 8001818:	4ba7      	ldr	r3, [pc, #668]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	4ba6      	ldr	r3, [pc, #664]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800181e:	2101      	movs	r1, #1
 8001820:	438a      	bics	r2, r1
 8001822:	621a      	str	r2, [r3, #32]
 8001824:	4ba4      	ldr	r3, [pc, #656]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	4ba3      	ldr	r3, [pc, #652]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800182a:	2104      	movs	r1, #4
 800182c:	438a      	bics	r2, r1
 800182e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d014      	beq.n	8001862 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff f97e 	bl	8000b38 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	e009      	b.n	8001856 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff f979 	bl	8000b38 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	4a9b      	ldr	r2, [pc, #620]	; (8001abc <HAL_RCC_OscConfig+0x624>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e12b      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	4b98      	ldr	r3, [pc, #608]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x3aa>
 8001860:	e013      	b.n	800188a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7ff f969 	bl	8000b38 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186a:	e009      	b.n	8001880 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff f964 	bl	8000b38 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	4a91      	ldr	r2, [pc, #580]	; (8001abc <HAL_RCC_OscConfig+0x624>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e116      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	4b8d      	ldr	r3, [pc, #564]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	2202      	movs	r2, #2
 8001886:	4013      	ands	r3, r2
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800188a:	231f      	movs	r3, #31
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001894:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	4b87      	ldr	r3, [pc, #540]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800189a:	4989      	ldr	r1, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x628>)
 800189c:	400a      	ands	r2, r1
 800189e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2210      	movs	r2, #16
 80018a6:	4013      	ands	r3, r2
 80018a8:	d063      	beq.n	8001972 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d12a      	bne.n	8001908 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018b2:	4b81      	ldr	r3, [pc, #516]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80018b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b6:	4b80      	ldr	r3, [pc, #512]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80018b8:	2104      	movs	r1, #4
 80018ba:	430a      	orrs	r2, r1
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018be:	4b7e      	ldr	r3, [pc, #504]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80018c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c2:	4b7d      	ldr	r3, [pc, #500]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80018c4:	2101      	movs	r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f935 	bl	8000b38 <HAL_GetTick>
 80018ce:	0003      	movs	r3, r0
 80018d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018d4:	f7ff f930 	bl	8000b38 <HAL_GetTick>
 80018d8:	0002      	movs	r2, r0
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0e3      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018e6:	4b74      	ldr	r3, [pc, #464]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	2202      	movs	r2, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d0f1      	beq.n	80018d4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018f0:	4b71      	ldr	r3, [pc, #452]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	22f8      	movs	r2, #248	; 0xf8
 80018f6:	4393      	bics	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	00da      	lsls	r2, r3, #3
 8001900:	4b6d      	ldr	r3, [pc, #436]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001902:	430a      	orrs	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
 8001906:	e034      	b.n	8001972 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	3305      	adds	r3, #5
 800190e:	d111      	bne.n	8001934 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001910:	4b69      	ldr	r3, [pc, #420]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001914:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001916:	2104      	movs	r1, #4
 8001918:	438a      	bics	r2, r1
 800191a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	22f8      	movs	r2, #248	; 0xf8
 8001922:	4393      	bics	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	00da      	lsls	r2, r3, #3
 800192c:	4b62      	ldr	r3, [pc, #392]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800192e:	430a      	orrs	r2, r1
 8001930:	635a      	str	r2, [r3, #52]	; 0x34
 8001932:	e01e      	b.n	8001972 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001934:	4b60      	ldr	r3, [pc, #384]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001938:	4b5f      	ldr	r3, [pc, #380]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800193a:	2104      	movs	r1, #4
 800193c:	430a      	orrs	r2, r1
 800193e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001944:	4b5c      	ldr	r3, [pc, #368]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001946:	2101      	movs	r1, #1
 8001948:	438a      	bics	r2, r1
 800194a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff f8f4 	bl	8000b38 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001956:	f7ff f8ef 	bl	8000b38 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0a2      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800196a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196c:	2202      	movs	r2, #2
 800196e:	4013      	ands	r3, r2
 8001970:	d1f1      	bne.n	8001956 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d100      	bne.n	800197c <HAL_RCC_OscConfig+0x4e4>
 800197a:	e097      	b.n	8001aac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	4b4e      	ldr	r3, [pc, #312]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	220c      	movs	r2, #12
 8001982:	4013      	ands	r3, r2
 8001984:	2b08      	cmp	r3, #8
 8001986:	d100      	bne.n	800198a <HAL_RCC_OscConfig+0x4f2>
 8001988:	e06b      	b.n	8001a62 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d14c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b49      	ldr	r3, [pc, #292]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b48      	ldr	r3, [pc, #288]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001998:	494a      	ldr	r1, [pc, #296]	; (8001ac4 <HAL_RCC_OscConfig+0x62c>)
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff f8cb 	bl	8000b38 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff f8c6 	bl	8000b38 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e079      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ba:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	049b      	lsls	r3, r3, #18
 80019c2:	4013      	ands	r3, r2
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c6:	4b3c      	ldr	r3, [pc, #240]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	220f      	movs	r2, #15
 80019cc:	4393      	bics	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d4:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80019d6:	430a      	orrs	r2, r1
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a3a      	ldr	r2, [pc, #232]	; (8001ac8 <HAL_RCC_OscConfig+0x630>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	431a      	orrs	r2, r3
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	0449      	lsls	r1, r1, #17
 80019fe:	430a      	orrs	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f899 	bl	8000b38 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f894 	bl	8000b38 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e047      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	049b      	lsls	r3, r3, #18
 8001a26:	4013      	ands	r3, r2
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x574>
 8001a2a:	e03f      	b.n	8001aac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001a32:	4924      	ldr	r1, [pc, #144]	; (8001ac4 <HAL_RCC_OscConfig+0x62c>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f87e 	bl	8000b38 <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a42:	f7ff f879 	bl	8000b38 <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e02c      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	049b      	lsls	r3, r3, #18
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d1f0      	bne.n	8001a42 <HAL_RCC_OscConfig+0x5aa>
 8001a60:	e024      	b.n	8001aac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e01f      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_RCC_OscConfig+0x620>)
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	025b      	lsls	r3, r3, #9
 8001a80:	401a      	ands	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d10e      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	23f0      	movs	r3, #240	; 0xf0
 8001a9c:	039b      	lsls	r3, r3, #14
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b008      	add	sp, #32
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	00001388 	.word	0x00001388
 8001ac0:	efffffff 	.word	0xefffffff
 8001ac4:	feffffff 	.word	0xfeffffff
 8001ac8:	ffc2ffff 	.word	0xffc2ffff

08001acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b3      	b.n	8001c48 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_ClockConfig+0x184>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d911      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_ClockConfig+0x184>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_RCC_ClockConfig+0x184>)
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_ClockConfig+0x184>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e09a      	b.n	8001c48 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2202      	movs	r2, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d015      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2204      	movs	r2, #4
 8001b22:	4013      	ands	r3, r2
 8001b24:	d006      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b26:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001b2c:	21e0      	movs	r1, #224	; 0xe0
 8001b2e:	00c9      	lsls	r1, r1, #3
 8001b30:	430a      	orrs	r2, r1
 8001b32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	22f0      	movs	r2, #240	; 0xf0
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d040      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	029b      	lsls	r3, r3, #10
 8001b62:	4013      	ands	r3, r2
 8001b64:	d114      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e06e      	b.n	8001c48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	049b      	lsls	r3, r3, #18
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e062      	b.n	8001c48 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e05b      	b.n	8001c48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2203      	movs	r2, #3
 8001b96:	4393      	bics	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba4:	f7fe ffc8 	bl	8000b38 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bae:	f7fe ffc3 	bl	8000b38 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	4a27      	ldr	r2, [pc, #156]	; (8001c58 <HAL_RCC_ClockConfig+0x18c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e042      	b.n	8001c48 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	401a      	ands	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1ec      	bne.n	8001bae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_RCC_ClockConfig+0x184>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d211      	bcs.n	8001c06 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_RCC_ClockConfig+0x184>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4393      	bics	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_RCC_ClockConfig+0x184>)
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_RCC_ClockConfig+0x184>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e020      	b.n	8001c48 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a11      	ldr	r2, [pc, #68]	; (8001c5c <HAL_RCC_ClockConfig+0x190>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c24:	f000 f820 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c28:	0001      	movs	r1, r0
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCC_ClockConfig+0x188>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	220f      	movs	r2, #15
 8001c32:	4013      	ands	r3, r2
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x194>)
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	000a      	movs	r2, r1
 8001c3a:	40da      	lsrs	r2, r3
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x198>)
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7fe ff33 	bl	8000aac <HAL_InitTick>
  
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40022000 	.word	0x40022000
 8001c54:	40021000 	.word	0x40021000
 8001c58:	00001388 	.word	0x00001388
 8001c5c:	fffff8ff 	.word	0xfffff8ff
 8001c60:	08003bd8 	.word	0x08003bd8
 8001c64:	20000008 	.word	0x20000008

08001c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b08f      	sub	sp, #60	; 0x3c
 8001c6c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c6e:	2314      	movs	r3, #20
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c76:	c313      	stmia	r3!, {r0, r1, r4}
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c82:	c313      	stmia	r3!, {r0, r1, r4}
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	220c      	movs	r2, #12
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d002      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x4a>
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d003      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x50>
 8001cb0:	e02d      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb6:	e02d      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	0c9b      	lsrs	r3, r3, #18
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2214      	movs	r2, #20
 8001cc2:	18ba      	adds	r2, r7, r2
 8001cc4:	5cd3      	ldrb	r3, [r2, r3]
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	220f      	movs	r2, #15
 8001cce:	4013      	ands	r3, r2
 8001cd0:	1d3a      	adds	r2, r7, #4
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce2:	4812      	ldr	r0, [pc, #72]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ce4:	f7fe fa22 	bl	800012c <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	001a      	movs	r2, r3
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	4353      	muls	r3, r2
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf2:	e009      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	0152      	lsls	r2, r2, #5
 8001cfa:	1a52      	subs	r2, r2, r1
 8001cfc:	0193      	lsls	r3, r2, #6
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	185b      	adds	r3, r3, r1
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d0c:	e002      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d12:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b00f      	add	sp, #60	; 0x3c
 8001d1c:	bd90      	pop	{r4, r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	08003bb8 	.word	0x08003bb8
 8001d24:	08003bc8 	.word	0x08003bc8
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	20000008 	.word	0x20000008

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d48:	f7ff fff2 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d4c:	0001      	movs	r1, r0
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	2207      	movs	r2, #7
 8001d56:	4013      	ands	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	40d9      	lsrs	r1, r3
 8001d5e:	000b      	movs	r3, r1
}    
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08003be8 	.word	0x08003be8

08001d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e044      	b.n	8001e0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d107      	bne.n	8001d9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2274      	movs	r2, #116	; 0x74
 8001d8e:	2100      	movs	r1, #0
 8001d90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7fe fd2d 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2224      	movs	r2, #36	; 0x24
 8001d9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2101      	movs	r1, #1
 8001dac:	438a      	bics	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 fbd2 	bl	800255c <UART_SetConfig>
 8001db8:	0003      	movs	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e024      	b.n	8001e0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 fd05 	bl	80027dc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	490d      	ldr	r1, [pc, #52]	; (8001e14 <HAL_UART_Init+0xa4>)
 8001dde:	400a      	ands	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	212a      	movs	r1, #42	; 0x2a
 8001dee:	438a      	bics	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f000 fd9d 	bl	8002944 <UART_CheckIdleState>
 8001e0a:	0003      	movs	r3, r0
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	ffffb7ff 	.word	0xffffb7ff

08001e18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	1dbb      	adds	r3, r7, #6
 8001e24:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d000      	beq.n	8001e30 <HAL_UART_Transmit_DMA+0x18>
 8001e2e:	e08a      	b.n	8001f46 <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_UART_Transmit_DMA+0x26>
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e082      	b.n	8001f48 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	015b      	lsls	r3, r3, #5
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d109      	bne.n	8001e62 <HAL_UART_Transmit_DMA+0x4a>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d001      	beq.n	8001e62 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e072      	b.n	8001f48 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2274      	movs	r2, #116	; 0x74
 8001e66:	5c9b      	ldrb	r3, [r3, r2]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_UART_Transmit_DMA+0x58>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e06b      	b.n	8001f48 <HAL_UART_Transmit_DMA+0x130>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2274      	movs	r2, #116	; 0x74
 8001e74:	2101      	movs	r1, #1
 8001e76:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1dba      	adds	r2, r7, #6
 8001e82:	2150      	movs	r1, #80	; 0x50
 8001e84:	8812      	ldrh	r2, [r2, #0]
 8001e86:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1dba      	adds	r2, r7, #6
 8001e8c:	2152      	movs	r1, #82	; 0x52
 8001e8e:	8812      	ldrh	r2, [r2, #0]
 8001e90:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	2100      	movs	r1, #0
 8001e98:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2221      	movs	r2, #33	; 0x21
 8001e9e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d02b      	beq.n	8001f00 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eac:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <HAL_UART_Transmit_DMA+0x138>)
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb4:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <HAL_UART_Transmit_DMA+0x13c>)
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ebc:	4a26      	ldr	r2, [pc, #152]	; (8001f58 <HAL_UART_Transmit_DMA+0x140>)
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3328      	adds	r3, #40	; 0x28
 8001ed8:	001a      	movs	r2, r3
 8001eda:	1dbb      	adds	r3, r7, #6
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	f7fe ff7f 	bl	8000de0 <HAL_DMA_Start_IT>
 8001ee2:	1e03      	subs	r3, r0, #0
 8001ee4:	d00c      	beq.n	8001f00 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	2110      	movs	r1, #16
 8001eec:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2274      	movs	r2, #116	; 0x74
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e023      	b.n	8001f48 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2240      	movs	r2, #64	; 0x40
 8001f06:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2274      	movs	r2, #116	; 0x74
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f10:	f3ef 8310 	mrs	r3, PRIMASK
 8001f14:	613b      	str	r3, [r7, #16]
  return(result);
 8001f16:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f383 8810 	msr	PRIMASK, r3
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f383 8810 	msr	PRIMASK, r3
}
 8001f40:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
  }
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b008      	add	sp, #32
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	08002dad 	.word	0x08002dad
 8001f54:	08002e41 	.word	0x08002e41
 8001f58:	08002fc1 	.word	0x08002fc1

08001f5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b0ab      	sub	sp, #172	; 0xac
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	22a4      	movs	r2, #164	; 0xa4
 8001f6c:	18b9      	adds	r1, r7, r2
 8001f6e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	20a0      	movs	r0, #160	; 0xa0
 8001f78:	1839      	adds	r1, r7, r0
 8001f7a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	219c      	movs	r1, #156	; 0x9c
 8001f84:	1879      	adds	r1, r7, r1
 8001f86:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f88:	0011      	movs	r1, r2
 8001f8a:	18bb      	adds	r3, r7, r2
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a99      	ldr	r2, [pc, #612]	; (80021f4 <HAL_UART_IRQHandler+0x298>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	2298      	movs	r2, #152	; 0x98
 8001f94:	18bc      	adds	r4, r7, r2
 8001f96:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001f98:	18bb      	adds	r3, r7, r2
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d114      	bne.n	8001fca <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d00f      	beq.n	8001fca <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001faa:	183b      	adds	r3, r7, r0
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d00a      	beq.n	8001fca <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <HAL_UART_IRQHandler+0x62>
 8001fbc:	e296      	b.n	80024ec <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	0010      	movs	r0, r2
 8001fc6:	4798      	blx	r3
      }
      return;
 8001fc8:	e290      	b.n	80024ec <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001fca:	2398      	movs	r3, #152	; 0x98
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d100      	bne.n	8001fd6 <HAL_UART_IRQHandler+0x7a>
 8001fd4:	e114      	b.n	8002200 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001fd6:	239c      	movs	r3, #156	; 0x9c
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d106      	bne.n	8001ff0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001fe2:	23a0      	movs	r3, #160	; 0xa0
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a83      	ldr	r2, [pc, #524]	; (80021f8 <HAL_UART_IRQHandler+0x29c>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	d100      	bne.n	8001ff0 <HAL_UART_IRQHandler+0x94>
 8001fee:	e107      	b.n	8002200 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ff0:	23a4      	movs	r3, #164	; 0xa4
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d012      	beq.n	8002022 <HAL_UART_IRQHandler+0xc6>
 8001ffc:	23a0      	movs	r3, #160	; 0xa0
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4013      	ands	r3, r2
 8002008:	d00b      	beq.n	8002022 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2201      	movs	r2, #1
 8002010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	589b      	ldr	r3, [r3, r2]
 8002018:	2201      	movs	r2, #1
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002022:	23a4      	movs	r3, #164	; 0xa4
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d011      	beq.n	8002052 <HAL_UART_IRQHandler+0xf6>
 800202e:	239c      	movs	r3, #156	; 0x9c
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2201      	movs	r2, #1
 8002036:	4013      	ands	r3, r2
 8002038:	d00b      	beq.n	8002052 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2202      	movs	r2, #2
 8002040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	589b      	ldr	r3, [r3, r2]
 8002048:	2204      	movs	r2, #4
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002052:	23a4      	movs	r3, #164	; 0xa4
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	d011      	beq.n	8002082 <HAL_UART_IRQHandler+0x126>
 800205e:	239c      	movs	r3, #156	; 0x9c
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2201      	movs	r2, #1
 8002066:	4013      	ands	r3, r2
 8002068:	d00b      	beq.n	8002082 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	589b      	ldr	r3, [r3, r2]
 8002078:	2202      	movs	r2, #2
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002082:	23a4      	movs	r3, #164	; 0xa4
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2208      	movs	r2, #8
 800208a:	4013      	ands	r3, r2
 800208c:	d017      	beq.n	80020be <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800208e:	23a0      	movs	r3, #160	; 0xa0
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2220      	movs	r2, #32
 8002096:	4013      	ands	r3, r2
 8002098:	d105      	bne.n	80020a6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800209a:	239c      	movs	r3, #156	; 0x9c
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020a4:	d00b      	beq.n	80020be <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2208      	movs	r2, #8
 80020ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	589b      	ldr	r3, [r3, r2]
 80020b4:	2208      	movs	r2, #8
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80020be:	23a4      	movs	r3, #164	; 0xa4
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4013      	ands	r3, r2
 80020ca:	d013      	beq.n	80020f4 <HAL_UART_IRQHandler+0x198>
 80020cc:	23a0      	movs	r3, #160	; 0xa0
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	04db      	lsls	r3, r3, #19
 80020d6:	4013      	ands	r3, r2
 80020d8:	d00c      	beq.n	80020f4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2280      	movs	r2, #128	; 0x80
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	589b      	ldr	r3, [r3, r2]
 80020ea:	2220      	movs	r2, #32
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	589b      	ldr	r3, [r3, r2]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d100      	bne.n	8002100 <HAL_UART_IRQHandler+0x1a4>
 80020fe:	e1f7      	b.n	80024f0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002100:	23a4      	movs	r3, #164	; 0xa4
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2220      	movs	r2, #32
 8002108:	4013      	ands	r3, r2
 800210a:	d00e      	beq.n	800212a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800210c:	23a0      	movs	r3, #160	; 0xa0
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2220      	movs	r2, #32
 8002114:	4013      	ands	r3, r2
 8002116:	d008      	beq.n	800212a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	0010      	movs	r0, r2
 8002128:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	589b      	ldr	r3, [r3, r2]
 8002130:	2194      	movs	r1, #148	; 0x94
 8002132:	187a      	adds	r2, r7, r1
 8002134:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2240      	movs	r2, #64	; 0x40
 800213e:	4013      	ands	r3, r2
 8002140:	2b40      	cmp	r3, #64	; 0x40
 8002142:	d004      	beq.n	800214e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002144:	187b      	adds	r3, r7, r1
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2228      	movs	r2, #40	; 0x28
 800214a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800214c:	d047      	beq.n	80021de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f000 fdc9 	bl	8002ce8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2240      	movs	r2, #64	; 0x40
 800215e:	4013      	ands	r3, r2
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d137      	bne.n	80021d4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002164:	f3ef 8310 	mrs	r3, PRIMASK
 8002168:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800216a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800216c:	2090      	movs	r0, #144	; 0x90
 800216e:	183a      	adds	r2, r7, r0
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	2301      	movs	r3, #1
 8002174:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002178:	f383 8810 	msr	PRIMASK, r3
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2140      	movs	r1, #64	; 0x40
 800218a:	438a      	bics	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	183b      	adds	r3, r7, r0
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002196:	f383 8810 	msr	PRIMASK, r3
}
 800219a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d012      	beq.n	80021ca <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <HAL_UART_IRQHandler+0x2a0>)
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7fe feb3 	bl	8000f1c <HAL_DMA_Abort_IT>
 80021b6:	1e03      	subs	r3, r0, #0
 80021b8:	d01a      	beq.n	80021f0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	0018      	movs	r0, r3
 80021c6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	e012      	b.n	80021f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f9bd 	bl	800254c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d2:	e00d      	b.n	80021f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 f9b8 	bl	800254c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021dc:	e008      	b.n	80021f0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f9b3 	bl	800254c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	2100      	movs	r1, #0
 80021ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80021ee:	e17f      	b.n	80024f0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f0:	46c0      	nop			; (mov r8, r8)
    return;
 80021f2:	e17d      	b.n	80024f0 <HAL_UART_IRQHandler+0x594>
 80021f4:	0000080f 	.word	0x0000080f
 80021f8:	04000120 	.word	0x04000120
 80021fc:	08003043 	.word	0x08003043

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002204:	2b01      	cmp	r3, #1
 8002206:	d000      	beq.n	800220a <HAL_UART_IRQHandler+0x2ae>
 8002208:	e131      	b.n	800246e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800220a:	23a4      	movs	r3, #164	; 0xa4
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2210      	movs	r2, #16
 8002212:	4013      	ands	r3, r2
 8002214:	d100      	bne.n	8002218 <HAL_UART_IRQHandler+0x2bc>
 8002216:	e12a      	b.n	800246e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002218:	23a0      	movs	r3, #160	; 0xa0
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2210      	movs	r2, #16
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_UART_IRQHandler+0x2ca>
 8002224:	e123      	b.n	800246e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2210      	movs	r2, #16
 800222c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	4013      	ands	r3, r2
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d000      	beq.n	800223e <HAL_UART_IRQHandler+0x2e2>
 800223c:	e09b      	b.n	8002376 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	217e      	movs	r1, #126	; 0x7e
 8002248:	187b      	adds	r3, r7, r1
 800224a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800224c:	187b      	adds	r3, r7, r1
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d100      	bne.n	8002256 <HAL_UART_IRQHandler+0x2fa>
 8002254:	e14e      	b.n	80024f4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2258      	movs	r2, #88	; 0x58
 800225a:	5a9b      	ldrh	r3, [r3, r2]
 800225c:	187a      	adds	r2, r7, r1
 800225e:	8812      	ldrh	r2, [r2, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d300      	bcc.n	8002266 <HAL_UART_IRQHandler+0x30a>
 8002264:	e146      	b.n	80024f4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	187a      	adds	r2, r7, r1
 800226a:	215a      	movs	r1, #90	; 0x5a
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b20      	cmp	r3, #32
 8002278:	d06e      	beq.n	8002358 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800227a:	f3ef 8310 	mrs	r3, PRIMASK
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002282:	67bb      	str	r3, [r7, #120]	; 0x78
 8002284:	2301      	movs	r3, #1
 8002286:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228a:	f383 8810 	msr	PRIMASK, r3
}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	499a      	ldr	r1, [pc, #616]	; (8002504 <HAL_UART_IRQHandler+0x5a8>)
 800229c:	400a      	ands	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	f383 8810 	msr	PRIMASK, r3
}
 80022aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ac:	f3ef 8310 	mrs	r3, PRIMASK
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b4:	677b      	str	r3, [r7, #116]	; 0x74
 80022b6:	2301      	movs	r3, #1
 80022b8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022bc:	f383 8810 	msr	PRIMASK, r3
}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	438a      	bics	r2, r1
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d8:	f383 8810 	msr	PRIMASK, r3
}
 80022dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022de:	f3ef 8310 	mrs	r3, PRIMASK
 80022e2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80022e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022e6:	673b      	str	r3, [r7, #112]	; 0x70
 80022e8:	2301      	movs	r3, #1
 80022ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ee:	f383 8810 	msr	PRIMASK, r3
}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	438a      	bics	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002306:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800230a:	f383 8810 	msr	PRIMASK, r3
}
 800230e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800231c:	f3ef 8310 	mrs	r3, PRIMASK
 8002320:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002322:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002324:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002326:	2301      	movs	r3, #1
 8002328:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800232c:	f383 8810 	msr	PRIMASK, r3
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2110      	movs	r1, #16
 800233e:	438a      	bics	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002344:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002348:	f383 8810 	msr	PRIMASK, r3
}
 800234c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	0018      	movs	r0, r3
 8002354:	f7fe fdaa 	bl	8000eac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2258      	movs	r2, #88	; 0x58
 800235c:	5a9a      	ldrh	r2, [r3, r2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	215a      	movs	r1, #90	; 0x5a
 8002362:	5a5b      	ldrh	r3, [r3, r1]
 8002364:	b29b      	uxth	r3, r3
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	b29a      	uxth	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0011      	movs	r1, r2
 800236e:	0018      	movs	r0, r3
 8002370:	f7fd ff68 	bl	8000244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002374:	e0be      	b.n	80024f4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2258      	movs	r2, #88	; 0x58
 800237a:	5a99      	ldrh	r1, [r3, r2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	225a      	movs	r2, #90	; 0x5a
 8002380:	5a9b      	ldrh	r3, [r3, r2]
 8002382:	b29a      	uxth	r2, r3
 8002384:	208e      	movs	r0, #142	; 0x8e
 8002386:	183b      	adds	r3, r7, r0
 8002388:	1a8a      	subs	r2, r1, r2
 800238a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	225a      	movs	r2, #90	; 0x5a
 8002390:	5a9b      	ldrh	r3, [r3, r2]
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d100      	bne.n	800239a <HAL_UART_IRQHandler+0x43e>
 8002398:	e0ae      	b.n	80024f8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800239a:	183b      	adds	r3, r7, r0
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d100      	bne.n	80023a4 <HAL_UART_IRQHandler+0x448>
 80023a2:	e0a9      	b.n	80024f8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a4:	f3ef 8310 	mrs	r3, PRIMASK
 80023a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80023aa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ac:	2488      	movs	r4, #136	; 0x88
 80023ae:	193a      	adds	r2, r7, r4
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	2301      	movs	r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f383 8810 	msr	PRIMASK, r3
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	494f      	ldr	r1, [pc, #316]	; (8002508 <HAL_UART_IRQHandler+0x5ac>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f383 8810 	msr	PRIMASK, r3
}
 80023da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023dc:	f3ef 8310 	mrs	r3, PRIMASK
 80023e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80023e2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e4:	2484      	movs	r4, #132	; 0x84
 80023e6:	193a      	adds	r2, r7, r4
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	2301      	movs	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f383 8810 	msr	PRIMASK, r3
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	438a      	bics	r2, r1
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	193b      	adds	r3, r7, r4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	f383 8810 	msr	PRIMASK, r3
}
 8002412:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002426:	f3ef 8310 	mrs	r3, PRIMASK
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800242e:	2480      	movs	r4, #128	; 0x80
 8002430:	193a      	adds	r2, r7, r4
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	2301      	movs	r3, #1
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	f383 8810 	msr	PRIMASK, r3
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2110      	movs	r1, #16
 800244c:	438a      	bics	r2, r1
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	193b      	adds	r3, r7, r4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	f383 8810 	msr	PRIMASK, r3
}
 800245c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800245e:	183b      	adds	r3, r7, r0
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0011      	movs	r1, r2
 8002466:	0018      	movs	r0, r3
 8002468:	f7fd feec 	bl	8000244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800246c:	e044      	b.n	80024f8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800246e:	23a4      	movs	r3, #164	; 0xa4
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	035b      	lsls	r3, r3, #13
 8002478:	4013      	ands	r3, r2
 800247a:	d010      	beq.n	800249e <HAL_UART_IRQHandler+0x542>
 800247c:	239c      	movs	r3, #156	; 0x9c
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	03db      	lsls	r3, r3, #15
 8002486:	4013      	ands	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	0352      	lsls	r2, r2, #13
 8002492:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	0018      	movs	r0, r3
 8002498:	f000 fe15 	bl	80030c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800249c:	e02f      	b.n	80024fe <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800249e:	23a4      	movs	r3, #164	; 0xa4
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	4013      	ands	r3, r2
 80024a8:	d00f      	beq.n	80024ca <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024aa:	23a0      	movs	r3, #160	; 0xa0
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	4013      	ands	r3, r2
 80024b4:	d009      	beq.n	80024ca <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01e      	beq.n	80024fc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	0010      	movs	r0, r2
 80024c6:	4798      	blx	r3
    }
    return;
 80024c8:	e018      	b.n	80024fc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024ca:	23a4      	movs	r3, #164	; 0xa4
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2240      	movs	r2, #64	; 0x40
 80024d2:	4013      	ands	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_UART_IRQHandler+0x5a2>
 80024d6:	23a0      	movs	r3, #160	; 0xa0
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2240      	movs	r2, #64	; 0x40
 80024de:	4013      	ands	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 fdc3 	bl	8003070 <UART_EndTransmit_IT>
    return;
 80024ea:	e008      	b.n	80024fe <HAL_UART_IRQHandler+0x5a2>
      return;
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	e006      	b.n	80024fe <HAL_UART_IRQHandler+0x5a2>
    return;
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	e004      	b.n	80024fe <HAL_UART_IRQHandler+0x5a2>
      return;
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	e002      	b.n	80024fe <HAL_UART_IRQHandler+0x5a2>
      return;
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	e000      	b.n	80024fe <HAL_UART_IRQHandler+0x5a2>
    return;
 80024fc:	46c0      	nop			; (mov r8, r8)
  }

}
 80024fe:	46bd      	mov	sp, r7
 8002500:	b02b      	add	sp, #172	; 0xac
 8002502:	bd90      	pop	{r4, r7, pc}
 8002504:	fffffeff 	.word	0xfffffeff
 8002508:	fffffedf 	.word	0xfffffedf

0800250c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}

0800255c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002564:	231e      	movs	r3, #30
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a8d      	ldr	r2, [pc, #564]	; (80027c0 <UART_SetConfig+0x264>)
 800258c:	4013      	ands	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a88      	ldr	r2, [pc, #544]	; (80027c4 <UART_SetConfig+0x268>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a7f      	ldr	r2, [pc, #508]	; (80027c8 <UART_SetConfig+0x26c>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7b      	ldr	r2, [pc, #492]	; (80027cc <UART_SetConfig+0x270>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d127      	bne.n	8002632 <UART_SetConfig+0xd6>
 80025e2:	4b7b      	ldr	r3, [pc, #492]	; (80027d0 <UART_SetConfig+0x274>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	2203      	movs	r2, #3
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d00d      	beq.n	800260a <UART_SetConfig+0xae>
 80025ee:	d81b      	bhi.n	8002628 <UART_SetConfig+0xcc>
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d014      	beq.n	800261e <UART_SetConfig+0xc2>
 80025f4:	d818      	bhi.n	8002628 <UART_SetConfig+0xcc>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <UART_SetConfig+0xa4>
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d00a      	beq.n	8002614 <UART_SetConfig+0xb8>
 80025fe:	e013      	b.n	8002628 <UART_SetConfig+0xcc>
 8002600:	231f      	movs	r3, #31
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e021      	b.n	800264e <UART_SetConfig+0xf2>
 800260a:	231f      	movs	r3, #31
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e01c      	b.n	800264e <UART_SetConfig+0xf2>
 8002614:	231f      	movs	r3, #31
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2204      	movs	r2, #4
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e017      	b.n	800264e <UART_SetConfig+0xf2>
 800261e:	231f      	movs	r3, #31
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2208      	movs	r2, #8
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	e012      	b.n	800264e <UART_SetConfig+0xf2>
 8002628:	231f      	movs	r3, #31
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2210      	movs	r2, #16
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e00d      	b.n	800264e <UART_SetConfig+0xf2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a67      	ldr	r2, [pc, #412]	; (80027d4 <UART_SetConfig+0x278>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d104      	bne.n	8002646 <UART_SetConfig+0xea>
 800263c:	231f      	movs	r3, #31
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e003      	b.n	800264e <UART_SetConfig+0xf2>
 8002646:	231f      	movs	r3, #31
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2210      	movs	r2, #16
 800264c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	429a      	cmp	r2, r3
 8002658:	d15d      	bne.n	8002716 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800265a:	231f      	movs	r3, #31
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d015      	beq.n	8002690 <UART_SetConfig+0x134>
 8002664:	dc18      	bgt.n	8002698 <UART_SetConfig+0x13c>
 8002666:	2b04      	cmp	r3, #4
 8002668:	d00d      	beq.n	8002686 <UART_SetConfig+0x12a>
 800266a:	dc15      	bgt.n	8002698 <UART_SetConfig+0x13c>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <UART_SetConfig+0x11a>
 8002670:	2b02      	cmp	r3, #2
 8002672:	d005      	beq.n	8002680 <UART_SetConfig+0x124>
 8002674:	e010      	b.n	8002698 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002676:	f7ff fb65 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 800267a:	0003      	movs	r3, r0
 800267c:	61bb      	str	r3, [r7, #24]
        break;
 800267e:	e012      	b.n	80026a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002680:	4b55      	ldr	r3, [pc, #340]	; (80027d8 <UART_SetConfig+0x27c>)
 8002682:	61bb      	str	r3, [r7, #24]
        break;
 8002684:	e00f      	b.n	80026a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002686:	f7ff faef 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 800268a:	0003      	movs	r3, r0
 800268c:	61bb      	str	r3, [r7, #24]
        break;
 800268e:	e00a      	b.n	80026a6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	61bb      	str	r3, [r7, #24]
        break;
 8002696:	e006      	b.n	80026a6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800269c:	231e      	movs	r3, #30
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
        break;
 80026a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d100      	bne.n	80026ae <UART_SetConfig+0x152>
 80026ac:	e07b      	b.n	80027a6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	005a      	lsls	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	18d2      	adds	r2, r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	0019      	movs	r1, r3
 80026c0:	0010      	movs	r0, r2
 80026c2:	f7fd fd33 	bl	800012c <__udivsi3>
 80026c6:	0003      	movs	r3, r0
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	d91c      	bls.n	800270c <UART_SetConfig+0x1b0>
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	025b      	lsls	r3, r3, #9
 80026d8:	429a      	cmp	r2, r3
 80026da:	d217      	bcs.n	800270c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	200e      	movs	r0, #14
 80026e2:	183b      	adds	r3, r7, r0
 80026e4:	210f      	movs	r1, #15
 80026e6:	438a      	bics	r2, r1
 80026e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2207      	movs	r2, #7
 80026f2:	4013      	ands	r3, r2
 80026f4:	b299      	uxth	r1, r3
 80026f6:	183b      	adds	r3, r7, r0
 80026f8:	183a      	adds	r2, r7, r0
 80026fa:	8812      	ldrh	r2, [r2, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	183a      	adds	r2, r7, r0
 8002706:	8812      	ldrh	r2, [r2, #0]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	e04c      	b.n	80027a6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800270c:	231e      	movs	r3, #30
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e047      	b.n	80027a6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002716:	231f      	movs	r3, #31
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d015      	beq.n	800274c <UART_SetConfig+0x1f0>
 8002720:	dc18      	bgt.n	8002754 <UART_SetConfig+0x1f8>
 8002722:	2b04      	cmp	r3, #4
 8002724:	d00d      	beq.n	8002742 <UART_SetConfig+0x1e6>
 8002726:	dc15      	bgt.n	8002754 <UART_SetConfig+0x1f8>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <UART_SetConfig+0x1d6>
 800272c:	2b02      	cmp	r3, #2
 800272e:	d005      	beq.n	800273c <UART_SetConfig+0x1e0>
 8002730:	e010      	b.n	8002754 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002732:	f7ff fb07 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 8002736:	0003      	movs	r3, r0
 8002738:	61bb      	str	r3, [r7, #24]
        break;
 800273a:	e012      	b.n	8002762 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800273c:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <UART_SetConfig+0x27c>)
 800273e:	61bb      	str	r3, [r7, #24]
        break;
 8002740:	e00f      	b.n	8002762 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002742:	f7ff fa91 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8002746:	0003      	movs	r3, r0
 8002748:	61bb      	str	r3, [r7, #24]
        break;
 800274a:	e00a      	b.n	8002762 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	61bb      	str	r3, [r7, #24]
        break;
 8002752:	e006      	b.n	8002762 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002758:	231e      	movs	r3, #30
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
        break;
 8002760:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01e      	beq.n	80027a6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	085a      	lsrs	r2, r3, #1
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	18d2      	adds	r2, r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f7fd fcd7 	bl	800012c <__udivsi3>
 800277e:	0003      	movs	r3, r0
 8002780:	b29b      	uxth	r3, r3
 8002782:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	d909      	bls.n	800279e <UART_SetConfig+0x242>
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	025b      	lsls	r3, r3, #9
 8002790:	429a      	cmp	r2, r3
 8002792:	d204      	bcs.n	800279e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	e003      	b.n	80027a6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800279e:	231e      	movs	r3, #30
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027b2:	231e      	movs	r3, #30
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	781b      	ldrb	r3, [r3, #0]
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b008      	add	sp, #32
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	ffff69f3 	.word	0xffff69f3
 80027c4:	ffffcfff 	.word	0xffffcfff
 80027c8:	fffff4ff 	.word	0xfffff4ff
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40004400 	.word	0x40004400
 80027d8:	007a1200 	.word	0x007a1200

080027dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2201      	movs	r2, #1
 80027ea:	4013      	ands	r3, r2
 80027ec:	d00b      	beq.n	8002806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a4a      	ldr	r2, [pc, #296]	; (8002920 <UART_AdvFeatureConfig+0x144>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	0019      	movs	r1, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d00b      	beq.n	8002828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a43      	ldr	r2, [pc, #268]	; (8002924 <UART_AdvFeatureConfig+0x148>)
 8002818:	4013      	ands	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2204      	movs	r2, #4
 800282e:	4013      	ands	r3, r2
 8002830:	d00b      	beq.n	800284a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a3b      	ldr	r2, [pc, #236]	; (8002928 <UART_AdvFeatureConfig+0x14c>)
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2208      	movs	r2, #8
 8002850:	4013      	ands	r3, r2
 8002852:	d00b      	beq.n	800286c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4a34      	ldr	r2, [pc, #208]	; (800292c <UART_AdvFeatureConfig+0x150>)
 800285c:	4013      	ands	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	2210      	movs	r2, #16
 8002872:	4013      	ands	r3, r2
 8002874:	d00b      	beq.n	800288e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <UART_AdvFeatureConfig+0x154>)
 800287e:	4013      	ands	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2220      	movs	r2, #32
 8002894:	4013      	ands	r3, r2
 8002896:	d00b      	beq.n	80028b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	4a25      	ldr	r2, [pc, #148]	; (8002934 <UART_AdvFeatureConfig+0x158>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2240      	movs	r2, #64	; 0x40
 80028b6:	4013      	ands	r3, r2
 80028b8:	d01d      	beq.n	80028f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <UART_AdvFeatureConfig+0x15c>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	035b      	lsls	r3, r3, #13
 80028da:	429a      	cmp	r2, r3
 80028dc:	d10b      	bne.n	80028f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a15      	ldr	r2, [pc, #84]	; (800293c <UART_AdvFeatureConfig+0x160>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	4013      	ands	r3, r2
 80028fe:	d00b      	beq.n	8002918 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <UART_AdvFeatureConfig+0x164>)
 8002908:	4013      	ands	r3, r2
 800290a:	0019      	movs	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]
  }
}
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}
 8002920:	fffdffff 	.word	0xfffdffff
 8002924:	fffeffff 	.word	0xfffeffff
 8002928:	fffbffff 	.word	0xfffbffff
 800292c:	ffff7fff 	.word	0xffff7fff
 8002930:	ffffefff 	.word	0xffffefff
 8002934:	ffffdfff 	.word	0xffffdfff
 8002938:	ffefffff 	.word	0xffefffff
 800293c:	ff9fffff 	.word	0xff9fffff
 8002940:	fff7ffff 	.word	0xfff7ffff

08002944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af02      	add	r7, sp, #8
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2100      	movs	r1, #0
 8002952:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002954:	f7fe f8f0 	bl	8000b38 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2208      	movs	r2, #8
 8002964:	4013      	ands	r3, r2
 8002966:	2b08      	cmp	r3, #8
 8002968:	d10c      	bne.n	8002984 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	0391      	lsls	r1, r2, #14
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <UART_CheckIdleState+0x8c>)
 8002974:	9200      	str	r2, [sp, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	f000 f82c 	bl	80029d4 <UART_WaitOnFlagUntilTimeout>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e021      	b.n	80029c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2204      	movs	r2, #4
 800298c:	4013      	ands	r3, r2
 800298e:	2b04      	cmp	r3, #4
 8002990:	d10c      	bne.n	80029ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	03d1      	lsls	r1, r2, #15
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <UART_CheckIdleState+0x8c>)
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	f000 f818 	bl	80029d4 <UART_WaitOnFlagUntilTimeout>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d001      	beq.n	80029ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e00d      	b.n	80029c8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2274      	movs	r2, #116	; 0x74
 80029c2:	2100      	movs	r1, #0
 80029c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	01ffffff 	.word	0x01ffffff

080029d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b094      	sub	sp, #80	; 0x50
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	1dfb      	adds	r3, r7, #7
 80029e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e4:	e0a3      	b.n	8002b2e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e8:	3301      	adds	r3, #1
 80029ea:	d100      	bne.n	80029ee <UART_WaitOnFlagUntilTimeout+0x1a>
 80029ec:	e09f      	b.n	8002b2e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7fe f8a3 	bl	8000b38 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80029fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d13d      	bne.n	8002a80 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a04:	f3ef 8310 	mrs	r3, PRIMASK
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a0e:	2301      	movs	r3, #1
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	f383 8810 	msr	PRIMASK, r3
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	494c      	ldr	r1, [pc, #304]	; (8002b58 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a26:	400a      	ands	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	f383 8810 	msr	PRIMASK, r3
}
 8002a34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a36:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a40:	2301      	movs	r3, #1
 8002a42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	f383 8810 	msr	PRIMASK, r3
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2101      	movs	r1, #1
 8002a58:	438a      	bics	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a62:	f383 8810 	msr	PRIMASK, r3
}
 8002a66:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2274      	movs	r2, #116	; 0x74
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e067      	b.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2204      	movs	r2, #4
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d050      	beq.n	8002b2e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	401a      	ands	r2, r3
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d146      	bne.n	8002b2e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8002aae:	613b      	str	r3, [r7, #16]
  return(result);
 8002ab0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f383 8810 	msr	PRIMASK, r3
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4923      	ldr	r1, [pc, #140]	; (8002b58 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f383 8810 	msr	PRIMASK, r3
}
 8002ada:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002adc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ae2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f383 8810 	msr	PRIMASK, r3
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	438a      	bics	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	f383 8810 	msr	PRIMASK, r3
}
 8002b0c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	2120      	movs	r1, #32
 8002b20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2274      	movs	r2, #116	; 0x74
 8002b26:	2100      	movs	r1, #0
 8002b28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e010      	b.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4013      	ands	r3, r2
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	425a      	negs	r2, r3
 8002b3e:	4153      	adcs	r3, r2
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	001a      	movs	r2, r3
 8002b44:	1dfb      	adds	r3, r7, #7
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d100      	bne.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002b4c:	e74b      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b014      	add	sp, #80	; 0x50
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	fffffe5f 	.word	0xfffffe5f

08002b5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b090      	sub	sp, #64	; 0x40
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	1dbb      	adds	r3, r7, #6
 8002b68:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1dba      	adds	r2, r7, #6
 8002b74:	2158      	movs	r1, #88	; 0x58
 8002b76:	8812      	ldrh	r2, [r2, #0]
 8002b78:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2222      	movs	r2, #34	; 0x22
 8002b86:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d02b      	beq.n	8002be8 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a3f      	ldr	r2, [pc, #252]	; (8002c94 <UART_Start_Receive_DMA+0x138>)
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a3e      	ldr	r2, [pc, #248]	; (8002c98 <UART_Start_Receive_DMA+0x13c>)
 8002b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <UART_Start_Receive_DMA+0x140>)
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	2200      	movs	r2, #0
 8002bae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3324      	adds	r3, #36	; 0x24
 8002bba:	0019      	movs	r1, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	1dbb      	adds	r3, r7, #6
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	f7fe f90b 	bl	8000de0 <HAL_DMA_Start_IT>
 8002bca:	1e03      	subs	r3, r0, #0
 8002bcc:	d00c      	beq.n	8002be8 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	2110      	movs	r1, #16
 8002bd4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2274      	movs	r2, #116	; 0x74
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e050      	b.n	8002c8a <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2274      	movs	r2, #116	; 0x74
 8002bec:	2100      	movs	r1, #0
 8002bee:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf4:	613b      	str	r3, [r7, #16]
  return(result);
 8002bf6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	0049      	lsls	r1, r1, #1
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f383 8810 	msr	PRIMASK, r3
}
 8002c22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c24:	f3ef 8310 	mrs	r3, PRIMASK
 8002c28:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c2a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c2e:	2301      	movs	r3, #1
 8002c30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f383 8810 	msr	PRIMASK, r3
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	430a      	orrs	r2, r1
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	f383 8810 	msr	PRIMASK, r3
}
 8002c54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c56:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c60:	2301      	movs	r3, #1
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	f383 8810 	msr	PRIMASK, r3
}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	f383 8810 	msr	PRIMASK, r3
}
 8002c86:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b010      	add	sp, #64	; 0x40
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	08002e61 	.word	0x08002e61
 8002c98:	08002f85 	.word	0x08002f85
 8002c9c:	08002fc1 	.word	0x08002fc1

08002ca0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cae:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f383 8810 	msr	PRIMASK, r3
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	21c0      	movs	r1, #192	; 0xc0
 8002cca:	438a      	bics	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	679a      	str	r2, [r3, #120]	; 0x78
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b006      	add	sp, #24
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf4:	617b      	str	r3, [r7, #20]
  return(result);
 8002cf6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f383 8810 	msr	PRIMASK, r3
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4925      	ldr	r1, [pc, #148]	; (8002da8 <UART_EndRxTransfer+0xc0>)
 8002d12:	400a      	ands	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d22:	f3ef 8310 	mrs	r3, PRIMASK
 8002d26:	623b      	str	r3, [r7, #32]
  return(result);
 8002d28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	f383 8810 	msr	PRIMASK, r3
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	438a      	bics	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d118      	bne.n	8002d8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d60:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d66:	2301      	movs	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f383 8810 	msr	PRIMASK, r3
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	438a      	bics	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f383 8810 	msr	PRIMASK, r3
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b00e      	add	sp, #56	; 0x38
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	fffffedf 	.word	0xfffffedf

08002dac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	; 0x30
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d035      	beq.n	8002e2e <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	2252      	movs	r2, #82	; 0x52
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dca:	f3ef 8310 	mrs	r3, PRIMASK
 8002dce:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dd0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f383 8810 	msr	PRIMASK, r3
}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	438a      	bics	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f383 8810 	msr	PRIMASK, r3
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8002e00:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e02:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	2301      	movs	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f383 8810 	msr	PRIMASK, r3
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2140      	movs	r1, #64	; 0x40
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f383 8810 	msr	PRIMASK, r3
}
 8002e2c:	e004      	b.n	8002e38 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fb6b 	bl	800250c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b00c      	add	sp, #48	; 0x30
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7ff fb63 	bl	800251c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b094      	sub	sp, #80	; 0x50
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d06e      	beq.n	8002f54 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8002e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e78:	225a      	movs	r2, #90	; 0x5a
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e82:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e84:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e88:	2301      	movs	r3, #1
 8002e8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4938      	ldr	r1, [pc, #224]	; (8002f80 <UART_DMAReceiveCplt+0x120>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f383 8810 	msr	PRIMASK, r3
}
 8002eae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eba:	2301      	movs	r3, #1
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	f383 8810 	msr	PRIMASK, r3
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	438a      	bics	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	f383 8810 	msr	PRIMASK, r3
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40
 8002eec:	2301      	movs	r3, #1
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	f383 8810 	msr	PRIMASK, r3
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2140      	movs	r1, #64	; 0x40
 8002f04:	438a      	bics	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	f383 8810 	msr	PRIMASK, r3
}
 8002f12:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f16:	2220      	movs	r2, #32
 8002f18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d118      	bne.n	8002f54 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f22:	f3ef 8310 	mrs	r3, PRIMASK
 8002f26:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f28:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2110      	movs	r1, #16
 8002f44:	438a      	bics	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f383 8810 	msr	PRIMASK, r3
}
 8002f52:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d108      	bne.n	8002f6e <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5e:	2258      	movs	r2, #88	; 0x58
 8002f60:	5a9a      	ldrh	r2, [r3, r2]
 8002f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f64:	0011      	movs	r1, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	f7fd f96c 	bl	8000244 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f6c:	e003      	b.n	8002f76 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8002f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff fadb 	bl	800252c <HAL_UART_RxCpltCallback>
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b014      	add	sp, #80	; 0x50
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	fffffeff 	.word	0xfffffeff

08002f84 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10a      	bne.n	8002fb0 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2258      	movs	r2, #88	; 0x58
 8002f9e:	5a9b      	ldrh	r3, [r3, r2]
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7fd f94b 	bl	8000244 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fae:	e003      	b.n	8002fb8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff fac2 	bl	800253c <HAL_UART_RxHalfCpltCallback>
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b004      	add	sp, #16
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d10a      	bne.n	8002ffe <UART_DMAError+0x3e>
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b21      	cmp	r3, #33	; 0x21
 8002fec:	d107      	bne.n	8002ffe <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2252      	movs	r2, #82	; 0x52
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff fe51 	bl	8002ca0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2240      	movs	r2, #64	; 0x40
 8003006:	4013      	ands	r3, r2
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d10a      	bne.n	8003022 <UART_DMAError+0x62>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b22      	cmp	r3, #34	; 0x22
 8003010:	d107      	bne.n	8003022 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	225a      	movs	r2, #90	; 0x5a
 8003016:	2100      	movs	r1, #0
 8003018:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	0018      	movs	r0, r3
 800301e:	f7ff fe63 	bl	8002ce8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	589b      	ldr	r3, [r3, r2]
 8003028:	2210      	movs	r2, #16
 800302a:	431a      	orrs	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2180      	movs	r1, #128	; 0x80
 8003030:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff fa89 	bl	800254c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b006      	add	sp, #24
 8003040:	bd80      	pop	{r7, pc}

08003042 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	225a      	movs	r2, #90	; 0x5a
 8003054:	2100      	movs	r1, #0
 8003056:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2252      	movs	r2, #82	; 0x52
 800305c:	2100      	movs	r1, #0
 800305e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff fa72 	bl	800254c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b004      	add	sp, #16
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003078:	f3ef 8310 	mrs	r3, PRIMASK
 800307c:	60bb      	str	r3, [r7, #8]
  return(result);
 800307e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	2301      	movs	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f383 8810 	msr	PRIMASK, r3
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2140      	movs	r1, #64	; 0x40
 800309a:	438a      	bics	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f383 8810 	msr	PRIMASK, r3
}
 80030a8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff fa27 	bl	800250c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b006      	add	sp, #24
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030d6:	b5b0      	push	{r4, r5, r7, lr}
 80030d8:	b08a      	sub	sp, #40	; 0x28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	1dbb      	adds	r3, r7, #6
 80030e2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d15e      	bne.n	80031aa <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80030f2:	1dbb      	adds	r3, r7, #6
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e056      	b.n	80031ac <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	015b      	lsls	r3, r3, #5
 8003106:	429a      	cmp	r2, r3
 8003108:	d109      	bne.n	800311e <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d105      	bne.n	800311e <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2201      	movs	r2, #1
 8003116:	4013      	ands	r3, r2
 8003118:	d001      	beq.n	800311e <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e046      	b.n	80031ac <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2274      	movs	r2, #116	; 0x74
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 8003128:	2302      	movs	r3, #2
 800312a:	e03f      	b.n	80031ac <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2274      	movs	r2, #116	; 0x74
 8003130:	2101      	movs	r1, #1
 8003132:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800313a:	2527      	movs	r5, #39	; 0x27
 800313c:	197c      	adds	r4, r7, r5
 800313e:	1dbb      	adds	r3, r7, #6
 8003140:	881a      	ldrh	r2, [r3, #0]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	0018      	movs	r0, r3
 8003148:	f7ff fd08 	bl	8002b5c <UART_Start_Receive_DMA>
 800314c:	0003      	movs	r3, r0
 800314e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003150:	197b      	adds	r3, r7, r5
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d124      	bne.n	80031a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315c:	2b01      	cmp	r3, #1
 800315e:	d11c      	bne.n	800319a <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2210      	movs	r2, #16
 8003166:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003168:	f3ef 8310 	mrs	r3, PRIMASK
 800316c:	617b      	str	r3, [r7, #20]
  return(result);
 800316e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003170:	623b      	str	r3, [r7, #32]
 8003172:	2301      	movs	r3, #1
 8003174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f383 8810 	msr	PRIMASK, r3
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2110      	movs	r1, #16
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	e003      	b.n	80031a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800319a:	2327      	movs	r3, #39	; 0x27
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80031a2:	2327      	movs	r3, #39	; 0x27
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	e000      	b.n	80031ac <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b00a      	add	sp, #40	; 0x28
 80031b2:	bdb0      	pop	{r4, r5, r7, pc}

080031b4 <__errno>:
 80031b4:	4b01      	ldr	r3, [pc, #4]	; (80031bc <__errno+0x8>)
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	4770      	bx	lr
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	20000014 	.word	0x20000014

080031c0 <__libc_init_array>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	2600      	movs	r6, #0
 80031c4:	4d0c      	ldr	r5, [pc, #48]	; (80031f8 <__libc_init_array+0x38>)
 80031c6:	4c0d      	ldr	r4, [pc, #52]	; (80031fc <__libc_init_array+0x3c>)
 80031c8:	1b64      	subs	r4, r4, r5
 80031ca:	10a4      	asrs	r4, r4, #2
 80031cc:	42a6      	cmp	r6, r4
 80031ce:	d109      	bne.n	80031e4 <__libc_init_array+0x24>
 80031d0:	2600      	movs	r6, #0
 80031d2:	f000 fc9d 	bl	8003b10 <_init>
 80031d6:	4d0a      	ldr	r5, [pc, #40]	; (8003200 <__libc_init_array+0x40>)
 80031d8:	4c0a      	ldr	r4, [pc, #40]	; (8003204 <__libc_init_array+0x44>)
 80031da:	1b64      	subs	r4, r4, r5
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	42a6      	cmp	r6, r4
 80031e0:	d105      	bne.n	80031ee <__libc_init_array+0x2e>
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
 80031e4:	00b3      	lsls	r3, r6, #2
 80031e6:	58eb      	ldr	r3, [r5, r3]
 80031e8:	4798      	blx	r3
 80031ea:	3601      	adds	r6, #1
 80031ec:	e7ee      	b.n	80031cc <__libc_init_array+0xc>
 80031ee:	00b3      	lsls	r3, r6, #2
 80031f0:	58eb      	ldr	r3, [r5, r3]
 80031f2:	4798      	blx	r3
 80031f4:	3601      	adds	r6, #1
 80031f6:	e7f2      	b.n	80031de <__libc_init_array+0x1e>
 80031f8:	08003c24 	.word	0x08003c24
 80031fc:	08003c24 	.word	0x08003c24
 8003200:	08003c24 	.word	0x08003c24
 8003204:	08003c28 	.word	0x08003c28

08003208 <memcpy>:
 8003208:	2300      	movs	r3, #0
 800320a:	b510      	push	{r4, lr}
 800320c:	429a      	cmp	r2, r3
 800320e:	d100      	bne.n	8003212 <memcpy+0xa>
 8003210:	bd10      	pop	{r4, pc}
 8003212:	5ccc      	ldrb	r4, [r1, r3]
 8003214:	54c4      	strb	r4, [r0, r3]
 8003216:	3301      	adds	r3, #1
 8003218:	e7f8      	b.n	800320c <memcpy+0x4>

0800321a <memset>:
 800321a:	0003      	movs	r3, r0
 800321c:	1882      	adds	r2, r0, r2
 800321e:	4293      	cmp	r3, r2
 8003220:	d100      	bne.n	8003224 <memset+0xa>
 8003222:	4770      	bx	lr
 8003224:	7019      	strb	r1, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	e7f9      	b.n	800321e <memset+0x4>
	...

0800322c <siprintf>:
 800322c:	b40e      	push	{r1, r2, r3}
 800322e:	b500      	push	{lr}
 8003230:	490b      	ldr	r1, [pc, #44]	; (8003260 <siprintf+0x34>)
 8003232:	b09c      	sub	sp, #112	; 0x70
 8003234:	ab1d      	add	r3, sp, #116	; 0x74
 8003236:	9002      	str	r0, [sp, #8]
 8003238:	9006      	str	r0, [sp, #24]
 800323a:	9107      	str	r1, [sp, #28]
 800323c:	9104      	str	r1, [sp, #16]
 800323e:	4809      	ldr	r0, [pc, #36]	; (8003264 <siprintf+0x38>)
 8003240:	4909      	ldr	r1, [pc, #36]	; (8003268 <siprintf+0x3c>)
 8003242:	cb04      	ldmia	r3!, {r2}
 8003244:	9105      	str	r1, [sp, #20]
 8003246:	6800      	ldr	r0, [r0, #0]
 8003248:	a902      	add	r1, sp, #8
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	f000 f882 	bl	8003354 <_svfiprintf_r>
 8003250:	2300      	movs	r3, #0
 8003252:	9a02      	ldr	r2, [sp, #8]
 8003254:	7013      	strb	r3, [r2, #0]
 8003256:	b01c      	add	sp, #112	; 0x70
 8003258:	bc08      	pop	{r3}
 800325a:	b003      	add	sp, #12
 800325c:	4718      	bx	r3
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	7fffffff 	.word	0x7fffffff
 8003264:	20000014 	.word	0x20000014
 8003268:	ffff0208 	.word	0xffff0208

0800326c <strncmp>:
 800326c:	b530      	push	{r4, r5, lr}
 800326e:	0005      	movs	r5, r0
 8003270:	1e10      	subs	r0, r2, #0
 8003272:	d008      	beq.n	8003286 <strncmp+0x1a>
 8003274:	2400      	movs	r4, #0
 8003276:	3a01      	subs	r2, #1
 8003278:	5d2b      	ldrb	r3, [r5, r4]
 800327a:	5d08      	ldrb	r0, [r1, r4]
 800327c:	4283      	cmp	r3, r0
 800327e:	d101      	bne.n	8003284 <strncmp+0x18>
 8003280:	4294      	cmp	r4, r2
 8003282:	d101      	bne.n	8003288 <strncmp+0x1c>
 8003284:	1a18      	subs	r0, r3, r0
 8003286:	bd30      	pop	{r4, r5, pc}
 8003288:	3401      	adds	r4, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f4      	bne.n	8003278 <strncmp+0xc>
 800328e:	e7f9      	b.n	8003284 <strncmp+0x18>

08003290 <__ssputs_r>:
 8003290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003292:	688e      	ldr	r6, [r1, #8]
 8003294:	b085      	sub	sp, #20
 8003296:	0007      	movs	r7, r0
 8003298:	000c      	movs	r4, r1
 800329a:	9203      	str	r2, [sp, #12]
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	429e      	cmp	r6, r3
 80032a0:	d83c      	bhi.n	800331c <__ssputs_r+0x8c>
 80032a2:	2390      	movs	r3, #144	; 0x90
 80032a4:	898a      	ldrh	r2, [r1, #12]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	421a      	tst	r2, r3
 80032aa:	d034      	beq.n	8003316 <__ssputs_r+0x86>
 80032ac:	6909      	ldr	r1, [r1, #16]
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	6960      	ldr	r0, [r4, #20]
 80032b2:	1a5b      	subs	r3, r3, r1
 80032b4:	9302      	str	r3, [sp, #8]
 80032b6:	2303      	movs	r3, #3
 80032b8:	4343      	muls	r3, r0
 80032ba:	0fdd      	lsrs	r5, r3, #31
 80032bc:	18ed      	adds	r5, r5, r3
 80032be:	9b01      	ldr	r3, [sp, #4]
 80032c0:	9802      	ldr	r0, [sp, #8]
 80032c2:	3301      	adds	r3, #1
 80032c4:	181b      	adds	r3, r3, r0
 80032c6:	106d      	asrs	r5, r5, #1
 80032c8:	42ab      	cmp	r3, r5
 80032ca:	d900      	bls.n	80032ce <__ssputs_r+0x3e>
 80032cc:	001d      	movs	r5, r3
 80032ce:	0553      	lsls	r3, r2, #21
 80032d0:	d532      	bpl.n	8003338 <__ssputs_r+0xa8>
 80032d2:	0029      	movs	r1, r5
 80032d4:	0038      	movs	r0, r7
 80032d6:	f000 fb49 	bl	800396c <_malloc_r>
 80032da:	1e06      	subs	r6, r0, #0
 80032dc:	d109      	bne.n	80032f2 <__ssputs_r+0x62>
 80032de:	230c      	movs	r3, #12
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	2340      	movs	r3, #64	; 0x40
 80032e4:	2001      	movs	r0, #1
 80032e6:	89a2      	ldrh	r2, [r4, #12]
 80032e8:	4240      	negs	r0, r0
 80032ea:	4313      	orrs	r3, r2
 80032ec:	81a3      	strh	r3, [r4, #12]
 80032ee:	b005      	add	sp, #20
 80032f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f2:	9a02      	ldr	r2, [sp, #8]
 80032f4:	6921      	ldr	r1, [r4, #16]
 80032f6:	f7ff ff87 	bl	8003208 <memcpy>
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	4a14      	ldr	r2, [pc, #80]	; (8003350 <__ssputs_r+0xc0>)
 80032fe:	401a      	ands	r2, r3
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	4313      	orrs	r3, r2
 8003304:	81a3      	strh	r3, [r4, #12]
 8003306:	9b02      	ldr	r3, [sp, #8]
 8003308:	6126      	str	r6, [r4, #16]
 800330a:	18f6      	adds	r6, r6, r3
 800330c:	6026      	str	r6, [r4, #0]
 800330e:	6165      	str	r5, [r4, #20]
 8003310:	9e01      	ldr	r6, [sp, #4]
 8003312:	1aed      	subs	r5, r5, r3
 8003314:	60a5      	str	r5, [r4, #8]
 8003316:	9b01      	ldr	r3, [sp, #4]
 8003318:	429e      	cmp	r6, r3
 800331a:	d900      	bls.n	800331e <__ssputs_r+0x8e>
 800331c:	9e01      	ldr	r6, [sp, #4]
 800331e:	0032      	movs	r2, r6
 8003320:	9903      	ldr	r1, [sp, #12]
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	f000 faa3 	bl	800386e <memmove>
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	2000      	movs	r0, #0
 800332c:	1b9b      	subs	r3, r3, r6
 800332e:	60a3      	str	r3, [r4, #8]
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	199e      	adds	r6, r3, r6
 8003334:	6026      	str	r6, [r4, #0]
 8003336:	e7da      	b.n	80032ee <__ssputs_r+0x5e>
 8003338:	002a      	movs	r2, r5
 800333a:	0038      	movs	r0, r7
 800333c:	f000 fb8c 	bl	8003a58 <_realloc_r>
 8003340:	1e06      	subs	r6, r0, #0
 8003342:	d1e0      	bne.n	8003306 <__ssputs_r+0x76>
 8003344:	0038      	movs	r0, r7
 8003346:	6921      	ldr	r1, [r4, #16]
 8003348:	f000 faa4 	bl	8003894 <_free_r>
 800334c:	e7c7      	b.n	80032de <__ssputs_r+0x4e>
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	fffffb7f 	.word	0xfffffb7f

08003354 <_svfiprintf_r>:
 8003354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003356:	b0a1      	sub	sp, #132	; 0x84
 8003358:	9003      	str	r0, [sp, #12]
 800335a:	001d      	movs	r5, r3
 800335c:	898b      	ldrh	r3, [r1, #12]
 800335e:	000f      	movs	r7, r1
 8003360:	0016      	movs	r6, r2
 8003362:	061b      	lsls	r3, r3, #24
 8003364:	d511      	bpl.n	800338a <_svfiprintf_r+0x36>
 8003366:	690b      	ldr	r3, [r1, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10e      	bne.n	800338a <_svfiprintf_r+0x36>
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	f000 fafd 	bl	800396c <_malloc_r>
 8003372:	6038      	str	r0, [r7, #0]
 8003374:	6138      	str	r0, [r7, #16]
 8003376:	2800      	cmp	r0, #0
 8003378:	d105      	bne.n	8003386 <_svfiprintf_r+0x32>
 800337a:	230c      	movs	r3, #12
 800337c:	9a03      	ldr	r2, [sp, #12]
 800337e:	3801      	subs	r0, #1
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	b021      	add	sp, #132	; 0x84
 8003384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003386:	2340      	movs	r3, #64	; 0x40
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	2300      	movs	r3, #0
 800338c:	ac08      	add	r4, sp, #32
 800338e:	6163      	str	r3, [r4, #20]
 8003390:	3320      	adds	r3, #32
 8003392:	7663      	strb	r3, [r4, #25]
 8003394:	3310      	adds	r3, #16
 8003396:	76a3      	strb	r3, [r4, #26]
 8003398:	9507      	str	r5, [sp, #28]
 800339a:	0035      	movs	r5, r6
 800339c:	782b      	ldrb	r3, [r5, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <_svfiprintf_r+0x52>
 80033a2:	2b25      	cmp	r3, #37	; 0x25
 80033a4:	d147      	bne.n	8003436 <_svfiprintf_r+0xe2>
 80033a6:	1bab      	subs	r3, r5, r6
 80033a8:	9305      	str	r3, [sp, #20]
 80033aa:	42b5      	cmp	r5, r6
 80033ac:	d00c      	beq.n	80033c8 <_svfiprintf_r+0x74>
 80033ae:	0032      	movs	r2, r6
 80033b0:	0039      	movs	r1, r7
 80033b2:	9803      	ldr	r0, [sp, #12]
 80033b4:	f7ff ff6c 	bl	8003290 <__ssputs_r>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d100      	bne.n	80033be <_svfiprintf_r+0x6a>
 80033bc:	e0ae      	b.n	800351c <_svfiprintf_r+0x1c8>
 80033be:	6962      	ldr	r2, [r4, #20]
 80033c0:	9b05      	ldr	r3, [sp, #20]
 80033c2:	4694      	mov	ip, r2
 80033c4:	4463      	add	r3, ip
 80033c6:	6163      	str	r3, [r4, #20]
 80033c8:	782b      	ldrb	r3, [r5, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d100      	bne.n	80033d0 <_svfiprintf_r+0x7c>
 80033ce:	e0a5      	b.n	800351c <_svfiprintf_r+0x1c8>
 80033d0:	2201      	movs	r2, #1
 80033d2:	2300      	movs	r3, #0
 80033d4:	4252      	negs	r2, r2
 80033d6:	6062      	str	r2, [r4, #4]
 80033d8:	a904      	add	r1, sp, #16
 80033da:	3254      	adds	r2, #84	; 0x54
 80033dc:	1852      	adds	r2, r2, r1
 80033de:	1c6e      	adds	r6, r5, #1
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	60e3      	str	r3, [r4, #12]
 80033e4:	60a3      	str	r3, [r4, #8]
 80033e6:	7013      	strb	r3, [r2, #0]
 80033e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80033ea:	2205      	movs	r2, #5
 80033ec:	7831      	ldrb	r1, [r6, #0]
 80033ee:	4854      	ldr	r0, [pc, #336]	; (8003540 <_svfiprintf_r+0x1ec>)
 80033f0:	f000 fa32 	bl	8003858 <memchr>
 80033f4:	1c75      	adds	r5, r6, #1
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d11f      	bne.n	800343a <_svfiprintf_r+0xe6>
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	06d3      	lsls	r3, r2, #27
 80033fe:	d504      	bpl.n	800340a <_svfiprintf_r+0xb6>
 8003400:	2353      	movs	r3, #83	; 0x53
 8003402:	a904      	add	r1, sp, #16
 8003404:	185b      	adds	r3, r3, r1
 8003406:	2120      	movs	r1, #32
 8003408:	7019      	strb	r1, [r3, #0]
 800340a:	0713      	lsls	r3, r2, #28
 800340c:	d504      	bpl.n	8003418 <_svfiprintf_r+0xc4>
 800340e:	2353      	movs	r3, #83	; 0x53
 8003410:	a904      	add	r1, sp, #16
 8003412:	185b      	adds	r3, r3, r1
 8003414:	212b      	movs	r1, #43	; 0x2b
 8003416:	7019      	strb	r1, [r3, #0]
 8003418:	7833      	ldrb	r3, [r6, #0]
 800341a:	2b2a      	cmp	r3, #42	; 0x2a
 800341c:	d016      	beq.n	800344c <_svfiprintf_r+0xf8>
 800341e:	0035      	movs	r5, r6
 8003420:	2100      	movs	r1, #0
 8003422:	200a      	movs	r0, #10
 8003424:	68e3      	ldr	r3, [r4, #12]
 8003426:	782a      	ldrb	r2, [r5, #0]
 8003428:	1c6e      	adds	r6, r5, #1
 800342a:	3a30      	subs	r2, #48	; 0x30
 800342c:	2a09      	cmp	r2, #9
 800342e:	d94e      	bls.n	80034ce <_svfiprintf_r+0x17a>
 8003430:	2900      	cmp	r1, #0
 8003432:	d111      	bne.n	8003458 <_svfiprintf_r+0x104>
 8003434:	e017      	b.n	8003466 <_svfiprintf_r+0x112>
 8003436:	3501      	adds	r5, #1
 8003438:	e7b0      	b.n	800339c <_svfiprintf_r+0x48>
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <_svfiprintf_r+0x1ec>)
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	1ac0      	subs	r0, r0, r3
 8003440:	2301      	movs	r3, #1
 8003442:	4083      	lsls	r3, r0
 8003444:	4313      	orrs	r3, r2
 8003446:	002e      	movs	r6, r5
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	e7ce      	b.n	80033ea <_svfiprintf_r+0x96>
 800344c:	9b07      	ldr	r3, [sp, #28]
 800344e:	1d19      	adds	r1, r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	9107      	str	r1, [sp, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	db01      	blt.n	800345c <_svfiprintf_r+0x108>
 8003458:	930b      	str	r3, [sp, #44]	; 0x2c
 800345a:	e004      	b.n	8003466 <_svfiprintf_r+0x112>
 800345c:	425b      	negs	r3, r3
 800345e:	60e3      	str	r3, [r4, #12]
 8003460:	2302      	movs	r3, #2
 8003462:	4313      	orrs	r3, r2
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	782b      	ldrb	r3, [r5, #0]
 8003468:	2b2e      	cmp	r3, #46	; 0x2e
 800346a:	d10a      	bne.n	8003482 <_svfiprintf_r+0x12e>
 800346c:	786b      	ldrb	r3, [r5, #1]
 800346e:	2b2a      	cmp	r3, #42	; 0x2a
 8003470:	d135      	bne.n	80034de <_svfiprintf_r+0x18a>
 8003472:	9b07      	ldr	r3, [sp, #28]
 8003474:	3502      	adds	r5, #2
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	9207      	str	r2, [sp, #28]
 800347c:	2b00      	cmp	r3, #0
 800347e:	db2b      	blt.n	80034d8 <_svfiprintf_r+0x184>
 8003480:	9309      	str	r3, [sp, #36]	; 0x24
 8003482:	4e30      	ldr	r6, [pc, #192]	; (8003544 <_svfiprintf_r+0x1f0>)
 8003484:	2203      	movs	r2, #3
 8003486:	0030      	movs	r0, r6
 8003488:	7829      	ldrb	r1, [r5, #0]
 800348a:	f000 f9e5 	bl	8003858 <memchr>
 800348e:	2800      	cmp	r0, #0
 8003490:	d006      	beq.n	80034a0 <_svfiprintf_r+0x14c>
 8003492:	2340      	movs	r3, #64	; 0x40
 8003494:	1b80      	subs	r0, r0, r6
 8003496:	4083      	lsls	r3, r0
 8003498:	6822      	ldr	r2, [r4, #0]
 800349a:	3501      	adds	r5, #1
 800349c:	4313      	orrs	r3, r2
 800349e:	6023      	str	r3, [r4, #0]
 80034a0:	7829      	ldrb	r1, [r5, #0]
 80034a2:	2206      	movs	r2, #6
 80034a4:	4828      	ldr	r0, [pc, #160]	; (8003548 <_svfiprintf_r+0x1f4>)
 80034a6:	1c6e      	adds	r6, r5, #1
 80034a8:	7621      	strb	r1, [r4, #24]
 80034aa:	f000 f9d5 	bl	8003858 <memchr>
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d03c      	beq.n	800352c <_svfiprintf_r+0x1d8>
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <_svfiprintf_r+0x1f8>)
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d125      	bne.n	8003504 <_svfiprintf_r+0x1b0>
 80034b8:	2207      	movs	r2, #7
 80034ba:	9b07      	ldr	r3, [sp, #28]
 80034bc:	3307      	adds	r3, #7
 80034be:	4393      	bics	r3, r2
 80034c0:	3308      	adds	r3, #8
 80034c2:	9307      	str	r3, [sp, #28]
 80034c4:	6963      	ldr	r3, [r4, #20]
 80034c6:	9a04      	ldr	r2, [sp, #16]
 80034c8:	189b      	adds	r3, r3, r2
 80034ca:	6163      	str	r3, [r4, #20]
 80034cc:	e765      	b.n	800339a <_svfiprintf_r+0x46>
 80034ce:	4343      	muls	r3, r0
 80034d0:	0035      	movs	r5, r6
 80034d2:	2101      	movs	r1, #1
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	e7a6      	b.n	8003426 <_svfiprintf_r+0xd2>
 80034d8:	2301      	movs	r3, #1
 80034da:	425b      	negs	r3, r3
 80034dc:	e7d0      	b.n	8003480 <_svfiprintf_r+0x12c>
 80034de:	2300      	movs	r3, #0
 80034e0:	200a      	movs	r0, #10
 80034e2:	001a      	movs	r2, r3
 80034e4:	3501      	adds	r5, #1
 80034e6:	6063      	str	r3, [r4, #4]
 80034e8:	7829      	ldrb	r1, [r5, #0]
 80034ea:	1c6e      	adds	r6, r5, #1
 80034ec:	3930      	subs	r1, #48	; 0x30
 80034ee:	2909      	cmp	r1, #9
 80034f0:	d903      	bls.n	80034fa <_svfiprintf_r+0x1a6>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0c5      	beq.n	8003482 <_svfiprintf_r+0x12e>
 80034f6:	9209      	str	r2, [sp, #36]	; 0x24
 80034f8:	e7c3      	b.n	8003482 <_svfiprintf_r+0x12e>
 80034fa:	4342      	muls	r2, r0
 80034fc:	0035      	movs	r5, r6
 80034fe:	2301      	movs	r3, #1
 8003500:	1852      	adds	r2, r2, r1
 8003502:	e7f1      	b.n	80034e8 <_svfiprintf_r+0x194>
 8003504:	ab07      	add	r3, sp, #28
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	003a      	movs	r2, r7
 800350a:	0021      	movs	r1, r4
 800350c:	4b10      	ldr	r3, [pc, #64]	; (8003550 <_svfiprintf_r+0x1fc>)
 800350e:	9803      	ldr	r0, [sp, #12]
 8003510:	e000      	b.n	8003514 <_svfiprintf_r+0x1c0>
 8003512:	bf00      	nop
 8003514:	9004      	str	r0, [sp, #16]
 8003516:	9b04      	ldr	r3, [sp, #16]
 8003518:	3301      	adds	r3, #1
 800351a:	d1d3      	bne.n	80034c4 <_svfiprintf_r+0x170>
 800351c:	89bb      	ldrh	r3, [r7, #12]
 800351e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003520:	065b      	lsls	r3, r3, #25
 8003522:	d400      	bmi.n	8003526 <_svfiprintf_r+0x1d2>
 8003524:	e72d      	b.n	8003382 <_svfiprintf_r+0x2e>
 8003526:	2001      	movs	r0, #1
 8003528:	4240      	negs	r0, r0
 800352a:	e72a      	b.n	8003382 <_svfiprintf_r+0x2e>
 800352c:	ab07      	add	r3, sp, #28
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	003a      	movs	r2, r7
 8003532:	0021      	movs	r1, r4
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <_svfiprintf_r+0x1fc>)
 8003536:	9803      	ldr	r0, [sp, #12]
 8003538:	f000 f87c 	bl	8003634 <_printf_i>
 800353c:	e7ea      	b.n	8003514 <_svfiprintf_r+0x1c0>
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	08003bf0 	.word	0x08003bf0
 8003544:	08003bf6 	.word	0x08003bf6
 8003548:	08003bfa 	.word	0x08003bfa
 800354c:	00000000 	.word	0x00000000
 8003550:	08003291 	.word	0x08003291

08003554 <_printf_common>:
 8003554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003556:	0015      	movs	r5, r2
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	688a      	ldr	r2, [r1, #8]
 800355c:	690b      	ldr	r3, [r1, #16]
 800355e:	000c      	movs	r4, r1
 8003560:	9000      	str	r0, [sp, #0]
 8003562:	4293      	cmp	r3, r2
 8003564:	da00      	bge.n	8003568 <_printf_common+0x14>
 8003566:	0013      	movs	r3, r2
 8003568:	0022      	movs	r2, r4
 800356a:	602b      	str	r3, [r5, #0]
 800356c:	3243      	adds	r2, #67	; 0x43
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	2a00      	cmp	r2, #0
 8003572:	d001      	beq.n	8003578 <_printf_common+0x24>
 8003574:	3301      	adds	r3, #1
 8003576:	602b      	str	r3, [r5, #0]
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	069b      	lsls	r3, r3, #26
 800357c:	d502      	bpl.n	8003584 <_printf_common+0x30>
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	3302      	adds	r3, #2
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	2306      	movs	r3, #6
 8003588:	0017      	movs	r7, r2
 800358a:	401f      	ands	r7, r3
 800358c:	421a      	tst	r2, r3
 800358e:	d027      	beq.n	80035e0 <_printf_common+0x8c>
 8003590:	0023      	movs	r3, r4
 8003592:	3343      	adds	r3, #67	; 0x43
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	1e5a      	subs	r2, r3, #1
 8003598:	4193      	sbcs	r3, r2
 800359a:	6822      	ldr	r2, [r4, #0]
 800359c:	0692      	lsls	r2, r2, #26
 800359e:	d430      	bmi.n	8003602 <_printf_common+0xae>
 80035a0:	0022      	movs	r2, r4
 80035a2:	9901      	ldr	r1, [sp, #4]
 80035a4:	9800      	ldr	r0, [sp, #0]
 80035a6:	9e08      	ldr	r6, [sp, #32]
 80035a8:	3243      	adds	r2, #67	; 0x43
 80035aa:	47b0      	blx	r6
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d025      	beq.n	80035fc <_printf_common+0xa8>
 80035b0:	2306      	movs	r3, #6
 80035b2:	6820      	ldr	r0, [r4, #0]
 80035b4:	682a      	ldr	r2, [r5, #0]
 80035b6:	68e1      	ldr	r1, [r4, #12]
 80035b8:	2500      	movs	r5, #0
 80035ba:	4003      	ands	r3, r0
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d103      	bne.n	80035c8 <_printf_common+0x74>
 80035c0:	1a8d      	subs	r5, r1, r2
 80035c2:	43eb      	mvns	r3, r5
 80035c4:	17db      	asrs	r3, r3, #31
 80035c6:	401d      	ands	r5, r3
 80035c8:	68a3      	ldr	r3, [r4, #8]
 80035ca:	6922      	ldr	r2, [r4, #16]
 80035cc:	4293      	cmp	r3, r2
 80035ce:	dd01      	ble.n	80035d4 <_printf_common+0x80>
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	18ed      	adds	r5, r5, r3
 80035d4:	2700      	movs	r7, #0
 80035d6:	42bd      	cmp	r5, r7
 80035d8:	d120      	bne.n	800361c <_printf_common+0xc8>
 80035da:	2000      	movs	r0, #0
 80035dc:	e010      	b.n	8003600 <_printf_common+0xac>
 80035de:	3701      	adds	r7, #1
 80035e0:	68e3      	ldr	r3, [r4, #12]
 80035e2:	682a      	ldr	r2, [r5, #0]
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	42bb      	cmp	r3, r7
 80035e8:	ddd2      	ble.n	8003590 <_printf_common+0x3c>
 80035ea:	0022      	movs	r2, r4
 80035ec:	2301      	movs	r3, #1
 80035ee:	9901      	ldr	r1, [sp, #4]
 80035f0:	9800      	ldr	r0, [sp, #0]
 80035f2:	9e08      	ldr	r6, [sp, #32]
 80035f4:	3219      	adds	r2, #25
 80035f6:	47b0      	blx	r6
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d1f0      	bne.n	80035de <_printf_common+0x8a>
 80035fc:	2001      	movs	r0, #1
 80035fe:	4240      	negs	r0, r0
 8003600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003602:	2030      	movs	r0, #48	; 0x30
 8003604:	18e1      	adds	r1, r4, r3
 8003606:	3143      	adds	r1, #67	; 0x43
 8003608:	7008      	strb	r0, [r1, #0]
 800360a:	0021      	movs	r1, r4
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	3145      	adds	r1, #69	; 0x45
 8003610:	7809      	ldrb	r1, [r1, #0]
 8003612:	18a2      	adds	r2, r4, r2
 8003614:	3243      	adds	r2, #67	; 0x43
 8003616:	3302      	adds	r3, #2
 8003618:	7011      	strb	r1, [r2, #0]
 800361a:	e7c1      	b.n	80035a0 <_printf_common+0x4c>
 800361c:	0022      	movs	r2, r4
 800361e:	2301      	movs	r3, #1
 8003620:	9901      	ldr	r1, [sp, #4]
 8003622:	9800      	ldr	r0, [sp, #0]
 8003624:	9e08      	ldr	r6, [sp, #32]
 8003626:	321a      	adds	r2, #26
 8003628:	47b0      	blx	r6
 800362a:	1c43      	adds	r3, r0, #1
 800362c:	d0e6      	beq.n	80035fc <_printf_common+0xa8>
 800362e:	3701      	adds	r7, #1
 8003630:	e7d1      	b.n	80035d6 <_printf_common+0x82>
	...

08003634 <_printf_i>:
 8003634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003636:	b08b      	sub	sp, #44	; 0x2c
 8003638:	9206      	str	r2, [sp, #24]
 800363a:	000a      	movs	r2, r1
 800363c:	3243      	adds	r2, #67	; 0x43
 800363e:	9307      	str	r3, [sp, #28]
 8003640:	9005      	str	r0, [sp, #20]
 8003642:	9204      	str	r2, [sp, #16]
 8003644:	7e0a      	ldrb	r2, [r1, #24]
 8003646:	000c      	movs	r4, r1
 8003648:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800364a:	2a78      	cmp	r2, #120	; 0x78
 800364c:	d807      	bhi.n	800365e <_printf_i+0x2a>
 800364e:	2a62      	cmp	r2, #98	; 0x62
 8003650:	d809      	bhi.n	8003666 <_printf_i+0x32>
 8003652:	2a00      	cmp	r2, #0
 8003654:	d100      	bne.n	8003658 <_printf_i+0x24>
 8003656:	e0c1      	b.n	80037dc <_printf_i+0x1a8>
 8003658:	2a58      	cmp	r2, #88	; 0x58
 800365a:	d100      	bne.n	800365e <_printf_i+0x2a>
 800365c:	e08c      	b.n	8003778 <_printf_i+0x144>
 800365e:	0026      	movs	r6, r4
 8003660:	3642      	adds	r6, #66	; 0x42
 8003662:	7032      	strb	r2, [r6, #0]
 8003664:	e022      	b.n	80036ac <_printf_i+0x78>
 8003666:	0010      	movs	r0, r2
 8003668:	3863      	subs	r0, #99	; 0x63
 800366a:	2815      	cmp	r0, #21
 800366c:	d8f7      	bhi.n	800365e <_printf_i+0x2a>
 800366e:	f7fc fd53 	bl	8000118 <__gnu_thumb1_case_shi>
 8003672:	0016      	.short	0x0016
 8003674:	fff6001f 	.word	0xfff6001f
 8003678:	fff6fff6 	.word	0xfff6fff6
 800367c:	001ffff6 	.word	0x001ffff6
 8003680:	fff6fff6 	.word	0xfff6fff6
 8003684:	fff6fff6 	.word	0xfff6fff6
 8003688:	003600a8 	.word	0x003600a8
 800368c:	fff6009a 	.word	0xfff6009a
 8003690:	00b9fff6 	.word	0x00b9fff6
 8003694:	0036fff6 	.word	0x0036fff6
 8003698:	fff6fff6 	.word	0xfff6fff6
 800369c:	009e      	.short	0x009e
 800369e:	0026      	movs	r6, r4
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	3642      	adds	r6, #66	; 0x42
 80036a4:	1d11      	adds	r1, r2, #4
 80036a6:	6019      	str	r1, [r3, #0]
 80036a8:	6813      	ldr	r3, [r2, #0]
 80036aa:	7033      	strb	r3, [r6, #0]
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0a7      	b.n	8003800 <_printf_i+0x1cc>
 80036b0:	6808      	ldr	r0, [r1, #0]
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	1d0a      	adds	r2, r1, #4
 80036b6:	0605      	lsls	r5, r0, #24
 80036b8:	d50b      	bpl.n	80036d2 <_printf_i+0x9e>
 80036ba:	680d      	ldr	r5, [r1, #0]
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	2d00      	cmp	r5, #0
 80036c0:	da03      	bge.n	80036ca <_printf_i+0x96>
 80036c2:	232d      	movs	r3, #45	; 0x2d
 80036c4:	9a04      	ldr	r2, [sp, #16]
 80036c6:	426d      	negs	r5, r5
 80036c8:	7013      	strb	r3, [r2, #0]
 80036ca:	4b61      	ldr	r3, [pc, #388]	; (8003850 <_printf_i+0x21c>)
 80036cc:	270a      	movs	r7, #10
 80036ce:	9303      	str	r3, [sp, #12]
 80036d0:	e01b      	b.n	800370a <_printf_i+0xd6>
 80036d2:	680d      	ldr	r5, [r1, #0]
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	0641      	lsls	r1, r0, #25
 80036d8:	d5f1      	bpl.n	80036be <_printf_i+0x8a>
 80036da:	b22d      	sxth	r5, r5
 80036dc:	e7ef      	b.n	80036be <_printf_i+0x8a>
 80036de:	680d      	ldr	r5, [r1, #0]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	1d08      	adds	r0, r1, #4
 80036e4:	6018      	str	r0, [r3, #0]
 80036e6:	062e      	lsls	r6, r5, #24
 80036e8:	d501      	bpl.n	80036ee <_printf_i+0xba>
 80036ea:	680d      	ldr	r5, [r1, #0]
 80036ec:	e003      	b.n	80036f6 <_printf_i+0xc2>
 80036ee:	066d      	lsls	r5, r5, #25
 80036f0:	d5fb      	bpl.n	80036ea <_printf_i+0xb6>
 80036f2:	680d      	ldr	r5, [r1, #0]
 80036f4:	b2ad      	uxth	r5, r5
 80036f6:	4b56      	ldr	r3, [pc, #344]	; (8003850 <_printf_i+0x21c>)
 80036f8:	2708      	movs	r7, #8
 80036fa:	9303      	str	r3, [sp, #12]
 80036fc:	2a6f      	cmp	r2, #111	; 0x6f
 80036fe:	d000      	beq.n	8003702 <_printf_i+0xce>
 8003700:	3702      	adds	r7, #2
 8003702:	0023      	movs	r3, r4
 8003704:	2200      	movs	r2, #0
 8003706:	3343      	adds	r3, #67	; 0x43
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	6863      	ldr	r3, [r4, #4]
 800370c:	60a3      	str	r3, [r4, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	db03      	blt.n	800371a <_printf_i+0xe6>
 8003712:	2204      	movs	r2, #4
 8003714:	6821      	ldr	r1, [r4, #0]
 8003716:	4391      	bics	r1, r2
 8003718:	6021      	str	r1, [r4, #0]
 800371a:	2d00      	cmp	r5, #0
 800371c:	d102      	bne.n	8003724 <_printf_i+0xf0>
 800371e:	9e04      	ldr	r6, [sp, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00c      	beq.n	800373e <_printf_i+0x10a>
 8003724:	9e04      	ldr	r6, [sp, #16]
 8003726:	0028      	movs	r0, r5
 8003728:	0039      	movs	r1, r7
 800372a:	f7fc fd85 	bl	8000238 <__aeabi_uidivmod>
 800372e:	9b03      	ldr	r3, [sp, #12]
 8003730:	3e01      	subs	r6, #1
 8003732:	5c5b      	ldrb	r3, [r3, r1]
 8003734:	7033      	strb	r3, [r6, #0]
 8003736:	002b      	movs	r3, r5
 8003738:	0005      	movs	r5, r0
 800373a:	429f      	cmp	r7, r3
 800373c:	d9f3      	bls.n	8003726 <_printf_i+0xf2>
 800373e:	2f08      	cmp	r7, #8
 8003740:	d109      	bne.n	8003756 <_printf_i+0x122>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	07db      	lsls	r3, r3, #31
 8003746:	d506      	bpl.n	8003756 <_printf_i+0x122>
 8003748:	6863      	ldr	r3, [r4, #4]
 800374a:	6922      	ldr	r2, [r4, #16]
 800374c:	4293      	cmp	r3, r2
 800374e:	dc02      	bgt.n	8003756 <_printf_i+0x122>
 8003750:	2330      	movs	r3, #48	; 0x30
 8003752:	3e01      	subs	r6, #1
 8003754:	7033      	strb	r3, [r6, #0]
 8003756:	9b04      	ldr	r3, [sp, #16]
 8003758:	1b9b      	subs	r3, r3, r6
 800375a:	6123      	str	r3, [r4, #16]
 800375c:	9b07      	ldr	r3, [sp, #28]
 800375e:	0021      	movs	r1, r4
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	9805      	ldr	r0, [sp, #20]
 8003764:	9b06      	ldr	r3, [sp, #24]
 8003766:	aa09      	add	r2, sp, #36	; 0x24
 8003768:	f7ff fef4 	bl	8003554 <_printf_common>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d14c      	bne.n	800380a <_printf_i+0x1d6>
 8003770:	2001      	movs	r0, #1
 8003772:	4240      	negs	r0, r0
 8003774:	b00b      	add	sp, #44	; 0x2c
 8003776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003778:	3145      	adds	r1, #69	; 0x45
 800377a:	700a      	strb	r2, [r1, #0]
 800377c:	4a34      	ldr	r2, [pc, #208]	; (8003850 <_printf_i+0x21c>)
 800377e:	9203      	str	r2, [sp, #12]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	6821      	ldr	r1, [r4, #0]
 8003784:	ca20      	ldmia	r2!, {r5}
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	0608      	lsls	r0, r1, #24
 800378a:	d516      	bpl.n	80037ba <_printf_i+0x186>
 800378c:	07cb      	lsls	r3, r1, #31
 800378e:	d502      	bpl.n	8003796 <_printf_i+0x162>
 8003790:	2320      	movs	r3, #32
 8003792:	4319      	orrs	r1, r3
 8003794:	6021      	str	r1, [r4, #0]
 8003796:	2710      	movs	r7, #16
 8003798:	2d00      	cmp	r5, #0
 800379a:	d1b2      	bne.n	8003702 <_printf_i+0xce>
 800379c:	2320      	movs	r3, #32
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	439a      	bics	r2, r3
 80037a2:	6022      	str	r2, [r4, #0]
 80037a4:	e7ad      	b.n	8003702 <_printf_i+0xce>
 80037a6:	2220      	movs	r2, #32
 80037a8:	6809      	ldr	r1, [r1, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	6022      	str	r2, [r4, #0]
 80037ae:	0022      	movs	r2, r4
 80037b0:	2178      	movs	r1, #120	; 0x78
 80037b2:	3245      	adds	r2, #69	; 0x45
 80037b4:	7011      	strb	r1, [r2, #0]
 80037b6:	4a27      	ldr	r2, [pc, #156]	; (8003854 <_printf_i+0x220>)
 80037b8:	e7e1      	b.n	800377e <_printf_i+0x14a>
 80037ba:	0648      	lsls	r0, r1, #25
 80037bc:	d5e6      	bpl.n	800378c <_printf_i+0x158>
 80037be:	b2ad      	uxth	r5, r5
 80037c0:	e7e4      	b.n	800378c <_printf_i+0x158>
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	680d      	ldr	r5, [r1, #0]
 80037c6:	1d10      	adds	r0, r2, #4
 80037c8:	6949      	ldr	r1, [r1, #20]
 80037ca:	6018      	str	r0, [r3, #0]
 80037cc:	6813      	ldr	r3, [r2, #0]
 80037ce:	062e      	lsls	r6, r5, #24
 80037d0:	d501      	bpl.n	80037d6 <_printf_i+0x1a2>
 80037d2:	6019      	str	r1, [r3, #0]
 80037d4:	e002      	b.n	80037dc <_printf_i+0x1a8>
 80037d6:	066d      	lsls	r5, r5, #25
 80037d8:	d5fb      	bpl.n	80037d2 <_printf_i+0x19e>
 80037da:	8019      	strh	r1, [r3, #0]
 80037dc:	2300      	movs	r3, #0
 80037de:	9e04      	ldr	r6, [sp, #16]
 80037e0:	6123      	str	r3, [r4, #16]
 80037e2:	e7bb      	b.n	800375c <_printf_i+0x128>
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	1d11      	adds	r1, r2, #4
 80037e8:	6019      	str	r1, [r3, #0]
 80037ea:	6816      	ldr	r6, [r2, #0]
 80037ec:	2100      	movs	r1, #0
 80037ee:	0030      	movs	r0, r6
 80037f0:	6862      	ldr	r2, [r4, #4]
 80037f2:	f000 f831 	bl	8003858 <memchr>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d001      	beq.n	80037fe <_printf_i+0x1ca>
 80037fa:	1b80      	subs	r0, r0, r6
 80037fc:	6060      	str	r0, [r4, #4]
 80037fe:	6863      	ldr	r3, [r4, #4]
 8003800:	6123      	str	r3, [r4, #16]
 8003802:	2300      	movs	r3, #0
 8003804:	9a04      	ldr	r2, [sp, #16]
 8003806:	7013      	strb	r3, [r2, #0]
 8003808:	e7a8      	b.n	800375c <_printf_i+0x128>
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	0032      	movs	r2, r6
 800380e:	9906      	ldr	r1, [sp, #24]
 8003810:	9805      	ldr	r0, [sp, #20]
 8003812:	9d07      	ldr	r5, [sp, #28]
 8003814:	47a8      	blx	r5
 8003816:	1c43      	adds	r3, r0, #1
 8003818:	d0aa      	beq.n	8003770 <_printf_i+0x13c>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	079b      	lsls	r3, r3, #30
 800381e:	d415      	bmi.n	800384c <_printf_i+0x218>
 8003820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003822:	68e0      	ldr	r0, [r4, #12]
 8003824:	4298      	cmp	r0, r3
 8003826:	daa5      	bge.n	8003774 <_printf_i+0x140>
 8003828:	0018      	movs	r0, r3
 800382a:	e7a3      	b.n	8003774 <_printf_i+0x140>
 800382c:	0022      	movs	r2, r4
 800382e:	2301      	movs	r3, #1
 8003830:	9906      	ldr	r1, [sp, #24]
 8003832:	9805      	ldr	r0, [sp, #20]
 8003834:	9e07      	ldr	r6, [sp, #28]
 8003836:	3219      	adds	r2, #25
 8003838:	47b0      	blx	r6
 800383a:	1c43      	adds	r3, r0, #1
 800383c:	d098      	beq.n	8003770 <_printf_i+0x13c>
 800383e:	3501      	adds	r5, #1
 8003840:	68e3      	ldr	r3, [r4, #12]
 8003842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	42ab      	cmp	r3, r5
 8003848:	dcf0      	bgt.n	800382c <_printf_i+0x1f8>
 800384a:	e7e9      	b.n	8003820 <_printf_i+0x1ec>
 800384c:	2500      	movs	r5, #0
 800384e:	e7f7      	b.n	8003840 <_printf_i+0x20c>
 8003850:	08003c01 	.word	0x08003c01
 8003854:	08003c12 	.word	0x08003c12

08003858 <memchr>:
 8003858:	b2c9      	uxtb	r1, r1
 800385a:	1882      	adds	r2, r0, r2
 800385c:	4290      	cmp	r0, r2
 800385e:	d101      	bne.n	8003864 <memchr+0xc>
 8003860:	2000      	movs	r0, #0
 8003862:	4770      	bx	lr
 8003864:	7803      	ldrb	r3, [r0, #0]
 8003866:	428b      	cmp	r3, r1
 8003868:	d0fb      	beq.n	8003862 <memchr+0xa>
 800386a:	3001      	adds	r0, #1
 800386c:	e7f6      	b.n	800385c <memchr+0x4>

0800386e <memmove>:
 800386e:	b510      	push	{r4, lr}
 8003870:	4288      	cmp	r0, r1
 8003872:	d902      	bls.n	800387a <memmove+0xc>
 8003874:	188b      	adds	r3, r1, r2
 8003876:	4298      	cmp	r0, r3
 8003878:	d303      	bcc.n	8003882 <memmove+0x14>
 800387a:	2300      	movs	r3, #0
 800387c:	e007      	b.n	800388e <memmove+0x20>
 800387e:	5c8b      	ldrb	r3, [r1, r2]
 8003880:	5483      	strb	r3, [r0, r2]
 8003882:	3a01      	subs	r2, #1
 8003884:	d2fb      	bcs.n	800387e <memmove+0x10>
 8003886:	bd10      	pop	{r4, pc}
 8003888:	5ccc      	ldrb	r4, [r1, r3]
 800388a:	54c4      	strb	r4, [r0, r3]
 800388c:	3301      	adds	r3, #1
 800388e:	429a      	cmp	r2, r3
 8003890:	d1fa      	bne.n	8003888 <memmove+0x1a>
 8003892:	e7f8      	b.n	8003886 <memmove+0x18>

08003894 <_free_r>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0005      	movs	r5, r0
 8003898:	2900      	cmp	r1, #0
 800389a:	d010      	beq.n	80038be <_free_r+0x2a>
 800389c:	1f0c      	subs	r4, r1, #4
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da00      	bge.n	80038a6 <_free_r+0x12>
 80038a4:	18e4      	adds	r4, r4, r3
 80038a6:	0028      	movs	r0, r5
 80038a8:	f000 f918 	bl	8003adc <__malloc_lock>
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <_free_r+0x90>)
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <_free_r+0x2c>
 80038b4:	6063      	str	r3, [r4, #4]
 80038b6:	6014      	str	r4, [r2, #0]
 80038b8:	0028      	movs	r0, r5
 80038ba:	f000 f917 	bl	8003aec <__malloc_unlock>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d908      	bls.n	80038d6 <_free_r+0x42>
 80038c4:	6821      	ldr	r1, [r4, #0]
 80038c6:	1860      	adds	r0, r4, r1
 80038c8:	4283      	cmp	r3, r0
 80038ca:	d1f3      	bne.n	80038b4 <_free_r+0x20>
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	1841      	adds	r1, r0, r1
 80038d2:	6021      	str	r1, [r4, #0]
 80038d4:	e7ee      	b.n	80038b4 <_free_r+0x20>
 80038d6:	001a      	movs	r2, r3
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <_free_r+0x4e>
 80038de:	42a3      	cmp	r3, r4
 80038e0:	d9f9      	bls.n	80038d6 <_free_r+0x42>
 80038e2:	6811      	ldr	r1, [r2, #0]
 80038e4:	1850      	adds	r0, r2, r1
 80038e6:	42a0      	cmp	r0, r4
 80038e8:	d10b      	bne.n	8003902 <_free_r+0x6e>
 80038ea:	6820      	ldr	r0, [r4, #0]
 80038ec:	1809      	adds	r1, r1, r0
 80038ee:	1850      	adds	r0, r2, r1
 80038f0:	6011      	str	r1, [r2, #0]
 80038f2:	4283      	cmp	r3, r0
 80038f4:	d1e0      	bne.n	80038b8 <_free_r+0x24>
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	1841      	adds	r1, r0, r1
 80038fc:	6011      	str	r1, [r2, #0]
 80038fe:	6053      	str	r3, [r2, #4]
 8003900:	e7da      	b.n	80038b8 <_free_r+0x24>
 8003902:	42a0      	cmp	r0, r4
 8003904:	d902      	bls.n	800390c <_free_r+0x78>
 8003906:	230c      	movs	r3, #12
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	e7d5      	b.n	80038b8 <_free_r+0x24>
 800390c:	6821      	ldr	r1, [r4, #0]
 800390e:	1860      	adds	r0, r4, r1
 8003910:	4283      	cmp	r3, r0
 8003912:	d103      	bne.n	800391c <_free_r+0x88>
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	1841      	adds	r1, r0, r1
 800391a:	6021      	str	r1, [r4, #0]
 800391c:	6063      	str	r3, [r4, #4]
 800391e:	6054      	str	r4, [r2, #4]
 8003920:	e7ca      	b.n	80038b8 <_free_r+0x24>
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	2000021c 	.word	0x2000021c

08003928 <sbrk_aligned>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	4e0f      	ldr	r6, [pc, #60]	; (8003968 <sbrk_aligned+0x40>)
 800392c:	000d      	movs	r5, r1
 800392e:	6831      	ldr	r1, [r6, #0]
 8003930:	0004      	movs	r4, r0
 8003932:	2900      	cmp	r1, #0
 8003934:	d102      	bne.n	800393c <sbrk_aligned+0x14>
 8003936:	f000 f8bf 	bl	8003ab8 <_sbrk_r>
 800393a:	6030      	str	r0, [r6, #0]
 800393c:	0029      	movs	r1, r5
 800393e:	0020      	movs	r0, r4
 8003940:	f000 f8ba 	bl	8003ab8 <_sbrk_r>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d00a      	beq.n	800395e <sbrk_aligned+0x36>
 8003948:	2303      	movs	r3, #3
 800394a:	1cc5      	adds	r5, r0, #3
 800394c:	439d      	bics	r5, r3
 800394e:	42a8      	cmp	r0, r5
 8003950:	d007      	beq.n	8003962 <sbrk_aligned+0x3a>
 8003952:	1a29      	subs	r1, r5, r0
 8003954:	0020      	movs	r0, r4
 8003956:	f000 f8af 	bl	8003ab8 <_sbrk_r>
 800395a:	1c43      	adds	r3, r0, #1
 800395c:	d101      	bne.n	8003962 <sbrk_aligned+0x3a>
 800395e:	2501      	movs	r5, #1
 8003960:	426d      	negs	r5, r5
 8003962:	0028      	movs	r0, r5
 8003964:	bd70      	pop	{r4, r5, r6, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	20000220 	.word	0x20000220

0800396c <_malloc_r>:
 800396c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800396e:	2203      	movs	r2, #3
 8003970:	1ccb      	adds	r3, r1, #3
 8003972:	4393      	bics	r3, r2
 8003974:	3308      	adds	r3, #8
 8003976:	0006      	movs	r6, r0
 8003978:	001f      	movs	r7, r3
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d232      	bcs.n	80039e4 <_malloc_r+0x78>
 800397e:	270c      	movs	r7, #12
 8003980:	42b9      	cmp	r1, r7
 8003982:	d831      	bhi.n	80039e8 <_malloc_r+0x7c>
 8003984:	0030      	movs	r0, r6
 8003986:	f000 f8a9 	bl	8003adc <__malloc_lock>
 800398a:	4d32      	ldr	r5, [pc, #200]	; (8003a54 <_malloc_r+0xe8>)
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	001c      	movs	r4, r3
 8003990:	2c00      	cmp	r4, #0
 8003992:	d12e      	bne.n	80039f2 <_malloc_r+0x86>
 8003994:	0039      	movs	r1, r7
 8003996:	0030      	movs	r0, r6
 8003998:	f7ff ffc6 	bl	8003928 <sbrk_aligned>
 800399c:	0004      	movs	r4, r0
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d11e      	bne.n	80039e0 <_malloc_r+0x74>
 80039a2:	682c      	ldr	r4, [r5, #0]
 80039a4:	0025      	movs	r5, r4
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	d14a      	bne.n	8003a40 <_malloc_r+0xd4>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	0029      	movs	r1, r5
 80039ae:	18e3      	adds	r3, r4, r3
 80039b0:	0030      	movs	r0, r6
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	f000 f880 	bl	8003ab8 <_sbrk_r>
 80039b8:	9b01      	ldr	r3, [sp, #4]
 80039ba:	4283      	cmp	r3, r0
 80039bc:	d143      	bne.n	8003a46 <_malloc_r+0xda>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	3703      	adds	r7, #3
 80039c2:	1aff      	subs	r7, r7, r3
 80039c4:	2303      	movs	r3, #3
 80039c6:	439f      	bics	r7, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	2f0c      	cmp	r7, #12
 80039cc:	d200      	bcs.n	80039d0 <_malloc_r+0x64>
 80039ce:	270c      	movs	r7, #12
 80039d0:	0039      	movs	r1, r7
 80039d2:	0030      	movs	r0, r6
 80039d4:	f7ff ffa8 	bl	8003928 <sbrk_aligned>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d034      	beq.n	8003a46 <_malloc_r+0xda>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	19df      	adds	r7, r3, r7
 80039e0:	6027      	str	r7, [r4, #0]
 80039e2:	e013      	b.n	8003a0c <_malloc_r+0xa0>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	dacb      	bge.n	8003980 <_malloc_r+0x14>
 80039e8:	230c      	movs	r3, #12
 80039ea:	2500      	movs	r5, #0
 80039ec:	6033      	str	r3, [r6, #0]
 80039ee:	0028      	movs	r0, r5
 80039f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	1bd1      	subs	r1, r2, r7
 80039f6:	d420      	bmi.n	8003a3a <_malloc_r+0xce>
 80039f8:	290b      	cmp	r1, #11
 80039fa:	d917      	bls.n	8003a2c <_malloc_r+0xc0>
 80039fc:	19e2      	adds	r2, r4, r7
 80039fe:	6027      	str	r7, [r4, #0]
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	d111      	bne.n	8003a28 <_malloc_r+0xbc>
 8003a04:	602a      	str	r2, [r5, #0]
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	6011      	str	r1, [r2, #0]
 8003a0a:	6053      	str	r3, [r2, #4]
 8003a0c:	0030      	movs	r0, r6
 8003a0e:	0025      	movs	r5, r4
 8003a10:	f000 f86c 	bl	8003aec <__malloc_unlock>
 8003a14:	2207      	movs	r2, #7
 8003a16:	350b      	adds	r5, #11
 8003a18:	1d23      	adds	r3, r4, #4
 8003a1a:	4395      	bics	r5, r2
 8003a1c:	1aea      	subs	r2, r5, r3
 8003a1e:	429d      	cmp	r5, r3
 8003a20:	d0e5      	beq.n	80039ee <_malloc_r+0x82>
 8003a22:	1b5b      	subs	r3, r3, r5
 8003a24:	50a3      	str	r3, [r4, r2]
 8003a26:	e7e2      	b.n	80039ee <_malloc_r+0x82>
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	e7ec      	b.n	8003a06 <_malloc_r+0x9a>
 8003a2c:	6862      	ldr	r2, [r4, #4]
 8003a2e:	42a3      	cmp	r3, r4
 8003a30:	d101      	bne.n	8003a36 <_malloc_r+0xca>
 8003a32:	602a      	str	r2, [r5, #0]
 8003a34:	e7ea      	b.n	8003a0c <_malloc_r+0xa0>
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	e7e8      	b.n	8003a0c <_malloc_r+0xa0>
 8003a3a:	0023      	movs	r3, r4
 8003a3c:	6864      	ldr	r4, [r4, #4]
 8003a3e:	e7a7      	b.n	8003990 <_malloc_r+0x24>
 8003a40:	002c      	movs	r4, r5
 8003a42:	686d      	ldr	r5, [r5, #4]
 8003a44:	e7af      	b.n	80039a6 <_malloc_r+0x3a>
 8003a46:	230c      	movs	r3, #12
 8003a48:	0030      	movs	r0, r6
 8003a4a:	6033      	str	r3, [r6, #0]
 8003a4c:	f000 f84e 	bl	8003aec <__malloc_unlock>
 8003a50:	e7cd      	b.n	80039ee <_malloc_r+0x82>
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	2000021c 	.word	0x2000021c

08003a58 <_realloc_r>:
 8003a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5a:	0007      	movs	r7, r0
 8003a5c:	000e      	movs	r6, r1
 8003a5e:	0014      	movs	r4, r2
 8003a60:	2900      	cmp	r1, #0
 8003a62:	d105      	bne.n	8003a70 <_realloc_r+0x18>
 8003a64:	0011      	movs	r1, r2
 8003a66:	f7ff ff81 	bl	800396c <_malloc_r>
 8003a6a:	0005      	movs	r5, r0
 8003a6c:	0028      	movs	r0, r5
 8003a6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a70:	2a00      	cmp	r2, #0
 8003a72:	d103      	bne.n	8003a7c <_realloc_r+0x24>
 8003a74:	f7ff ff0e 	bl	8003894 <_free_r>
 8003a78:	0025      	movs	r5, r4
 8003a7a:	e7f7      	b.n	8003a6c <_realloc_r+0x14>
 8003a7c:	f000 f83e 	bl	8003afc <_malloc_usable_size_r>
 8003a80:	9001      	str	r0, [sp, #4]
 8003a82:	4284      	cmp	r4, r0
 8003a84:	d803      	bhi.n	8003a8e <_realloc_r+0x36>
 8003a86:	0035      	movs	r5, r6
 8003a88:	0843      	lsrs	r3, r0, #1
 8003a8a:	42a3      	cmp	r3, r4
 8003a8c:	d3ee      	bcc.n	8003a6c <_realloc_r+0x14>
 8003a8e:	0021      	movs	r1, r4
 8003a90:	0038      	movs	r0, r7
 8003a92:	f7ff ff6b 	bl	800396c <_malloc_r>
 8003a96:	1e05      	subs	r5, r0, #0
 8003a98:	d0e8      	beq.n	8003a6c <_realloc_r+0x14>
 8003a9a:	9b01      	ldr	r3, [sp, #4]
 8003a9c:	0022      	movs	r2, r4
 8003a9e:	429c      	cmp	r4, r3
 8003aa0:	d900      	bls.n	8003aa4 <_realloc_r+0x4c>
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	0031      	movs	r1, r6
 8003aa6:	0028      	movs	r0, r5
 8003aa8:	f7ff fbae 	bl	8003208 <memcpy>
 8003aac:	0031      	movs	r1, r6
 8003aae:	0038      	movs	r0, r7
 8003ab0:	f7ff fef0 	bl	8003894 <_free_r>
 8003ab4:	e7da      	b.n	8003a6c <_realloc_r+0x14>
	...

08003ab8 <_sbrk_r>:
 8003ab8:	2300      	movs	r3, #0
 8003aba:	b570      	push	{r4, r5, r6, lr}
 8003abc:	4d06      	ldr	r5, [pc, #24]	; (8003ad8 <_sbrk_r+0x20>)
 8003abe:	0004      	movs	r4, r0
 8003ac0:	0008      	movs	r0, r1
 8003ac2:	602b      	str	r3, [r5, #0]
 8003ac4:	f7fc ff78 	bl	80009b8 <_sbrk>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d103      	bne.n	8003ad4 <_sbrk_r+0x1c>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d000      	beq.n	8003ad4 <_sbrk_r+0x1c>
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	20000224 	.word	0x20000224

08003adc <__malloc_lock>:
 8003adc:	b510      	push	{r4, lr}
 8003ade:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <__malloc_lock+0xc>)
 8003ae0:	f000 f814 	bl	8003b0c <__retarget_lock_acquire_recursive>
 8003ae4:	bd10      	pop	{r4, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	20000228 	.word	0x20000228

08003aec <__malloc_unlock>:
 8003aec:	b510      	push	{r4, lr}
 8003aee:	4802      	ldr	r0, [pc, #8]	; (8003af8 <__malloc_unlock+0xc>)
 8003af0:	f000 f80d 	bl	8003b0e <__retarget_lock_release_recursive>
 8003af4:	bd10      	pop	{r4, pc}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	20000228 	.word	0x20000228

08003afc <_malloc_usable_size_r>:
 8003afc:	1f0b      	subs	r3, r1, #4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	1f18      	subs	r0, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da01      	bge.n	8003b0a <_malloc_usable_size_r+0xe>
 8003b06:	580b      	ldr	r3, [r1, r0]
 8003b08:	18c0      	adds	r0, r0, r3
 8003b0a:	4770      	bx	lr

08003b0c <__retarget_lock_acquire_recursive>:
 8003b0c:	4770      	bx	lr

08003b0e <__retarget_lock_release_recursive>:
 8003b0e:	4770      	bx	lr

08003b10 <_init>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr

08003b1c <_fini>:
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b22:	bc08      	pop	{r3}
 8003b24:	469e      	mov	lr, r3
 8003b26:	4770      	bx	lr
