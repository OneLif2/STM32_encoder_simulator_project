
STM32_UART_DMA_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c58  08003c58  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003c58  08003c58  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c58  08003c58  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000078  08003cd8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003cd8  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001861  00000000  00000000  0002928b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0002aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011bb1  00000000  00000000  0002b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009403  00000000  00000000  0003d3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006912c  00000000  00000000  000467bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af8e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ad0  00000000  00000000  000af938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b44 	.word	0x08003b44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08003b44 	.word	0x08003b44

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_UARTEx_RxEventCallback>:
bool gled_state = 1; // g led state
bool bled_state = 0; // b led state

// Code for DMA data Rx and Tx

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	000a      	movs	r2, r1
 800024e:	1cbb      	adds	r3, r7, #2
 8000250:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART2) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <HAL_UARTEx_RxEventCallback+0x80>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d12e      	bne.n	80002ba <HAL_UARTEx_RxEventCallback+0x76>
		memcpy(mainbuff, blankdata, mainbuff_size);
 800025c:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <HAL_UARTEx_RxEventCallback+0x84>)
 800025e:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <HAL_UARTEx_RxEventCallback+0x88>)
 8000260:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000262:	c313      	stmia	r3!, {r0, r1, r4}
 8000264:	ca03      	ldmia	r2!, {r0, r1}
 8000266:	c303      	stmia	r3!, {r0, r1}
		if (rxbuff[Size-1] == 10){
 8000268:	1cbb      	adds	r3, r7, #2
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	3b01      	subs	r3, #1
 800026e:	4a18      	ldr	r2, [pc, #96]	; (80002d0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000270:	5cd3      	ldrb	r3, [r2, r3]
 8000272:	2b0a      	cmp	r3, #10
 8000274:	d104      	bne.n	8000280 <HAL_UARTEx_RxEventCallback+0x3c>
			Size = Size -1;
 8000276:	1cbb      	adds	r3, r7, #2
 8000278:	1cba      	adds	r2, r7, #2
 800027a:	8812      	ldrh	r2, [r2, #0]
 800027c:	3a01      	subs	r2, #1
 800027e:	801a      	strh	r2, [r3, #0]
		}
		memcpy(mainbuff, rxbuff, Size); // store value fm Uart2, need #include "string.h" //Size - 1
 8000280:	1cbb      	adds	r3, r7, #2
 8000282:	881a      	ldrh	r2, [r3, #0]
 8000284:	4912      	ldr	r1, [pc, #72]	; (80002d0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <HAL_UARTEx_RxEventCallback+0x84>)
 8000288:	0018      	movs	r0, r3
 800028a:	f002 ffd7 	bl	800323c <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuff, rxbuff_size); // rx stop after receive, restart it again
 800028e:	4910      	ldr	r1, [pc, #64]	; (80002d0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000292:	220a      	movs	r2, #10
 8000294:	0018      	movs	r0, r3
 8000296:	f002 ff38 	bl	800310a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <HAL_UARTEx_RxEventCallback+0x94>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <HAL_UARTEx_RxEventCallback+0x94>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2104      	movs	r1, #4
 80002a6:	438a      	bics	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
		rxdatasize = Size;
 80002aa:	1cbb      	adds	r3, r7, #2
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <HAL_UARTEx_RxEventCallback+0x98>)
 80002b2:	701a      	strb	r2, [r3, #0]
		uart_rx_int = 1;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <HAL_UARTEx_RxEventCallback+0x9c>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
	}
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	b003      	add	sp, #12
 80002c0:	bd90      	pop	{r4, r7, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	40004400 	.word	0x40004400
 80002c8:	200001f4 	.word	0x200001f4
 80002cc:	200001e0 	.word	0x200001e0
 80002d0:	200001d4 	.word	0x200001d4
 80002d4:	20000094 	.word	0x20000094
 80002d8:	20000118 	.word	0x20000118
 80002dc:	200001d2 	.word	0x200001d2
 80002e0:	20000208 	.word	0x20000208

080002e4 <printpolestep>:

// Create counter msg
void printpolestep( txbuffer, counter) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
	sprintf(txbuffer, "counter = %03d\n\r", counter);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	683a      	ldr	r2, [r7, #0]
 80002f2:	4906      	ldr	r1, [pc, #24]	; (800030c <printpolestep+0x28>)
 80002f4:	0018      	movs	r0, r3
 80002f6:	f002 ffb3 	bl	8003260 <siprintf>
	tx_msg((char*) txbuffer);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 f807 	bl	8000310 <tx_msg>
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b002      	add	sp, #8
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	08003b5c 	.word	0x08003b5c

08000310 <tx_msg>:

// Tx msg from Uart 2
void tx_msg( txbuffer) {
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) txbuffer, strlen(txbuffer));
 8000318:	687c      	ldr	r4, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	0018      	movs	r0, r3
 800031e:	f7ff fef3 	bl	8000108 <strlen>
 8000322:	0003      	movs	r3, r0
 8000324:	b29a      	uxth	r2, r3
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <tx_msg+0x30>)
 8000328:	0021      	movs	r1, r4
 800032a:	0018      	movs	r0, r3
 800032c:	f001 fd8e 	bl	8001e4c <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 8000330:	2064      	movs	r0, #100	; 0x64
 8000332:	f000 fc25 	bl	8000b80 <HAL_Delay>
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b003      	add	sp, #12
 800033c:	bd90      	pop	{r4, r7, pc}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	20000094 	.word	0x20000094

08000344 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000348:	f000 fbb6 	bl	8000ab8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800034c:	f000 f946 	bl	80005dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000350:	f000 f9dc 	bl	800070c <MX_GPIO_Init>
	MX_DMA_Init();
 8000354:	f000 f9bc 	bl	80006d0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000358:	f000 f98a 	bl	8000670 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	// for hal dma feature
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuff, rxbuff_size); // call uart rx function, data store in rxbuff
 800035c:	498a      	ldr	r1, [pc, #552]	; (8000588 <main+0x244>)
 800035e:	4b8b      	ldr	r3, [pc, #556]	; (800058c <main+0x248>)
 8000360:	220a      	movs	r2, #10
 8000362:	0018      	movs	r0, r3
 8000364:	f002 fed1 	bl	800310a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); // hal dma it start by default, disable half tx IT, this IT trigger when half data has been transfer
 8000368:	4b89      	ldr	r3, [pc, #548]	; (8000590 <main+0x24c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b88      	ldr	r3, [pc, #544]	; (8000590 <main+0x24c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2104      	movs	r1, #4
 8000374:	438a      	bics	r2, r1
 8000376:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (uart_rx_int == 1) {
 8000378:	4b86      	ldr	r3, [pc, #536]	; (8000594 <main+0x250>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d100      	bne.n	8000382 <main+0x3e>
 8000380:	e0af      	b.n	80004e2 <main+0x19e>
			uart_rx_int = 0;
 8000382:	4b84      	ldr	r3, [pc, #528]	; (8000594 <main+0x250>)
 8000384:	2200      	movs	r2, #0
 8000386:	701a      	strb	r2, [r3, #0]
			if (rxdatasize == 0) {
 8000388:	4b83      	ldr	r3, [pc, #524]	; (8000598 <main+0x254>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d100      	bne.n	8000392 <main+0x4e>
 8000390:	e0f7      	b.n	8000582 <main+0x23e>
				continue;
			}
			if (strncmp((char*) mainbuff, "resume", rxdatasize - 1) == 0 && strlen(mainbuff) == 6) {
 8000392:	4b81      	ldr	r3, [pc, #516]	; (8000598 <main+0x254>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	3b01      	subs	r3, #1
 8000398:	001a      	movs	r2, r3
 800039a:	4980      	ldr	r1, [pc, #512]	; (800059c <main+0x258>)
 800039c:	4b80      	ldr	r3, [pc, #512]	; (80005a0 <main+0x25c>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 ff7e 	bl	80032a0 <strncmp>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d11e      	bne.n	80003e6 <main+0xa2>
 80003a8:	4b7d      	ldr	r3, [pc, #500]	; (80005a0 <main+0x25c>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f7ff feac 	bl	8000108 <strlen>
 80003b0:	0003      	movs	r3, r0
 80003b2:	2b06      	cmp	r3, #6
 80003b4:	d117      	bne.n	80003e6 <main+0xa2>
				pause = 0;
 80003b6:	4b7b      	ldr	r3, [pc, #492]	; (80005a4 <main+0x260>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 80003bc:	4a78      	ldr	r2, [pc, #480]	; (80005a0 <main+0x25c>)
 80003be:	497a      	ldr	r1, [pc, #488]	; (80005a8 <main+0x264>)
 80003c0:	4b7a      	ldr	r3, [pc, #488]	; (80005ac <main+0x268>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f002 ff4c 	bl	8003260 <siprintf>
				tx_msg((char*) txbuffer);
 80003c8:	4b78      	ldr	r3, [pc, #480]	; (80005ac <main+0x268>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f7ff ffa0 	bl	8000310 <tx_msg>

				sprintf(txbuffer, "program resume \n\r");
 80003d0:	4a77      	ldr	r2, [pc, #476]	; (80005b0 <main+0x26c>)
 80003d2:	4b76      	ldr	r3, [pc, #472]	; (80005ac <main+0x268>)
 80003d4:	0011      	movs	r1, r2
 80003d6:	0018      	movs	r0, r3
 80003d8:	f002 ff42 	bl	8003260 <siprintf>
				tx_msg((char*) txbuffer);
 80003dc:	4b73      	ldr	r3, [pc, #460]	; (80005ac <main+0x268>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f7ff ff96 	bl	8000310 <tx_msg>
 80003e4:	e07d      	b.n	80004e2 <main+0x19e>

			} else if (strncmp((char*) mainbuff, "stop", rxdatasize - 1) == 0 && strlen(mainbuff) == 4) {
 80003e6:	4b6c      	ldr	r3, [pc, #432]	; (8000598 <main+0x254>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	001a      	movs	r2, r3
 80003ee:	4971      	ldr	r1, [pc, #452]	; (80005b4 <main+0x270>)
 80003f0:	4b6b      	ldr	r3, [pc, #428]	; (80005a0 <main+0x25c>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f002 ff54 	bl	80032a0 <strncmp>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d11e      	bne.n	800043a <main+0xf6>
 80003fc:	4b68      	ldr	r3, [pc, #416]	; (80005a0 <main+0x25c>)
 80003fe:	0018      	movs	r0, r3
 8000400:	f7ff fe82 	bl	8000108 <strlen>
 8000404:	0003      	movs	r3, r0
 8000406:	2b04      	cmp	r3, #4
 8000408:	d117      	bne.n	800043a <main+0xf6>
				pause = 1;
 800040a:	4b66      	ldr	r3, [pc, #408]	; (80005a4 <main+0x260>)
 800040c:	2201      	movs	r2, #1
 800040e:	701a      	strb	r2, [r3, #0]

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 8000410:	4a63      	ldr	r2, [pc, #396]	; (80005a0 <main+0x25c>)
 8000412:	4965      	ldr	r1, [pc, #404]	; (80005a8 <main+0x264>)
 8000414:	4b65      	ldr	r3, [pc, #404]	; (80005ac <main+0x268>)
 8000416:	0018      	movs	r0, r3
 8000418:	f002 ff22 	bl	8003260 <siprintf>
				tx_msg((char*) txbuffer);
 800041c:	4b63      	ldr	r3, [pc, #396]	; (80005ac <main+0x268>)
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff ff76 	bl	8000310 <tx_msg>

				sprintf(txbuffer, "program stop \n\r");
 8000424:	4a64      	ldr	r2, [pc, #400]	; (80005b8 <main+0x274>)
 8000426:	4b61      	ldr	r3, [pc, #388]	; (80005ac <main+0x268>)
 8000428:	0011      	movs	r1, r2
 800042a:	0018      	movs	r0, r3
 800042c:	f002 ff18 	bl	8003260 <siprintf>
				tx_msg((char*) txbuffer);
 8000430:	4b5e      	ldr	r3, [pc, #376]	; (80005ac <main+0x268>)
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff ff6c 	bl	8000310 <tx_msg>
 8000438:	e053      	b.n	80004e2 <main+0x19e>

			} else if (strncmp((char*) mainbuff, "forward", rxdatasize - 1)
 800043a:	4b57      	ldr	r3, [pc, #348]	; (8000598 <main+0x254>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	3b01      	subs	r3, #1
 8000440:	001a      	movs	r2, r3
 8000442:	495e      	ldr	r1, [pc, #376]	; (80005bc <main+0x278>)
 8000444:	4b56      	ldr	r3, [pc, #344]	; (80005a0 <main+0x25c>)
 8000446:	0018      	movs	r0, r3
 8000448:	f002 ff2a 	bl	80032a0 <strncmp>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d114      	bne.n	800047a <main+0x136>
					== 0  && strlen(mainbuff) == 7) {
 8000450:	4b53      	ldr	r3, [pc, #332]	; (80005a0 <main+0x25c>)
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff fe58 	bl	8000108 <strlen>
 8000458:	0003      	movs	r3, r0
 800045a:	2b07      	cmp	r3, #7
 800045c:	d10d      	bne.n	800047a <main+0x136>

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 800045e:	4a50      	ldr	r2, [pc, #320]	; (80005a0 <main+0x25c>)
 8000460:	4951      	ldr	r1, [pc, #324]	; (80005a8 <main+0x264>)
 8000462:	4b52      	ldr	r3, [pc, #328]	; (80005ac <main+0x268>)
 8000464:	0018      	movs	r0, r3
 8000466:	f002 fefb 	bl	8003260 <siprintf>
				tx_msg((char*) txbuffer);
 800046a:	4b50      	ldr	r3, [pc, #320]	; (80005ac <main+0x268>)
 800046c:	0018      	movs	r0, r3
 800046e:	f7ff ff4f 	bl	8000310 <tx_msg>
				direction_mode = 1;
 8000472:	4b53      	ldr	r3, [pc, #332]	; (80005c0 <main+0x27c>)
 8000474:	2201      	movs	r2, #1
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	e033      	b.n	80004e2 <main+0x19e>

			} else if (strncmp((char*) mainbuff, "backward", rxdatasize - 1)
 800047a:	4b47      	ldr	r3, [pc, #284]	; (8000598 <main+0x254>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	3b01      	subs	r3, #1
 8000480:	001a      	movs	r2, r3
 8000482:	4950      	ldr	r1, [pc, #320]	; (80005c4 <main+0x280>)
 8000484:	4b46      	ldr	r3, [pc, #280]	; (80005a0 <main+0x25c>)
 8000486:	0018      	movs	r0, r3
 8000488:	f002 ff0a 	bl	80032a0 <strncmp>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d114      	bne.n	80004ba <main+0x176>
					== 0 && strlen(mainbuff) == 8) {
 8000490:	4b43      	ldr	r3, [pc, #268]	; (80005a0 <main+0x25c>)
 8000492:	0018      	movs	r0, r3
 8000494:	f7ff fe38 	bl	8000108 <strlen>
 8000498:	0003      	movs	r3, r0
 800049a:	2b08      	cmp	r3, #8
 800049c:	d10d      	bne.n	80004ba <main+0x176>

				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 800049e:	4a40      	ldr	r2, [pc, #256]	; (80005a0 <main+0x25c>)
 80004a0:	4941      	ldr	r1, [pc, #260]	; (80005a8 <main+0x264>)
 80004a2:	4b42      	ldr	r3, [pc, #264]	; (80005ac <main+0x268>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 fedb 	bl	8003260 <siprintf>
				tx_msg((char*) txbuffer);
 80004aa:	4b40      	ldr	r3, [pc, #256]	; (80005ac <main+0x268>)
 80004ac:	0018      	movs	r0, r3
 80004ae:	f7ff ff2f 	bl	8000310 <tx_msg>
				direction_mode = 0;
 80004b2:	4b43      	ldr	r3, [pc, #268]	; (80005c0 <main+0x27c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	e013      	b.n	80004e2 <main+0x19e>
			}

			else {
				sprintf(txbuffer, " '%s' has been recieved \n", mainbuff);
 80004ba:	4a39      	ldr	r2, [pc, #228]	; (80005a0 <main+0x25c>)
 80004bc:	493a      	ldr	r1, [pc, #232]	; (80005a8 <main+0x264>)
 80004be:	4b3b      	ldr	r3, [pc, #236]	; (80005ac <main+0x268>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 fecd 	bl	8003260 <siprintf>
				tx_msg((char*) txbuffer);
 80004c6:	4b39      	ldr	r3, [pc, #228]	; (80005ac <main+0x268>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f7ff ff21 	bl	8000310 <tx_msg>
				sprintf(txbuffer, "===invalid input=== \n\r");
 80004ce:	4a3e      	ldr	r2, [pc, #248]	; (80005c8 <main+0x284>)
 80004d0:	4b36      	ldr	r3, [pc, #216]	; (80005ac <main+0x268>)
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 fec3 	bl	8003260 <siprintf>
				tx_msg((char*) txbuffer);
 80004da:	4b34      	ldr	r3, [pc, #208]	; (80005ac <main+0x268>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f7ff ff17 	bl	8000310 <tx_msg>
			}
			//memcpy(mainbuff, blankdata, rxbuff_size);
		}

		if (pause == 0) {
 80004e2:	4b30      	ldr	r3, [pc, #192]	; (80005a4 <main+0x260>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2201      	movs	r2, #1
 80004e8:	4053      	eors	r3, r2
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d100      	bne.n	80004f2 <main+0x1ae>
 80004f0:	e742      	b.n	8000378 <main+0x34>
			HAL_GPIO_WritePin(GPIOC, LD3_Pin, bled_state);
 80004f2:	4b36      	ldr	r3, [pc, #216]	; (80005cc <main+0x288>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	001a      	movs	r2, r3
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4834      	ldr	r0, [pc, #208]	; (80005d0 <main+0x28c>)
 80004fe:	0019      	movs	r1, r3
 8000500:	f000 ffc6 	bl	8001490 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LD4_Pin, gled_state);
 8000504:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <main+0x290>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	001a      	movs	r2, r3
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	4830      	ldr	r0, [pc, #192]	; (80005d0 <main+0x28c>)
 8000510:	0019      	movs	r1, r3
 8000512:	f000 ffbd 	bl	8001490 <HAL_GPIO_WritePin>
			gled_state = !gled_state;
 8000516:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <main+0x290>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	1e5a      	subs	r2, r3, #1
 800051c:	4193      	sbcs	r3, r2
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2201      	movs	r2, #1
 8000522:	4053      	eors	r3, r2
 8000524:	b2db      	uxtb	r3, r3
 8000526:	1c1a      	adds	r2, r3, #0
 8000528:	2301      	movs	r3, #1
 800052a:	4013      	ands	r3, r2
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <main+0x290>)
 8000530:	701a      	strb	r2, [r3, #0]
			bled_state = !bled_state;
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <main+0x288>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	1e5a      	subs	r2, r3, #1
 8000538:	4193      	sbcs	r3, r2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	2201      	movs	r2, #1
 800053e:	4053      	eors	r3, r2
 8000540:	b2db      	uxtb	r3, r3
 8000542:	1c1a      	adds	r2, r3, #0
 8000544:	2301      	movs	r3, #1
 8000546:	4013      	ands	r3, r2
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <main+0x288>)
 800054c:	701a      	strb	r2, [r3, #0]
			if (direction_mode == 1)
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <main+0x27c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d105      	bne.n	8000562 <main+0x21e>
				counter++;
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <main+0x294>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <main+0x294>)
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	e004      	b.n	800056c <main+0x228>
			else
				counter--;
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <main+0x294>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1e5a      	subs	r2, r3, #1
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <main+0x294>)
 800056a:	601a      	str	r2, [r3, #0]
			printpolestep((char*) txbuffer, counter);
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <main+0x294>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0x268>)
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff feb5 	bl	80002e4 <printpolestep>
			HAL_Delay(100);
 800057a:	2064      	movs	r0, #100	; 0x64
 800057c:	f000 fb00 	bl	8000b80 <HAL_Delay>
 8000580:	e6fa      	b.n	8000378 <main+0x34>
				continue;
 8000582:	46c0      	nop			; (mov r8, r8)
		if (uart_rx_int == 1) {
 8000584:	e6f8      	b.n	8000378 <main+0x34>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	200001d4 	.word	0x200001d4
 800058c:	20000094 	.word	0x20000094
 8000590:	20000118 	.word	0x20000118
 8000594:	20000208 	.word	0x20000208
 8000598:	200001d2 	.word	0x200001d2
 800059c:	08003b70 	.word	0x08003b70
 80005a0:	200001f4 	.word	0x200001f4
 80005a4:	20000210 	.word	0x20000210
 80005a8:	08003b78 	.word	0x08003b78
 80005ac:	200001a0 	.word	0x200001a0
 80005b0:	08003b94 	.word	0x08003b94
 80005b4:	08003ba8 	.word	0x08003ba8
 80005b8:	08003bb0 	.word	0x08003bb0
 80005bc:	08003bc0 	.word	0x08003bc0
 80005c0:	20000000 	.word	0x20000000
 80005c4:	08003bc8 	.word	0x08003bc8
 80005c8:	08003bd4 	.word	0x08003bd4
 80005cc:	20000211 	.word	0x20000211
 80005d0:	48000800 	.word	0x48000800
 80005d4:	20000004 	.word	0x20000004
 80005d8:	2000020c 	.word	0x2000020c

080005dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b091      	sub	sp, #68	; 0x44
 80005e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005e2:	2410      	movs	r4, #16
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	0018      	movs	r0, r3
 80005e8:	2330      	movs	r3, #48	; 0x30
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f002 fe2e 	bl	800324e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005f2:	003b      	movs	r3, r7
 80005f4:	0018      	movs	r0, r3
 80005f6:	2310      	movs	r3, #16
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f002 fe27 	bl	800324e <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	0021      	movs	r1, r4
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2202      	movs	r2, #2
 8000606:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2201      	movs	r2, #1
 800060c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2210      	movs	r2, #16
 8000612:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2202      	movs	r2, #2
 8000618:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	22a0      	movs	r2, #160	; 0xa0
 8000624:	0392      	lsls	r2, r2, #14
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800062e:	187b      	adds	r3, r7, r1
 8000630:	0018      	movs	r0, r3
 8000632:	f000 ff4b 	bl	80014cc <HAL_RCC_OscConfig>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x62>
		Error_Handler();
 800063a:	f000 f8c3 	bl	80007c4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800063e:	003b      	movs	r3, r7
 8000640:	2207      	movs	r2, #7
 8000642:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	003b      	movs	r3, r7
 8000646:	2202      	movs	r2, #2
 8000648:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	003b      	movs	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	003b      	movs	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000656:	003b      	movs	r3, r7
 8000658:	2101      	movs	r1, #1
 800065a:	0018      	movs	r0, r3
 800065c:	f001 fa50 	bl	8001b00 <HAL_RCC_ClockConfig>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x8c>
		Error_Handler();
 8000664:	f000 f8ae 	bl	80007c4 <Error_Handler>
	}
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b011      	add	sp, #68	; 0x44
 800066e:	bd90      	pop	{r4, r7, pc}

08000670 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <MX_USART2_UART_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800067c:	22e1      	movs	r2, #225	; 0xe1
 800067e:	0252      	lsls	r2, r2, #9
 8000680:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fb75 	bl	8001da4 <HAL_UART_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80006be:	f000 f881 	bl	80007c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000094 	.word	0x20000094
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_DMA_Init+0x38>)
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_DMA_Init+0x38>)
 80006dc:	2101      	movs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	615a      	str	r2, [r3, #20]
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_DMA_Init+0x38>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	200b      	movs	r0, #11
 80006f4:	f000 fb14 	bl	8000d20 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80006f8:	200b      	movs	r0, #11
 80006fa:	f000 fb26 	bl	8000d4a <HAL_NVIC_EnableIRQ>

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40021000 	.word	0x40021000

0800070c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000712:	240c      	movs	r4, #12
 8000714:	193b      	adds	r3, r7, r4
 8000716:	0018      	movs	r0, r3
 8000718:	2314      	movs	r3, #20
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f002 fd96 	bl	800324e <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000724:	695a      	ldr	r2, [r3, #20]
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0289      	lsls	r1, r1, #10
 800072c:	430a      	orrs	r2, r1
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000732:	695a      	ldr	r2, [r3, #20]
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	029b      	lsls	r3, r3, #10
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_GPIO_Init+0xb0>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	0309      	lsls	r1, r1, #12
 8000748:	430a      	orrs	r2, r1
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_GPIO_Init+0xb0>)
 800074e:	695a      	ldr	r2, [r3, #20]
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	031b      	lsls	r3, r3, #12
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LD4_Pin | LD3_Pin, GPIO_PIN_RESET);
 800075a:	23c0      	movs	r3, #192	; 0xc0
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4818      	ldr	r0, [pc, #96]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000760:	2200      	movs	r2, #0
 8000762:	0019      	movs	r1, r3
 8000764:	f000 fe94 	bl	8001490 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2290      	movs	r2, #144	; 0x90
 8000772:	0352      	lsls	r2, r2, #13
 8000774:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	193a      	adds	r2, r7, r4
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	0011      	movs	r1, r2
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fd13 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin;
 800078a:	0021      	movs	r1, r4
 800078c:	187b      	adds	r3, r7, r1
 800078e:	22c0      	movs	r2, #192	; 0xc0
 8000790:	0092      	lsls	r2, r2, #2
 8000792:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2201      	movs	r2, #1
 8000798:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <MX_GPIO_Init+0xb4>)
 80007aa:	0019      	movs	r1, r3
 80007ac:	0010      	movs	r0, r2
 80007ae:	f000 fcff 	bl	80011b0 <HAL_GPIO_Init>

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b009      	add	sp, #36	; 0x24
 80007b8:	bd90      	pop	{r4, r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48000800 	.word	0x48000800

080007c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <HAL_MspInit+0x54>)
 80007d8:	699a      	ldr	r2, [r3, #24]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_MspInit+0x54>)
 80007dc:	2101      	movs	r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x54>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	2201      	movs	r2, #1
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x54>)
 80007f0:	69da      	ldr	r2, [r3, #28]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_MspInit+0x54>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	0549      	lsls	r1, r1, #21
 80007f8:	430a      	orrs	r2, r1
 80007fa:	61da      	str	r2, [r3, #28]
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x54>)
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	055b      	lsls	r3, r3, #21
 8000804:	4013      	ands	r3, r2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2004      	movs	r0, #4
 8000810:	f000 fa86 	bl	8000d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000814:	2004      	movs	r0, #4
 8000816:	f000 fa98 	bl	8000d4a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b002      	add	sp, #8
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b08b      	sub	sp, #44	; 0x2c
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	2414      	movs	r4, #20
 8000832:	193b      	adds	r3, r7, r4
 8000834:	0018      	movs	r0, r3
 8000836:	2314      	movs	r3, #20
 8000838:	001a      	movs	r2, r3
 800083a:	2100      	movs	r1, #0
 800083c:	f002 fd07 	bl	800324e <memset>
  if(huart->Instance==USART2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a47      	ldr	r2, [pc, #284]	; (8000964 <HAL_UART_MspInit+0x13c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d000      	beq.n	800084c <HAL_UART_MspInit+0x24>
 800084a:	e086      	b.n	800095a <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084c:	4b46      	ldr	r3, [pc, #280]	; (8000968 <HAL_UART_MspInit+0x140>)
 800084e:	69da      	ldr	r2, [r3, #28]
 8000850:	4b45      	ldr	r3, [pc, #276]	; (8000968 <HAL_UART_MspInit+0x140>)
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	0289      	lsls	r1, r1, #10
 8000856:	430a      	orrs	r2, r1
 8000858:	61da      	str	r2, [r3, #28]
 800085a:	4b43      	ldr	r3, [pc, #268]	; (8000968 <HAL_UART_MspInit+0x140>)
 800085c:	69da      	ldr	r2, [r3, #28]
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	029b      	lsls	r3, r3, #10
 8000862:	4013      	ands	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <HAL_UART_MspInit+0x140>)
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <HAL_UART_MspInit+0x140>)
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	0289      	lsls	r1, r1, #10
 8000872:	430a      	orrs	r2, r1
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <HAL_UART_MspInit+0x140>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	029b      	lsls	r3, r3, #10
 800087e:	4013      	ands	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000884:	0021      	movs	r1, r4
 8000886:	187b      	adds	r3, r7, r1
 8000888:	220c      	movs	r2, #12
 800088a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2202      	movs	r2, #2
 8000890:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2203      	movs	r2, #3
 800089c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2201      	movs	r2, #1
 80008a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	187a      	adds	r2, r7, r1
 80008a6:	2390      	movs	r3, #144	; 0x90
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fc7f 	bl	80011b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <HAL_UART_MspInit+0x144>)
 80008b4:	4a2e      	ldr	r2, [pc, #184]	; (8000970 <HAL_UART_MspInit+0x148>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	; (800096c <HAL_UART_MspInit+0x144>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <HAL_UART_MspInit+0x144>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <HAL_UART_MspInit+0x144>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <HAL_UART_MspInit+0x144>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <HAL_UART_MspInit+0x144>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <HAL_UART_MspInit+0x144>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <HAL_UART_MspInit+0x144>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <HAL_UART_MspInit+0x144>)
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 fa4d 	bl	8000d84 <HAL_DMA_Init>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80008ee:	f7ff ff69 	bl	80007c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <HAL_UART_MspInit+0x144>)
 80008f6:	671a      	str	r2, [r3, #112]	; 0x70
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <HAL_UART_MspInit+0x144>)
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <HAL_UART_MspInit+0x14c>)
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <HAL_UART_MspInit+0x150>)
 8000902:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <HAL_UART_MspInit+0x14c>)
 8000906:	2210      	movs	r2, #16
 8000908:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <HAL_UART_MspInit+0x14c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_UART_MspInit+0x14c>)
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_UART_MspInit+0x14c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x14c>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_UART_MspInit+0x14c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_UART_MspInit+0x14c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_UART_MspInit+0x14c>)
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fa27 	bl	8000d84 <HAL_DMA_Init>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800093a:	f7ff ff43 	bl	80007c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <HAL_UART_MspInit+0x14c>)
 8000942:	66da      	str	r2, [r3, #108]	; 0x6c
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_UART_MspInit+0x14c>)
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	201c      	movs	r0, #28
 8000950:	f000 f9e6 	bl	8000d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000954:	201c      	movs	r0, #28
 8000956:	f000 f9f8 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b00b      	add	sp, #44	; 0x2c
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40004400 	.word	0x40004400
 8000968:	40021000 	.word	0x40021000
 800096c:	20000118 	.word	0x20000118
 8000970:	40020058 	.word	0x40020058
 8000974:	2000015c 	.word	0x2000015c
 8000978:	40020044 	.word	0x40020044

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 *  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f8d0 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <DMA1_Channel4_5_IRQHandler+0x1c>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fb0f 	bl	8000fda <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <DMA1_Channel4_5_IRQHandler+0x20>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fb0b 	bl	8000fda <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	2000015c 	.word	0x2000015c
 80009d0:	20000118 	.word	0x20000118

080009d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <USART2_IRQHandler+0x14>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 fad8 	bl	8001f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	20000094 	.word	0x20000094

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	18d3      	adds	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f002 fbe4 	bl	80031e8 <__errno>
 8000a20:	0003      	movs	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	425b      	negs	r3, r3
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	18d2      	adds	r2, r2, r3
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b006      	add	sp, #24
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20002000 	.word	0x20002000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	20000214 	.word	0x20000214
 8000a54:	20000230 	.word	0x20000230

08000a58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490e      	ldr	r1, [pc, #56]	; (8000aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0b      	ldr	r4, [pc, #44]	; (8000ab0 <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a8e:	f7ff ffe3 	bl	8000a58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a92:	f002 fbaf 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fc55 	bl	8000344 <main>

08000a9a <LoopForever>:

LoopForever:
    b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   r0, =_estack
 8000a9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000aa8:	08003c60 	.word	0x08003c60
  ldr r2, =_sbss
 8000aac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ab0:	2000022c 	.word	0x2000022c

08000ab4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_COMP_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <HAL_Init+0x24>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_Init+0x24>)
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 f809 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ace:	f7ff fe7f 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_InitTick+0x5c>)
 8000aea:	681c      	ldr	r4, [r3, #0]
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_InitTick+0x60>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	0019      	movs	r1, r3
 8000af2:	23fa      	movs	r3, #250	; 0xfa
 8000af4:	0098      	lsls	r0, r3, #2
 8000af6:	f7ff fb19 	bl	800012c <__udivsi3>
 8000afa:	0003      	movs	r3, r0
 8000afc:	0019      	movs	r1, r3
 8000afe:	0020      	movs	r0, r4
 8000b00:	f7ff fb14 	bl	800012c <__udivsi3>
 8000b04:	0003      	movs	r3, r0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 f92f 	bl	8000d6a <HAL_SYSTICK_Config>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e00f      	b.n	8000b34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d80b      	bhi.n	8000b32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	425b      	negs	r3, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 f8fc 	bl	8000d20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_InitTick+0x64>)
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b003      	add	sp, #12
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000010 	.word	0x20000010
 8000b44:	2000000c 	.word	0x2000000c

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	001a      	movs	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	18d2      	adds	r2, r2, r3
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_IncTick+0x20>)
 8000b5a:	601a      	str	r2, [r3, #0]
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	20000010 	.word	0x20000010
 8000b68:	20000218 	.word	0x20000218

08000b6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20000218 	.word	0x20000218

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff fff0 	bl	8000b6c <HAL_GetTick>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3301      	adds	r3, #1
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_Delay+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	189b      	adds	r3, r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	f7ff ffe0 	bl	8000b6c <HAL_GetTick>
 8000bac:	0002      	movs	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b004      	add	sp, #16
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000010 	.word	0x20000010

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	0002      	movs	r2, r0
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bda:	d809      	bhi.n	8000bf0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	001a      	movs	r2, r3
 8000be2:	231f      	movs	r3, #31
 8000be4:	401a      	ands	r2, r3
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_EnableIRQ+0x30>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	4091      	lsls	r1, r2
 8000bec:	000a      	movs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]
  }
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	0002      	movs	r2, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c10:	d828      	bhi.n	8000c64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c12:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <__NVIC_SetPriority+0xd4>)
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	33c0      	adds	r3, #192	; 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	589b      	ldr	r3, [r3, r2]
 8000c22:	1dfa      	adds	r2, r7, #7
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	0011      	movs	r1, r2
 8000c28:	2203      	movs	r2, #3
 8000c2a:	400a      	ands	r2, r1
 8000c2c:	00d2      	lsls	r2, r2, #3
 8000c2e:	21ff      	movs	r1, #255	; 0xff
 8000c30:	4091      	lsls	r1, r2
 8000c32:	000a      	movs	r2, r1
 8000c34:	43d2      	mvns	r2, r2
 8000c36:	401a      	ands	r2, r3
 8000c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	401a      	ands	r2, r3
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	0018      	movs	r0, r3
 8000c48:	2303      	movs	r3, #3
 8000c4a:	4003      	ands	r3, r0
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c50:	481f      	ldr	r0, [pc, #124]	; (8000cd0 <__NVIC_SetPriority+0xd4>)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	33c0      	adds	r3, #192	; 0xc0
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c62:	e031      	b.n	8000cc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <__NVIC_SetPriority+0xd8>)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	400b      	ands	r3, r1
 8000c70:	3b08      	subs	r3, #8
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3306      	adds	r3, #6
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	1dfa      	adds	r2, r7, #7
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	0011      	movs	r1, r2
 8000c84:	2203      	movs	r2, #3
 8000c86:	400a      	ands	r2, r1
 8000c88:	00d2      	lsls	r2, r2, #3
 8000c8a:	21ff      	movs	r1, #255	; 0xff
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	000a      	movs	r2, r1
 8000c90:	43d2      	mvns	r2, r2
 8000c92:	401a      	ands	r2, r3
 8000c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	019b      	lsls	r3, r3, #6
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	401a      	ands	r2, r3
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	4003      	ands	r3, r0
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <__NVIC_SetPriority+0xd8>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	001c      	movs	r4, r3
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	4023      	ands	r3, r4
 8000cb8:	3b08      	subs	r3, #8
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	3306      	adds	r3, #6
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	18c3      	adds	r3, r0, r3
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b003      	add	sp, #12
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	1e5a      	subs	r2, r3, #1
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	045b      	lsls	r3, r3, #17
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d301      	bcc.n	8000cf0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cec:	2301      	movs	r3, #1
 8000cee:	e010      	b.n	8000d12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <SysTick_Config+0x44>)
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff ff7c 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x44>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x44>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	1c02      	adds	r2, r0, #0
 8000d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b004      	add	sp, #16
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	0002      	movs	r2, r0
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff ff33 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff ffaf 	bl	8000cd8 <SysTick_Config>
 8000d7a:	0003      	movs	r3, r0
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b002      	add	sp, #8
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e036      	b.n	8000e08 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2221      	movs	r2, #33	; 0x21
 8000d9e:	2102      	movs	r1, #2
 8000da0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <HAL_DMA_Init+0x8c>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 f9c4 	bl	8001178 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2221      	movs	r2, #33	; 0x21
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2220      	movs	r2, #32
 8000e02:	2100      	movs	r1, #0
 8000e04:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}  
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b004      	add	sp, #16
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	ffffc00f 	.word	0xffffc00f

08000e14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2317      	movs	r3, #23
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	5c9b      	ldrb	r3, [r3, r2]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <HAL_DMA_Start_IT+0x24>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e04f      	b.n	8000ed8 <HAL_DMA_Start_IT+0xc4>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2221      	movs	r2, #33	; 0x21
 8000e44:	5c9b      	ldrb	r3, [r3, r2]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d13a      	bne.n	8000ec2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2221      	movs	r2, #33	; 0x21
 8000e50:	2102      	movs	r1, #2
 8000e52:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	438a      	bics	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f000 f954 	bl	800111e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d008      	beq.n	8000e90 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	210e      	movs	r1, #14
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e00f      	b.n	8000eb0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	210a      	movs	r1, #10
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2104      	movs	r1, #4
 8000eac:	438a      	bics	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	e007      	b.n	8000ed2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000eca:	2317      	movs	r3, #23
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000ed2:	2317      	movs	r3, #23
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
} 
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b006      	add	sp, #24
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2221      	movs	r2, #33	; 0x21
 8000eec:	5c9b      	ldrb	r3, [r3, r2]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d008      	beq.n	8000f06 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e020      	b.n	8000f48 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	210e      	movs	r1, #14
 8000f12:	438a      	bics	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	438a      	bics	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2221      	movs	r2, #33	; 0x21
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2220      	movs	r2, #32
 8000f42:	2100      	movs	r1, #0
 8000f44:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f58:	210f      	movs	r1, #15
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2221      	movs	r2, #33	; 0x21
 8000f64:	5c9b      	ldrb	r3, [r3, r2]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d006      	beq.n	8000f7a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2204      	movs	r2, #4
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e028      	b.n	8000fcc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	210e      	movs	r1, #14
 8000f86:	438a      	bics	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	438a      	bics	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2221      	movs	r2, #33	; 0x21
 8000fae:	2101      	movs	r1, #1
 8000fb0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	0010      	movs	r0, r2
 8000fca:	4798      	blx	r3
    } 
  }
  return status;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	781b      	ldrb	r3, [r3, #0]
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	0013      	movs	r3, r2
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4013      	ands	r3, r2
 8001000:	d024      	beq.n	800104c <HAL_DMA_IRQHandler+0x72>
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	4013      	ands	r3, r2
 8001008:	d020      	beq.n	800104c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2220      	movs	r2, #32
 8001012:	4013      	ands	r3, r2
 8001014:	d107      	bne.n	8001026 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2104      	movs	r1, #4
 8001022:	438a      	bics	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102e:	2104      	movs	r1, #4
 8001030:	4091      	lsls	r1, r2
 8001032:	000a      	movs	r2, r1
 8001034:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	2b00      	cmp	r3, #0
 800103c:	d100      	bne.n	8001040 <HAL_DMA_IRQHandler+0x66>
 800103e:	e06a      	b.n	8001116 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	0010      	movs	r0, r2
 8001048:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800104a:	e064      	b.n	8001116 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	2202      	movs	r2, #2
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	d02b      	beq.n	80010b4 <HAL_DMA_IRQHandler+0xda>
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	d027      	beq.n	80010b4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2220      	movs	r2, #32
 800106c:	4013      	ands	r3, r2
 800106e:	d10b      	bne.n	8001088 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	210a      	movs	r1, #10
 800107c:	438a      	bics	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2221      	movs	r2, #33	; 0x21
 8001084:	2101      	movs	r1, #1
 8001086:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001090:	2102      	movs	r1, #2
 8001092:	4091      	lsls	r1, r2
 8001094:	000a      	movs	r2, r1
 8001096:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2220      	movs	r2, #32
 800109c:	2100      	movs	r1, #0
 800109e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d036      	beq.n	8001116 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	0010      	movs	r0, r2
 80010b0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80010b2:	e030      	b.n	8001116 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	2208      	movs	r2, #8
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	4013      	ands	r3, r2
 80010c2:	d028      	beq.n	8001116 <HAL_DMA_IRQHandler+0x13c>
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2208      	movs	r2, #8
 80010c8:	4013      	ands	r3, r2
 80010ca:	d024      	beq.n	8001116 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	210e      	movs	r1, #14
 80010d8:	438a      	bics	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e4:	2101      	movs	r1, #1
 80010e6:	4091      	lsls	r1, r2
 80010e8:	000a      	movs	r2, r1
 80010ea:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2221      	movs	r2, #33	; 0x21
 80010f6:	2101      	movs	r1, #1
 80010f8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	0010      	movs	r0, r2
 8001112:	4798      	blx	r3
    }
   }
}  
 8001114:	e7ff      	b.n	8001116 <HAL_DMA_IRQHandler+0x13c>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}

0800111e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001134:	2101      	movs	r1, #1
 8001136:	4091      	lsls	r1, r2
 8001138:	000a      	movs	r2, r1
 800113a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b10      	cmp	r3, #16
 800114a:	d108      	bne.n	800115e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800115c:	e007      	b.n	800116e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	60da      	str	r2, [r3, #12]
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <DMA_CalcBaseAndBitshift+0x30>)
 8001186:	4694      	mov	ip, r2
 8001188:	4463      	add	r3, ip
 800118a:	2114      	movs	r1, #20
 800118c:	0018      	movs	r0, r3
 800118e:	f7fe ffcd 	bl	800012c <__udivsi3>
 8001192:	0003      	movs	r3, r0
 8001194:	009a      	lsls	r2, r3, #2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <DMA_CalcBaseAndBitshift+0x34>)
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	bffdfff8 	.word	0xbffdfff8
 80011ac:	40020000 	.word	0x40020000

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	e14f      	b.n	8001460 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4091      	lsls	r1, r2
 80011ca:	000a      	movs	r2, r1
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d100      	bne.n	80011d8 <HAL_GPIO_Init+0x28>
 80011d6:	e140      	b.n	800145a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2203      	movs	r2, #3
 80011de:	4013      	ands	r3, r2
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d005      	beq.n	80011f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2203      	movs	r2, #3
 80011ea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d130      	bne.n	8001252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	409a      	lsls	r2, r3
 80011fe:	0013      	movs	r3, r2
 8001200:	43da      	mvns	r2, r3
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	409a      	lsls	r2, r3
 8001212:	0013      	movs	r3, r2
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001226:	2201      	movs	r2, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
 800122c:	0013      	movs	r3, r2
 800122e:	43da      	mvns	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	2201      	movs	r2, #1
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2203      	movs	r2, #3
 8001258:	4013      	ands	r3, r2
 800125a:	2b03      	cmp	r3, #3
 800125c:	d017      	beq.n	800128e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2203      	movs	r2, #3
 8001294:	4013      	ands	r3, r2
 8001296:	2b02      	cmp	r3, #2
 8001298:	d123      	bne.n	80012e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	08da      	lsrs	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3208      	adds	r2, #8
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	58d3      	ldr	r3, [r2, r3]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2207      	movs	r2, #7
 80012ac:	4013      	ands	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2107      	movs	r1, #7
 80012c6:	400b      	ands	r3, r1
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	0092      	lsls	r2, r2, #2
 80012de:	6939      	ldr	r1, [r7, #16]
 80012e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	43da      	mvns	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2203      	movs	r2, #3
 8001300:	401a      	ands	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	23c0      	movs	r3, #192	; 0xc0
 800131c:	029b      	lsls	r3, r3, #10
 800131e:	4013      	ands	r3, r2
 8001320:	d100      	bne.n	8001324 <HAL_GPIO_Init+0x174>
 8001322:	e09a      	b.n	800145a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001324:	4b54      	ldr	r3, [pc, #336]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 800132a:	2101      	movs	r1, #1
 800132c:	430a      	orrs	r2, r1
 800132e:	619a      	str	r2, [r3, #24]
 8001330:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	2201      	movs	r2, #1
 8001336:	4013      	ands	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_GPIO_Init+0x2cc>)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	589b      	ldr	r3, [r3, r2]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2203      	movs	r2, #3
 800134e:	4013      	ands	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	409a      	lsls	r2, r3
 8001356:	0013      	movs	r3, r2
 8001358:	43da      	mvns	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	2390      	movs	r3, #144	; 0x90
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	429a      	cmp	r2, r3
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x1e2>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a44      	ldr	r2, [pc, #272]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x1de>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a43      	ldr	r2, [pc, #268]	; (8001484 <HAL_GPIO_Init+0x2d4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x1da>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a42      	ldr	r2, [pc, #264]	; (8001488 <HAL_GPIO_Init+0x2d8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x1d6>
 8001382:	2303      	movs	r3, #3
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x1e4>
 8001386:	2305      	movs	r3, #5
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x1e4>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x1e4>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x1e4>
 8001392:	2300      	movs	r3, #0
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	2103      	movs	r1, #3
 8001398:	400a      	ands	r2, r1
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013a4:	4935      	ldr	r1, [pc, #212]	; (800147c <HAL_GPIO_Init+0x2cc>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b2:	4b36      	ldr	r3, [pc, #216]	; (800148c <HAL_GPIO_Init+0x2dc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	4013      	ands	r3, r2
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <HAL_GPIO_Init+0x2dc>)
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_GPIO_Init+0x2dc>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43da      	mvns	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	029b      	lsls	r3, r3, #10
 80013f4:	4013      	ands	r3, r2
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <HAL_GPIO_Init+0x2dc>)
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_GPIO_Init+0x2dc>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43da      	mvns	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	035b      	lsls	r3, r3, #13
 800141e:	4013      	ands	r3, r2
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_GPIO_Init+0x2dc>)
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_GPIO_Init+0x2dc>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43da      	mvns	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	039b      	lsls	r3, r3, #14
 8001448:	4013      	ands	r3, r2
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_GPIO_Init+0x2dc>)
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	40da      	lsrs	r2, r3
 8001468:	1e13      	subs	r3, r2, #0
 800146a:	d000      	beq.n	800146e <HAL_GPIO_Init+0x2be>
 800146c:	e6a8      	b.n	80011c0 <HAL_GPIO_Init+0x10>
  } 
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b006      	add	sp, #24
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000
 8001480:	48000400 	.word	0x48000400
 8001484:	48000800 	.word	0x48000800
 8001488:	48000c00 	.word	0x48000c00
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	0008      	movs	r0, r1
 800149a:	0011      	movs	r1, r2
 800149c:	1cbb      	adds	r3, r7, #2
 800149e:	1c02      	adds	r2, r0, #0
 80014a0:	801a      	strh	r2, [r3, #0]
 80014a2:	1c7b      	adds	r3, r7, #1
 80014a4:	1c0a      	adds	r2, r1, #0
 80014a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	1c7b      	adds	r3, r7, #1
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b0:	1cbb      	adds	r3, r7, #2
 80014b2:	881a      	ldrh	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b8:	e003      	b.n	80014c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ba:	1cbb      	adds	r3, r7, #2
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e301      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2201      	movs	r2, #1
 80014e4:	4013      	ands	r3, r2
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x1e>
 80014e8:	e08d      	b.n	8001606 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014ea:	4bc3      	ldr	r3, [pc, #780]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	220c      	movs	r2, #12
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00e      	beq.n	8001514 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f6:	4bc0      	ldr	r3, [pc, #768]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	220c      	movs	r2, #12
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d116      	bne.n	8001530 <HAL_RCC_OscConfig+0x64>
 8001502:	4bbd      	ldr	r3, [pc, #756]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	401a      	ands	r2, r3
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	025b      	lsls	r3, r3, #9
 8001510:	429a      	cmp	r2, r3
 8001512:	d10d      	bne.n	8001530 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	4bb8      	ldr	r3, [pc, #736]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	029b      	lsls	r3, r3, #10
 800151c:	4013      	ands	r3, r2
 800151e:	d100      	bne.n	8001522 <HAL_RCC_OscConfig+0x56>
 8001520:	e070      	b.n	8001604 <HAL_RCC_OscConfig+0x138>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d000      	beq.n	800152c <HAL_RCC_OscConfig+0x60>
 800152a:	e06b      	b.n	8001604 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e2d8      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_RCC_OscConfig+0x7c>
 8001538:	4baf      	ldr	r3, [pc, #700]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4bae      	ldr	r3, [pc, #696]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	0249      	lsls	r1, r1, #9
 8001542:	430a      	orrs	r2, r1
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e02f      	b.n	80015a8 <HAL_RCC_OscConfig+0xdc>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x9e>
 8001550:	4ba9      	ldr	r3, [pc, #676]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4ba8      	ldr	r3, [pc, #672]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001556:	49a9      	ldr	r1, [pc, #676]	; (80017fc <HAL_RCC_OscConfig+0x330>)
 8001558:	400a      	ands	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	4ba6      	ldr	r3, [pc, #664]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4ba5      	ldr	r3, [pc, #660]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001562:	49a7      	ldr	r1, [pc, #668]	; (8001800 <HAL_RCC_OscConfig+0x334>)
 8001564:	400a      	ands	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e01e      	b.n	80015a8 <HAL_RCC_OscConfig+0xdc>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d10e      	bne.n	8001590 <HAL_RCC_OscConfig+0xc4>
 8001572:	4ba1      	ldr	r3, [pc, #644]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4ba0      	ldr	r3, [pc, #640]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	02c9      	lsls	r1, r1, #11
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	4b9d      	ldr	r3, [pc, #628]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b9c      	ldr	r3, [pc, #624]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0249      	lsls	r1, r1, #9
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xdc>
 8001590:	4b99      	ldr	r3, [pc, #612]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b98      	ldr	r3, [pc, #608]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001596:	4999      	ldr	r1, [pc, #612]	; (80017fc <HAL_RCC_OscConfig+0x330>)
 8001598:	400a      	ands	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	4b96      	ldr	r3, [pc, #600]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b95      	ldr	r3, [pc, #596]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	4997      	ldr	r1, [pc, #604]	; (8001800 <HAL_RCC_OscConfig+0x334>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d014      	beq.n	80015da <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fadc 	bl	8000b6c <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ba:	f7ff fad7 	bl	8000b6c <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b64      	cmp	r3, #100	; 0x64
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e28a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015cc:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	029b      	lsls	r3, r3, #10
 80015d4:	4013      	ands	r3, r2
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0xee>
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fac7 	bl	8000b6c <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fac2 	bl	8000b6c <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e275      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	4b80      	ldr	r3, [pc, #512]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	029b      	lsls	r3, r3, #10
 80015fe:	4013      	ands	r3, r2
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x118>
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x146>
 8001610:	e069      	b.n	80016e6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001612:	4b79      	ldr	r3, [pc, #484]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	220c      	movs	r2, #12
 8001618:	4013      	ands	r3, r2
 800161a:	d00b      	beq.n	8001634 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800161c:	4b76      	ldr	r3, [pc, #472]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	220c      	movs	r2, #12
 8001622:	4013      	ands	r3, r2
 8001624:	2b08      	cmp	r3, #8
 8001626:	d11c      	bne.n	8001662 <HAL_RCC_OscConfig+0x196>
 8001628:	4b73      	ldr	r3, [pc, #460]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	4013      	ands	r3, r2
 8001632:	d116      	bne.n	8001662 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001634:	4b70      	ldr	r3, [pc, #448]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2202      	movs	r2, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x17e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e24b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b6b      	ldr	r3, [pc, #428]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	22f8      	movs	r2, #248	; 0xf8
 8001650:	4393      	bics	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	00da      	lsls	r2, r3, #3
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001660:	e041      	b.n	80016e6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d024      	beq.n	80016b4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b62      	ldr	r3, [pc, #392]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001670:	2101      	movs	r1, #1
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fa79 	bl	8000b6c <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff fa74 	bl	8000b6c <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e227      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2202      	movs	r2, #2
 8001698:	4013      	ands	r3, r2
 800169a:	d0f1      	beq.n	8001680 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	22f8      	movs	r2, #248	; 0xf8
 80016a2:	4393      	bics	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00da      	lsls	r2, r3, #3
 80016ac:	4b52      	ldr	r3, [pc, #328]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e018      	b.n	80016e6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b4f      	ldr	r3, [pc, #316]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	438a      	bics	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fa54 	bl	8000b6c <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff fa4f 	bl	8000b6c <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e202      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016dc:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d1f1      	bne.n	80016ca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2208      	movs	r2, #8
 80016ec:	4013      	ands	r3, r2
 80016ee:	d036      	beq.n	800175e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d019      	beq.n	800172c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f8:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016fc:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	2101      	movs	r1, #1
 8001700:	430a      	orrs	r2, r1
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff fa32 	bl	8000b6c <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff fa2d 	bl	8000b6c <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1e0      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001720:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d0f1      	beq.n	800170e <HAL_RCC_OscConfig+0x242>
 800172a:	e018      	b.n	800175e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800172e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001732:	2101      	movs	r1, #1
 8001734:	438a      	bics	r2, r1
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff fa18 	bl	8000b6c <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff fa13 	bl	8000b6c <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e1c6      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d1f1      	bne.n	8001742 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2204      	movs	r2, #4
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x29e>
 8001768:	e0b4      	b.n	80018d4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176a:	201f      	movs	r0, #31
 800176c:	183b      	adds	r3, r7, r0
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	055b      	lsls	r3, r3, #21
 800177a:	4013      	ands	r3, r2
 800177c:	d110      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001780:	69da      	ldr	r2, [r3, #28]
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	0549      	lsls	r1, r1, #21
 8001788:	430a      	orrs	r2, r1
 800178a:	61da      	str	r2, [r3, #28]
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 800178e:	69da      	ldr	r2, [r3, #28]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	055b      	lsls	r3, r3, #21
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800179a:	183b      	adds	r3, r7, r0
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	d11a      	bne.n	80017e2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	0049      	lsls	r1, r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff f9d7 	bl	8000b6c <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c4:	f7ff f9d2 	bl	8000b6c <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e185      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_OscConfig+0x338>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d10e      	bne.n	8001808 <HAL_RCC_OscConfig+0x33c>
 80017ea:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	4b02      	ldr	r3, [pc, #8]	; (80017f8 <HAL_RCC_OscConfig+0x32c>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	430a      	orrs	r2, r1
 80017f4:	621a      	str	r2, [r3, #32]
 80017f6:	e035      	b.n	8001864 <HAL_RCC_OscConfig+0x398>
 80017f8:	40021000 	.word	0x40021000
 80017fc:	fffeffff 	.word	0xfffeffff
 8001800:	fffbffff 	.word	0xfffbffff
 8001804:	40007000 	.word	0x40007000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x35e>
 8001810:	4bb6      	ldr	r3, [pc, #728]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	4bb5      	ldr	r3, [pc, #724]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001816:	2101      	movs	r1, #1
 8001818:	438a      	bics	r2, r1
 800181a:	621a      	str	r2, [r3, #32]
 800181c:	4bb3      	ldr	r3, [pc, #716]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	4bb2      	ldr	r3, [pc, #712]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001822:	2104      	movs	r1, #4
 8001824:	438a      	bics	r2, r1
 8001826:	621a      	str	r2, [r3, #32]
 8001828:	e01c      	b.n	8001864 <HAL_RCC_OscConfig+0x398>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b05      	cmp	r3, #5
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x380>
 8001832:	4bae      	ldr	r3, [pc, #696]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001834:	6a1a      	ldr	r2, [r3, #32]
 8001836:	4bad      	ldr	r3, [pc, #692]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001838:	2104      	movs	r1, #4
 800183a:	430a      	orrs	r2, r1
 800183c:	621a      	str	r2, [r3, #32]
 800183e:	4bab      	ldr	r3, [pc, #684]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001840:	6a1a      	ldr	r2, [r3, #32]
 8001842:	4baa      	ldr	r3, [pc, #680]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001844:	2101      	movs	r1, #1
 8001846:	430a      	orrs	r2, r1
 8001848:	621a      	str	r2, [r3, #32]
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0x398>
 800184c:	4ba7      	ldr	r3, [pc, #668]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800184e:	6a1a      	ldr	r2, [r3, #32]
 8001850:	4ba6      	ldr	r3, [pc, #664]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001852:	2101      	movs	r1, #1
 8001854:	438a      	bics	r2, r1
 8001856:	621a      	str	r2, [r3, #32]
 8001858:	4ba4      	ldr	r3, [pc, #656]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800185a:	6a1a      	ldr	r2, [r3, #32]
 800185c:	4ba3      	ldr	r3, [pc, #652]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800185e:	2104      	movs	r1, #4
 8001860:	438a      	bics	r2, r1
 8001862:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d014      	beq.n	8001896 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7ff f97e 	bl	8000b6c <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001874:	e009      	b.n	800188a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f7ff f979 	bl	8000b6c <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	4a9b      	ldr	r2, [pc, #620]	; (8001af0 <HAL_RCC_OscConfig+0x624>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e12b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188a:	4b98      	ldr	r3, [pc, #608]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	2202      	movs	r2, #2
 8001890:	4013      	ands	r3, r2
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x3aa>
 8001894:	e013      	b.n	80018be <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff f969 	bl	8000b6c <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189e:	e009      	b.n	80018b4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f7ff f964 	bl	8000b6c <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	4a91      	ldr	r2, [pc, #580]	; (8001af0 <HAL_RCC_OscConfig+0x624>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e116      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	4b8d      	ldr	r3, [pc, #564]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018be:	231f      	movs	r3, #31
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c8:	4b88      	ldr	r3, [pc, #544]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	4b87      	ldr	r3, [pc, #540]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80018ce:	4989      	ldr	r1, [pc, #548]	; (8001af4 <HAL_RCC_OscConfig+0x628>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2210      	movs	r2, #16
 80018da:	4013      	ands	r3, r2
 80018dc:	d063      	beq.n	80019a6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d12a      	bne.n	800193c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018e6:	4b81      	ldr	r3, [pc, #516]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80018e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ea:	4b80      	ldr	r3, [pc, #512]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80018ec:	2104      	movs	r1, #4
 80018ee:	430a      	orrs	r2, r1
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018f2:	4b7e      	ldr	r3, [pc, #504]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80018f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f6:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80018f8:	2101      	movs	r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7ff f935 	bl	8000b6c <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001908:	f7ff f930 	bl	8000b6c <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e0e3      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800191a:	4b74      	ldr	r3, [pc, #464]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800191c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d0f1      	beq.n	8001908 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001924:	4b71      	ldr	r3, [pc, #452]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	22f8      	movs	r2, #248	; 0xf8
 800192a:	4393      	bics	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	00da      	lsls	r2, r3, #3
 8001934:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001936:	430a      	orrs	r2, r1
 8001938:	635a      	str	r2, [r3, #52]	; 0x34
 800193a:	e034      	b.n	80019a6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	3305      	adds	r3, #5
 8001942:	d111      	bne.n	8001968 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001944:	4b69      	ldr	r3, [pc, #420]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800194a:	2104      	movs	r1, #4
 800194c:	438a      	bics	r2, r1
 800194e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001950:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001954:	22f8      	movs	r2, #248	; 0xf8
 8001956:	4393      	bics	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	00da      	lsls	r2, r3, #3
 8001960:	4b62      	ldr	r3, [pc, #392]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001962:	430a      	orrs	r2, r1
 8001964:	635a      	str	r2, [r3, #52]	; 0x34
 8001966:	e01e      	b.n	80019a6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001968:	4b60      	ldr	r3, [pc, #384]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800196a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196c:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800196e:	2104      	movs	r1, #4
 8001970:	430a      	orrs	r2, r1
 8001972:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001974:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001978:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800197a:	2101      	movs	r1, #1
 800197c:	438a      	bics	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff f8f4 	bl	8000b6c <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800198a:	f7ff f8ef 	bl	8000b6c <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0a2      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 800199e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a0:	2202      	movs	r2, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d1f1      	bne.n	800198a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d100      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4e4>
 80019ae:	e097      	b.n	8001ae0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b0:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	220c      	movs	r2, #12
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d100      	bne.n	80019be <HAL_RCC_OscConfig+0x4f2>
 80019bc:	e06b      	b.n	8001a96 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d14c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b49      	ldr	r3, [pc, #292]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b48      	ldr	r3, [pc, #288]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80019cc:	494a      	ldr	r1, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x62c>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff f8cb 	bl	8000b6c <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f8c6 	bl	8000b6c <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e079      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ee:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	049b      	lsls	r3, r3, #18
 80019f6:	4013      	ands	r3, r2
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fa:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	220f      	movs	r2, #15
 8001a00:	4393      	bics	r3, r2
 8001a02:	0019      	movs	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a0e:	4b37      	ldr	r3, [pc, #220]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a3a      	ldr	r2, [pc, #232]	; (8001afc <HAL_RCC_OscConfig+0x630>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	0019      	movs	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	431a      	orrs	r2, r3
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	4b30      	ldr	r3, [pc, #192]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	0449      	lsls	r1, r1, #17
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff f899 	bl	8000b6c <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff f894 	bl	8000b6c <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e047      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	049b      	lsls	r3, r3, #18
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x574>
 8001a5e:	e03f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a66:	4924      	ldr	r1, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x62c>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f87e 	bl	8000b6c <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff f879 	bl	8000b6c <HAL_GetTick>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e02c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	049b      	lsls	r3, r3, #18
 8001a90:	4013      	ands	r3, r2
 8001a92:	d1f0      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5aa>
 8001a94:	e024      	b.n	8001ae0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e01f      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_RCC_OscConfig+0x620>)
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	025b      	lsls	r3, r3, #9
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d10e      	bne.n	8001adc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	23f0      	movs	r3, #240	; 0xf0
 8001ad0:	039b      	lsls	r3, r3, #14
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b008      	add	sp, #32
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40021000 	.word	0x40021000
 8001af0:	00001388 	.word	0x00001388
 8001af4:	efffffff 	.word	0xefffffff
 8001af8:	feffffff 	.word	0xfeffffff
 8001afc:	ffc2ffff 	.word	0xffc2ffff

08001b00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b3      	b.n	8001c7c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b14:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <HAL_RCC_ClockConfig+0x184>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d911      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <HAL_RCC_ClockConfig+0x184>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	4393      	bics	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <HAL_RCC_ClockConfig+0x184>)
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_ClockConfig+0x184>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e09a      	b.n	8001c7c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d015      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2204      	movs	r2, #4
 8001b56:	4013      	ands	r3, r2
 8001b58:	d006      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b5a:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001b60:	21e0      	movs	r1, #224	; 0xe0
 8001b62:	00c9      	lsls	r1, r1, #3
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	22f0      	movs	r2, #240	; 0xf0
 8001b6e:	4393      	bics	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	d040      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d114      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06e      	b.n	8001c7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	049b      	lsls	r3, r3, #18
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d108      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e062      	b.n	8001c7c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e05b      	b.n	8001c7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	4393      	bics	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7fe ffc8 	bl	8000b6c <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be0:	e009      	b.n	8001bf6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be2:	f7fe ffc3 	bl	8000b6c <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_RCC_ClockConfig+0x18c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e042      	b.n	8001c7c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1ec      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_RCC_ClockConfig+0x184>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d211      	bcs.n	8001c3a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_RCC_ClockConfig+0x184>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_RCC_ClockConfig+0x184>)
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_RCC_ClockConfig+0x184>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e020      	b.n	8001c7c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_RCC_ClockConfig+0x190>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c58:	f000 f820 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c5c:	0001      	movs	r1, r0
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x188>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	220f      	movs	r2, #15
 8001c66:	4013      	ands	r3, r2
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x194>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	000a      	movs	r2, r1
 8001c6e:	40da      	lsrs	r2, r3
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x198>)
 8001c72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7fe ff33 	bl	8000ae0 <HAL_InitTick>
  
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b004      	add	sp, #16
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40022000 	.word	0x40022000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	00001388 	.word	0x00001388
 8001c90:	fffff8ff 	.word	0xfffff8ff
 8001c94:	08003c0c 	.word	0x08003c0c
 8001c98:	20000008 	.word	0x20000008

08001c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b08f      	sub	sp, #60	; 0x3c
 8001ca0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ca2:	2314      	movs	r3, #20
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	4a2b      	ldr	r2, [pc, #172]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001caa:	c313      	stmia	r3!, {r0, r1, r4}
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cb6:	c313      	stmia	r3!, {r0, r1, r4}
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd8:	220c      	movs	r2, #12
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d002      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x4a>
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d003      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x50>
 8001ce4:	e02d      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cea:	e02d      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2214      	movs	r2, #20
 8001cf6:	18ba      	adds	r2, r7, r2
 8001cf8:	5cd3      	ldrb	r3, [r2, r3]
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	220f      	movs	r2, #15
 8001d02:	4013      	ands	r3, r2
 8001d04:	1d3a      	adds	r2, r7, #4
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	025b      	lsls	r3, r3, #9
 8001d10:	4013      	ands	r3, r2
 8001d12:	d009      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d18:	f7fe fa08 	bl	800012c <__udivsi3>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	001a      	movs	r2, r3
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	4353      	muls	r3, r2
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
 8001d26:	e009      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d2a:	000a      	movs	r2, r1
 8001d2c:	0152      	lsls	r2, r2, #5
 8001d2e:	1a52      	subs	r2, r2, r1
 8001d30:	0193      	lsls	r3, r2, #6
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	185b      	adds	r3, r3, r1
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d40:	e002      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d46:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b00f      	add	sp, #60	; 0x3c
 8001d50:	bd90      	pop	{r4, r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	08003bec 	.word	0x08003bec
 8001d58:	08003bfc 	.word	0x08003bfc
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	007a1200 	.word	0x007a1200

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	20000008 	.word	0x20000008

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	0001      	movs	r1, r0
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	2207      	movs	r2, #7
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	40d9      	lsrs	r1, r3
 8001d92:	000b      	movs	r3, r1
}    
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08003c1c 	.word	0x08003c1c

08001da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e044      	b.n	8001e40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2274      	movs	r2, #116	; 0x74
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7fe fd2d 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2224      	movs	r2, #36	; 0x24
 8001dd2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 fbd2 	bl	8002590 <UART_SetConfig>
 8001dec:	0003      	movs	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e024      	b.n	8001e40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f000 fd05 	bl	8002810 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	490d      	ldr	r1, [pc, #52]	; (8001e48 <HAL_UART_Init+0xa4>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	212a      	movs	r1, #42	; 0x2a
 8001e22:	438a      	bics	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fd9d 	bl	8002978 <UART_CheckIdleState>
 8001e3e:	0003      	movs	r3, r0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	ffffb7ff 	.word	0xffffb7ff

08001e4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	1dbb      	adds	r3, r7, #6
 8001e58:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d000      	beq.n	8001e64 <HAL_UART_Transmit_DMA+0x18>
 8001e62:	e08a      	b.n	8001f7a <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_UART_Transmit_DMA+0x26>
 8001e6a:	1dbb      	adds	r3, r7, #6
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e082      	b.n	8001f7c <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	015b      	lsls	r3, r3, #5
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d109      	bne.n	8001e96 <HAL_UART_Transmit_DMA+0x4a>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d001      	beq.n	8001e96 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e072      	b.n	8001f7c <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2274      	movs	r2, #116	; 0x74
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_UART_Transmit_DMA+0x58>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e06b      	b.n	8001f7c <HAL_UART_Transmit_DMA+0x130>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2274      	movs	r2, #116	; 0x74
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1dba      	adds	r2, r7, #6
 8001eb6:	2150      	movs	r1, #80	; 0x50
 8001eb8:	8812      	ldrh	r2, [r2, #0]
 8001eba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1dba      	adds	r2, r7, #6
 8001ec0:	2152      	movs	r1, #82	; 0x52
 8001ec2:	8812      	ldrh	r2, [r2, #0]
 8001ec4:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	2100      	movs	r1, #0
 8001ecc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2221      	movs	r2, #33	; 0x21
 8001ed2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02b      	beq.n	8001f34 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee0:	4a28      	ldr	r2, [pc, #160]	; (8001f84 <HAL_UART_Transmit_DMA+0x138>)
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee8:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_UART_Transmit_DMA+0x13c>)
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_UART_Transmit_DMA+0x140>)
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef8:	2200      	movs	r2, #0
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	0019      	movs	r1, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3328      	adds	r3, #40	; 0x28
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	1dbb      	adds	r3, r7, #6
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	f7fe ff7f 	bl	8000e14 <HAL_DMA_Start_IT>
 8001f16:	1e03      	subs	r3, r0, #0
 8001f18:	d00c      	beq.n	8001f34 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	2110      	movs	r1, #16
 8001f20:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2274      	movs	r2, #116	; 0x74
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e023      	b.n	8001f7c <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2240      	movs	r2, #64	; 0x40
 8001f3a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2274      	movs	r2, #116	; 0x74
 8001f40:	2100      	movs	r1, #0
 8001f42:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f44:	f3ef 8310 	mrs	r3, PRIMASK
 8001f48:	613b      	str	r3, [r7, #16]
  return(result);
 8001f4a:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f383 8810 	msr	PRIMASK, r3
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f383 8810 	msr	PRIMASK, r3
}
 8001f74:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
  }
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b008      	add	sp, #32
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	08002de1 	.word	0x08002de1
 8001f88:	08002e75 	.word	0x08002e75
 8001f8c:	08002ff5 	.word	0x08002ff5

08001f90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b0ab      	sub	sp, #172	; 0xac
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	22a4      	movs	r2, #164	; 0xa4
 8001fa0:	18b9      	adds	r1, r7, r2
 8001fa2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	20a0      	movs	r0, #160	; 0xa0
 8001fac:	1839      	adds	r1, r7, r0
 8001fae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	219c      	movs	r1, #156	; 0x9c
 8001fb8:	1879      	adds	r1, r7, r1
 8001fba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001fbc:	0011      	movs	r1, r2
 8001fbe:	18bb      	adds	r3, r7, r2
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a99      	ldr	r2, [pc, #612]	; (8002228 <HAL_UART_IRQHandler+0x298>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2298      	movs	r2, #152	; 0x98
 8001fc8:	18bc      	adds	r4, r7, r2
 8001fca:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001fcc:	18bb      	adds	r3, r7, r2
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d114      	bne.n	8001ffe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d00f      	beq.n	8001ffe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fde:	183b      	adds	r3, r7, r0
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d00a      	beq.n	8001ffe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d100      	bne.n	8001ff2 <HAL_UART_IRQHandler+0x62>
 8001ff0:	e296      	b.n	8002520 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	0010      	movs	r0, r2
 8001ffa:	4798      	blx	r3
      }
      return;
 8001ffc:	e290      	b.n	8002520 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001ffe:	2398      	movs	r3, #152	; 0x98
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d100      	bne.n	800200a <HAL_UART_IRQHandler+0x7a>
 8002008:	e114      	b.n	8002234 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800200a:	239c      	movs	r3, #156	; 0x9c
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2201      	movs	r2, #1
 8002012:	4013      	ands	r3, r2
 8002014:	d106      	bne.n	8002024 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002016:	23a0      	movs	r3, #160	; 0xa0
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a83      	ldr	r2, [pc, #524]	; (800222c <HAL_UART_IRQHandler+0x29c>)
 800201e:	4013      	ands	r3, r2
 8002020:	d100      	bne.n	8002024 <HAL_UART_IRQHandler+0x94>
 8002022:	e107      	b.n	8002234 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002024:	23a4      	movs	r3, #164	; 0xa4
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2201      	movs	r2, #1
 800202c:	4013      	ands	r3, r2
 800202e:	d012      	beq.n	8002056 <HAL_UART_IRQHandler+0xc6>
 8002030:	23a0      	movs	r3, #160	; 0xa0
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d00b      	beq.n	8002056 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2201      	movs	r2, #1
 8002044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	589b      	ldr	r3, [r3, r2]
 800204c:	2201      	movs	r2, #1
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002056:	23a4      	movs	r3, #164	; 0xa4
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2202      	movs	r2, #2
 800205e:	4013      	ands	r3, r2
 8002060:	d011      	beq.n	8002086 <HAL_UART_IRQHandler+0xf6>
 8002062:	239c      	movs	r3, #156	; 0x9c
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2201      	movs	r2, #1
 800206a:	4013      	ands	r3, r2
 800206c:	d00b      	beq.n	8002086 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2202      	movs	r2, #2
 8002074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	589b      	ldr	r3, [r3, r2]
 800207c:	2204      	movs	r2, #4
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002086:	23a4      	movs	r3, #164	; 0xa4
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2204      	movs	r2, #4
 800208e:	4013      	ands	r3, r2
 8002090:	d011      	beq.n	80020b6 <HAL_UART_IRQHandler+0x126>
 8002092:	239c      	movs	r3, #156	; 0x9c
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2201      	movs	r2, #1
 800209a:	4013      	ands	r3, r2
 800209c:	d00b      	beq.n	80020b6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2204      	movs	r2, #4
 80020a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	589b      	ldr	r3, [r3, r2]
 80020ac:	2202      	movs	r2, #2
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80020b6:	23a4      	movs	r3, #164	; 0xa4
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2208      	movs	r2, #8
 80020be:	4013      	ands	r3, r2
 80020c0:	d017      	beq.n	80020f2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020c2:	23a0      	movs	r3, #160	; 0xa0
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2220      	movs	r2, #32
 80020ca:	4013      	ands	r3, r2
 80020cc:	d105      	bne.n	80020da <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80020ce:	239c      	movs	r3, #156	; 0x9c
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020d8:	d00b      	beq.n	80020f2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2208      	movs	r2, #8
 80020e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	589b      	ldr	r3, [r3, r2]
 80020e8:	2208      	movs	r2, #8
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80020f2:	23a4      	movs	r3, #164	; 0xa4
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4013      	ands	r3, r2
 80020fe:	d013      	beq.n	8002128 <HAL_UART_IRQHandler+0x198>
 8002100:	23a0      	movs	r3, #160	; 0xa0
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	04db      	lsls	r3, r3, #19
 800210a:	4013      	ands	r3, r2
 800210c:	d00c      	beq.n	8002128 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2280      	movs	r2, #128	; 0x80
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	589b      	ldr	r3, [r3, r2]
 800211e:	2220      	movs	r2, #32
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	589b      	ldr	r3, [r3, r2]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d100      	bne.n	8002134 <HAL_UART_IRQHandler+0x1a4>
 8002132:	e1f7      	b.n	8002524 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002134:	23a4      	movs	r3, #164	; 0xa4
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2220      	movs	r2, #32
 800213c:	4013      	ands	r3, r2
 800213e:	d00e      	beq.n	800215e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002140:	23a0      	movs	r3, #160	; 0xa0
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2220      	movs	r2, #32
 8002148:	4013      	ands	r3, r2
 800214a:	d008      	beq.n	800215e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	0010      	movs	r0, r2
 800215c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	589b      	ldr	r3, [r3, r2]
 8002164:	2194      	movs	r1, #148	; 0x94
 8002166:	187a      	adds	r2, r7, r1
 8002168:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	4013      	ands	r3, r2
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d004      	beq.n	8002182 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002178:	187b      	adds	r3, r7, r1
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2228      	movs	r2, #40	; 0x28
 800217e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002180:	d047      	beq.n	8002212 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 fdc9 	bl	8002d1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2240      	movs	r2, #64	; 0x40
 8002192:	4013      	ands	r3, r2
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d137      	bne.n	8002208 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002198:	f3ef 8310 	mrs	r3, PRIMASK
 800219c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800219e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021a0:	2090      	movs	r0, #144	; 0x90
 80021a2:	183a      	adds	r2, r7, r0
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	2301      	movs	r3, #1
 80021a8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ac:	f383 8810 	msr	PRIMASK, r3
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	438a      	bics	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	183b      	adds	r3, r7, r0
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021ca:	f383 8810 	msr	PRIMASK, r3
}
 80021ce:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d012      	beq.n	80021fe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a14      	ldr	r2, [pc, #80]	; (8002230 <HAL_UART_IRQHandler+0x2a0>)
 80021de:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7fe feb3 	bl	8000f50 <HAL_DMA_Abort_IT>
 80021ea:	1e03      	subs	r3, r0, #0
 80021ec:	d01a      	beq.n	8002224 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	0018      	movs	r0, r3
 80021fa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021fc:	e012      	b.n	8002224 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 f9bd 	bl	8002580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002206:	e00d      	b.n	8002224 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	0018      	movs	r0, r3
 800220c:	f000 f9b8 	bl	8002580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002210:	e008      	b.n	8002224 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0018      	movs	r0, r3
 8002216:	f000 f9b3 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	2100      	movs	r1, #0
 8002220:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002222:	e17f      	b.n	8002524 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002224:	46c0      	nop			; (mov r8, r8)
    return;
 8002226:	e17d      	b.n	8002524 <HAL_UART_IRQHandler+0x594>
 8002228:	0000080f 	.word	0x0000080f
 800222c:	04000120 	.word	0x04000120
 8002230:	08003077 	.word	0x08003077

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002238:	2b01      	cmp	r3, #1
 800223a:	d000      	beq.n	800223e <HAL_UART_IRQHandler+0x2ae>
 800223c:	e131      	b.n	80024a2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800223e:	23a4      	movs	r3, #164	; 0xa4
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2210      	movs	r2, #16
 8002246:	4013      	ands	r3, r2
 8002248:	d100      	bne.n	800224c <HAL_UART_IRQHandler+0x2bc>
 800224a:	e12a      	b.n	80024a2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800224c:	23a0      	movs	r3, #160	; 0xa0
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2210      	movs	r2, #16
 8002254:	4013      	ands	r3, r2
 8002256:	d100      	bne.n	800225a <HAL_UART_IRQHandler+0x2ca>
 8002258:	e123      	b.n	80024a2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2210      	movs	r2, #16
 8002260:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	4013      	ands	r3, r2
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d000      	beq.n	8002272 <HAL_UART_IRQHandler+0x2e2>
 8002270:	e09b      	b.n	80023aa <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	217e      	movs	r1, #126	; 0x7e
 800227c:	187b      	adds	r3, r7, r1
 800227e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002280:	187b      	adds	r3, r7, r1
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d100      	bne.n	800228a <HAL_UART_IRQHandler+0x2fa>
 8002288:	e14e      	b.n	8002528 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2258      	movs	r2, #88	; 0x58
 800228e:	5a9b      	ldrh	r3, [r3, r2]
 8002290:	187a      	adds	r2, r7, r1
 8002292:	8812      	ldrh	r2, [r2, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d300      	bcc.n	800229a <HAL_UART_IRQHandler+0x30a>
 8002298:	e146      	b.n	8002528 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	187a      	adds	r2, r7, r1
 800229e:	215a      	movs	r1, #90	; 0x5a
 80022a0:	8812      	ldrh	r2, [r2, #0]
 80022a2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d06e      	beq.n	800238c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ae:	f3ef 8310 	mrs	r3, PRIMASK
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80022b8:	2301      	movs	r3, #1
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022be:	f383 8810 	msr	PRIMASK, r3
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	499a      	ldr	r1, [pc, #616]	; (8002538 <HAL_UART_IRQHandler+0x5a8>)
 80022d0:	400a      	ands	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022da:	f383 8810 	msr	PRIMASK, r3
}
 80022de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e0:	f3ef 8310 	mrs	r3, PRIMASK
 80022e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80022e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e8:	677b      	str	r3, [r7, #116]	; 0x74
 80022ea:	2301      	movs	r3, #1
 80022ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f0:	f383 8810 	msr	PRIMASK, r3
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	438a      	bics	r2, r1
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230c:	f383 8810 	msr	PRIMASK, r3
}
 8002310:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002312:	f3ef 8310 	mrs	r3, PRIMASK
 8002316:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002318:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800231a:	673b      	str	r3, [r7, #112]	; 0x70
 800231c:	2301      	movs	r3, #1
 800231e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002322:	f383 8810 	msr	PRIMASK, r3
}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2140      	movs	r1, #64	; 0x40
 8002334:	438a      	bics	r2, r1
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800233a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233e:	f383 8810 	msr	PRIMASK, r3
}
 8002342:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002350:	f3ef 8310 	mrs	r3, PRIMASK
 8002354:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002356:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800235a:	2301      	movs	r3, #1
 800235c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002360:	f383 8810 	msr	PRIMASK, r3
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2110      	movs	r1, #16
 8002372:	438a      	bics	r2, r1
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002378:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800237a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237c:	f383 8810 	msr	PRIMASK, r3
}
 8002380:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	0018      	movs	r0, r3
 8002388:	f7fe fdaa 	bl	8000ee0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2258      	movs	r2, #88	; 0x58
 8002390:	5a9a      	ldrh	r2, [r3, r2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	215a      	movs	r1, #90	; 0x5a
 8002396:	5a5b      	ldrh	r3, [r3, r1]
 8002398:	b29b      	uxth	r3, r3
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0011      	movs	r1, r2
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7fd ff4e 	bl	8000244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80023a8:	e0be      	b.n	8002528 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2258      	movs	r2, #88	; 0x58
 80023ae:	5a99      	ldrh	r1, [r3, r2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	225a      	movs	r2, #90	; 0x5a
 80023b4:	5a9b      	ldrh	r3, [r3, r2]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	208e      	movs	r0, #142	; 0x8e
 80023ba:	183b      	adds	r3, r7, r0
 80023bc:	1a8a      	subs	r2, r1, r2
 80023be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	225a      	movs	r2, #90	; 0x5a
 80023c4:	5a9b      	ldrh	r3, [r3, r2]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d100      	bne.n	80023ce <HAL_UART_IRQHandler+0x43e>
 80023cc:	e0ae      	b.n	800252c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80023ce:	183b      	adds	r3, r7, r0
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d100      	bne.n	80023d8 <HAL_UART_IRQHandler+0x448>
 80023d6:	e0a9      	b.n	800252c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d8:	f3ef 8310 	mrs	r3, PRIMASK
 80023dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80023de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023e0:	2488      	movs	r4, #136	; 0x88
 80023e2:	193a      	adds	r2, r7, r4
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	2301      	movs	r3, #1
 80023e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f383 8810 	msr	PRIMASK, r3
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	494f      	ldr	r1, [pc, #316]	; (800253c <HAL_UART_IRQHandler+0x5ac>)
 80023fe:	400a      	ands	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	193b      	adds	r3, r7, r4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f383 8810 	msr	PRIMASK, r3
}
 800240e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002410:	f3ef 8310 	mrs	r3, PRIMASK
 8002414:	61bb      	str	r3, [r7, #24]
  return(result);
 8002416:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002418:	2484      	movs	r4, #132	; 0x84
 800241a:	193a      	adds	r2, r7, r4
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	2301      	movs	r3, #1
 8002420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f383 8810 	msr	PRIMASK, r3
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	438a      	bics	r2, r1
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	193b      	adds	r3, r7, r4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f383 8810 	msr	PRIMASK, r3
}
 8002446:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800245a:	f3ef 8310 	mrs	r3, PRIMASK
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002462:	2480      	movs	r4, #128	; 0x80
 8002464:	193a      	adds	r2, r7, r4
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	f383 8810 	msr	PRIMASK, r3
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2110      	movs	r1, #16
 8002480:	438a      	bics	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	193b      	adds	r3, r7, r4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	f383 8810 	msr	PRIMASK, r3
}
 8002490:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002492:	183b      	adds	r3, r7, r0
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0011      	movs	r1, r2
 800249a:	0018      	movs	r0, r3
 800249c:	f7fd fed2 	bl	8000244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80024a0:	e044      	b.n	800252c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80024a2:	23a4      	movs	r3, #164	; 0xa4
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	035b      	lsls	r3, r3, #13
 80024ac:	4013      	ands	r3, r2
 80024ae:	d010      	beq.n	80024d2 <HAL_UART_IRQHandler+0x542>
 80024b0:	239c      	movs	r3, #156	; 0x9c
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	03db      	lsls	r3, r3, #15
 80024ba:	4013      	ands	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0352      	lsls	r2, r2, #13
 80024c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 fe15 	bl	80030fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80024d0:	e02f      	b.n	8002532 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80024d2:	23a4      	movs	r3, #164	; 0xa4
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	4013      	ands	r3, r2
 80024dc:	d00f      	beq.n	80024fe <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024de:	23a0      	movs	r3, #160	; 0xa0
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	4013      	ands	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01e      	beq.n	8002530 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	0010      	movs	r0, r2
 80024fa:	4798      	blx	r3
    }
    return;
 80024fc:	e018      	b.n	8002530 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024fe:	23a4      	movs	r3, #164	; 0xa4
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2240      	movs	r2, #64	; 0x40
 8002506:	4013      	ands	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_UART_IRQHandler+0x5a2>
 800250a:	23a0      	movs	r3, #160	; 0xa0
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2240      	movs	r2, #64	; 0x40
 8002512:	4013      	ands	r3, r2
 8002514:	d00d      	beq.n	8002532 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 fdc3 	bl	80030a4 <UART_EndTransmit_IT>
    return;
 800251e:	e008      	b.n	8002532 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	e006      	b.n	8002532 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	e004      	b.n	8002532 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	e002      	b.n	8002532 <HAL_UART_IRQHandler+0x5a2>
      return;
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	e000      	b.n	8002532 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002530:	46c0      	nop			; (mov r8, r8)
  }

}
 8002532:	46bd      	mov	sp, r7
 8002534:	b02b      	add	sp, #172	; 0xac
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	fffffeff 	.word	0xfffffeff
 800253c:	fffffedf 	.word	0xfffffedf

08002540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}

08002590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002598:	231e      	movs	r3, #30
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a8d      	ldr	r2, [pc, #564]	; (80027f4 <UART_SetConfig+0x264>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a88      	ldr	r2, [pc, #544]	; (80027f8 <UART_SetConfig+0x268>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a7f      	ldr	r2, [pc, #508]	; (80027fc <UART_SetConfig+0x26c>)
 80025fe:	4013      	ands	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	430a      	orrs	r2, r1
 800260a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a7b      	ldr	r2, [pc, #492]	; (8002800 <UART_SetConfig+0x270>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d127      	bne.n	8002666 <UART_SetConfig+0xd6>
 8002616:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <UART_SetConfig+0x274>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	2203      	movs	r2, #3
 800261c:	4013      	ands	r3, r2
 800261e:	2b03      	cmp	r3, #3
 8002620:	d00d      	beq.n	800263e <UART_SetConfig+0xae>
 8002622:	d81b      	bhi.n	800265c <UART_SetConfig+0xcc>
 8002624:	2b02      	cmp	r3, #2
 8002626:	d014      	beq.n	8002652 <UART_SetConfig+0xc2>
 8002628:	d818      	bhi.n	800265c <UART_SetConfig+0xcc>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <UART_SetConfig+0xa4>
 800262e:	2b01      	cmp	r3, #1
 8002630:	d00a      	beq.n	8002648 <UART_SetConfig+0xb8>
 8002632:	e013      	b.n	800265c <UART_SetConfig+0xcc>
 8002634:	231f      	movs	r3, #31
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e021      	b.n	8002682 <UART_SetConfig+0xf2>
 800263e:	231f      	movs	r3, #31
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2202      	movs	r2, #2
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e01c      	b.n	8002682 <UART_SetConfig+0xf2>
 8002648:	231f      	movs	r3, #31
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2204      	movs	r2, #4
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e017      	b.n	8002682 <UART_SetConfig+0xf2>
 8002652:	231f      	movs	r3, #31
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2208      	movs	r2, #8
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e012      	b.n	8002682 <UART_SetConfig+0xf2>
 800265c:	231f      	movs	r3, #31
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	2210      	movs	r2, #16
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e00d      	b.n	8002682 <UART_SetConfig+0xf2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a67      	ldr	r2, [pc, #412]	; (8002808 <UART_SetConfig+0x278>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d104      	bne.n	800267a <UART_SetConfig+0xea>
 8002670:	231f      	movs	r3, #31
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e003      	b.n	8002682 <UART_SetConfig+0xf2>
 800267a:	231f      	movs	r3, #31
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	2210      	movs	r2, #16
 8002680:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	429a      	cmp	r2, r3
 800268c:	d15d      	bne.n	800274a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800268e:	231f      	movs	r3, #31
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d015      	beq.n	80026c4 <UART_SetConfig+0x134>
 8002698:	dc18      	bgt.n	80026cc <UART_SetConfig+0x13c>
 800269a:	2b04      	cmp	r3, #4
 800269c:	d00d      	beq.n	80026ba <UART_SetConfig+0x12a>
 800269e:	dc15      	bgt.n	80026cc <UART_SetConfig+0x13c>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <UART_SetConfig+0x11a>
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d005      	beq.n	80026b4 <UART_SetConfig+0x124>
 80026a8:	e010      	b.n	80026cc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026aa:	f7ff fb65 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80026ae:	0003      	movs	r3, r0
 80026b0:	61bb      	str	r3, [r7, #24]
        break;
 80026b2:	e012      	b.n	80026da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026b4:	4b55      	ldr	r3, [pc, #340]	; (800280c <UART_SetConfig+0x27c>)
 80026b6:	61bb      	str	r3, [r7, #24]
        break;
 80026b8:	e00f      	b.n	80026da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ba:	f7ff faef 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 80026be:	0003      	movs	r3, r0
 80026c0:	61bb      	str	r3, [r7, #24]
        break;
 80026c2:	e00a      	b.n	80026da <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	61bb      	str	r3, [r7, #24]
        break;
 80026ca:	e006      	b.n	80026da <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026d0:	231e      	movs	r3, #30
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
        break;
 80026d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d100      	bne.n	80026e2 <UART_SetConfig+0x152>
 80026e0:	e07b      	b.n	80027da <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	005a      	lsls	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	18d2      	adds	r2, r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	0019      	movs	r1, r3
 80026f4:	0010      	movs	r0, r2
 80026f6:	f7fd fd19 	bl	800012c <__udivsi3>
 80026fa:	0003      	movs	r3, r0
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b0f      	cmp	r3, #15
 8002704:	d91c      	bls.n	8002740 <UART_SetConfig+0x1b0>
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	025b      	lsls	r3, r3, #9
 800270c:	429a      	cmp	r2, r3
 800270e:	d217      	bcs.n	8002740 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	b29a      	uxth	r2, r3
 8002714:	200e      	movs	r0, #14
 8002716:	183b      	adds	r3, r7, r0
 8002718:	210f      	movs	r1, #15
 800271a:	438a      	bics	r2, r1
 800271c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	b29b      	uxth	r3, r3
 8002724:	2207      	movs	r2, #7
 8002726:	4013      	ands	r3, r2
 8002728:	b299      	uxth	r1, r3
 800272a:	183b      	adds	r3, r7, r0
 800272c:	183a      	adds	r2, r7, r0
 800272e:	8812      	ldrh	r2, [r2, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	183a      	adds	r2, r7, r0
 800273a:	8812      	ldrh	r2, [r2, #0]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	e04c      	b.n	80027da <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002740:	231e      	movs	r3, #30
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e047      	b.n	80027da <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800274a:	231f      	movs	r3, #31
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d015      	beq.n	8002780 <UART_SetConfig+0x1f0>
 8002754:	dc18      	bgt.n	8002788 <UART_SetConfig+0x1f8>
 8002756:	2b04      	cmp	r3, #4
 8002758:	d00d      	beq.n	8002776 <UART_SetConfig+0x1e6>
 800275a:	dc15      	bgt.n	8002788 <UART_SetConfig+0x1f8>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <UART_SetConfig+0x1d6>
 8002760:	2b02      	cmp	r3, #2
 8002762:	d005      	beq.n	8002770 <UART_SetConfig+0x1e0>
 8002764:	e010      	b.n	8002788 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002766:	f7ff fb07 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 800276a:	0003      	movs	r3, r0
 800276c:	61bb      	str	r3, [r7, #24]
        break;
 800276e:	e012      	b.n	8002796 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002770:	4b26      	ldr	r3, [pc, #152]	; (800280c <UART_SetConfig+0x27c>)
 8002772:	61bb      	str	r3, [r7, #24]
        break;
 8002774:	e00f      	b.n	8002796 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002776:	f7ff fa91 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 800277a:	0003      	movs	r3, r0
 800277c:	61bb      	str	r3, [r7, #24]
        break;
 800277e:	e00a      	b.n	8002796 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	61bb      	str	r3, [r7, #24]
        break;
 8002786:	e006      	b.n	8002796 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800278c:	231e      	movs	r3, #30
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
        break;
 8002794:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01e      	beq.n	80027da <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	085a      	lsrs	r2, r3, #1
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	18d2      	adds	r2, r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0019      	movs	r1, r3
 80027ac:	0010      	movs	r0, r2
 80027ae:	f7fd fcbd 	bl	800012c <__udivsi3>
 80027b2:	0003      	movs	r3, r0
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	d909      	bls.n	80027d2 <UART_SetConfig+0x242>
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	025b      	lsls	r3, r3, #9
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d204      	bcs.n	80027d2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	60da      	str	r2, [r3, #12]
 80027d0:	e003      	b.n	80027da <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80027d2:	231e      	movs	r3, #30
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027e6:	231e      	movs	r3, #30
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	781b      	ldrb	r3, [r3, #0]
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b008      	add	sp, #32
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	ffff69f3 	.word	0xffff69f3
 80027f8:	ffffcfff 	.word	0xffffcfff
 80027fc:	fffff4ff 	.word	0xfffff4ff
 8002800:	40013800 	.word	0x40013800
 8002804:	40021000 	.word	0x40021000
 8002808:	40004400 	.word	0x40004400
 800280c:	007a1200 	.word	0x007a1200

08002810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2201      	movs	r2, #1
 800281e:	4013      	ands	r3, r2
 8002820:	d00b      	beq.n	800283a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a4a      	ldr	r2, [pc, #296]	; (8002954 <UART_AdvFeatureConfig+0x144>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2202      	movs	r2, #2
 8002840:	4013      	ands	r3, r2
 8002842:	d00b      	beq.n	800285c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a43      	ldr	r2, [pc, #268]	; (8002958 <UART_AdvFeatureConfig+0x148>)
 800284c:	4013      	ands	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	2204      	movs	r2, #4
 8002862:	4013      	ands	r3, r2
 8002864:	d00b      	beq.n	800287e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a3b      	ldr	r2, [pc, #236]	; (800295c <UART_AdvFeatureConfig+0x14c>)
 800286e:	4013      	ands	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	2208      	movs	r2, #8
 8002884:	4013      	ands	r3, r2
 8002886:	d00b      	beq.n	80028a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4a34      	ldr	r2, [pc, #208]	; (8002960 <UART_AdvFeatureConfig+0x150>)
 8002890:	4013      	ands	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	2210      	movs	r2, #16
 80028a6:	4013      	ands	r3, r2
 80028a8:	d00b      	beq.n	80028c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a2c      	ldr	r2, [pc, #176]	; (8002964 <UART_AdvFeatureConfig+0x154>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2220      	movs	r2, #32
 80028c8:	4013      	ands	r3, r2
 80028ca:	d00b      	beq.n	80028e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	4a25      	ldr	r2, [pc, #148]	; (8002968 <UART_AdvFeatureConfig+0x158>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	4013      	ands	r3, r2
 80028ec:	d01d      	beq.n	800292a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	; (800296c <UART_AdvFeatureConfig+0x15c>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	035b      	lsls	r3, r3, #13
 800290e:	429a      	cmp	r2, r3
 8002910:	d10b      	bne.n	800292a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a15      	ldr	r2, [pc, #84]	; (8002970 <UART_AdvFeatureConfig+0x160>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	4013      	ands	r3, r2
 8002932:	d00b      	beq.n	800294c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a0e      	ldr	r2, [pc, #56]	; (8002974 <UART_AdvFeatureConfig+0x164>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  }
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}
 8002954:	fffdffff 	.word	0xfffdffff
 8002958:	fffeffff 	.word	0xfffeffff
 800295c:	fffbffff 	.word	0xfffbffff
 8002960:	ffff7fff 	.word	0xffff7fff
 8002964:	ffffefff 	.word	0xffffefff
 8002968:	ffffdfff 	.word	0xffffdfff
 800296c:	ffefffff 	.word	0xffefffff
 8002970:	ff9fffff 	.word	0xff9fffff
 8002974:	fff7ffff 	.word	0xfff7ffff

08002978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af02      	add	r7, sp, #8
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	2100      	movs	r1, #0
 8002986:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002988:	f7fe f8f0 	bl	8000b6c <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2208      	movs	r2, #8
 8002998:	4013      	ands	r3, r2
 800299a:	2b08      	cmp	r3, #8
 800299c:	d10c      	bne.n	80029b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	0391      	lsls	r1, r2, #14
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <UART_CheckIdleState+0x8c>)
 80029a8:	9200      	str	r2, [sp, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f000 f82c 	bl	8002a08 <UART_WaitOnFlagUntilTimeout>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d001      	beq.n	80029b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e021      	b.n	80029fc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2204      	movs	r2, #4
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d10c      	bne.n	80029e0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	03d1      	lsls	r1, r2, #15
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <UART_CheckIdleState+0x8c>)
 80029d0:	9200      	str	r2, [sp, #0]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f000 f818 	bl	8002a08 <UART_WaitOnFlagUntilTimeout>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d001      	beq.n	80029e0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e00d      	b.n	80029fc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2220      	movs	r2, #32
 80029ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2274      	movs	r2, #116	; 0x74
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b004      	add	sp, #16
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	01ffffff 	.word	0x01ffffff

08002a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b094      	sub	sp, #80	; 0x50
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	1dfb      	adds	r3, r7, #7
 8002a16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a18:	e0a3      	b.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	d100      	bne.n	8002a22 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a20:	e09f      	b.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7fe f8a3 	bl	8000b6c <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d13d      	bne.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a38:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
 8002a42:	2301      	movs	r3, #1
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	f383 8810 	msr	PRIMASK, r3
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	494c      	ldr	r1, [pc, #304]	; (8002b8c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	f383 8810 	msr	PRIMASK, r3
}
 8002a68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a72:	643b      	str	r3, [r7, #64]	; 0x40
 8002a74:	2301      	movs	r3, #1
 8002a76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	f383 8810 	msr	PRIMASK, r3
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a96:	f383 8810 	msr	PRIMASK, r3
}
 8002a9a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2274      	movs	r2, #116	; 0x74
 8002aac:	2100      	movs	r1, #0
 8002aae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e067      	b.n	8002b84 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2204      	movs	r2, #4
 8002abc:	4013      	ands	r3, r2
 8002abe:	d050      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	401a      	ands	r2, r3
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d146      	bne.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ade:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae2:	613b      	str	r3, [r7, #16]
  return(result);
 8002ae4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae8:	2301      	movs	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f383 8810 	msr	PRIMASK, r3
}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4923      	ldr	r1, [pc, #140]	; (8002b8c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f383 8810 	msr	PRIMASK, r3
}
 8002b0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b10:	f3ef 8310 	mrs	r3, PRIMASK
 8002b14:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b16:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	f383 8810 	msr	PRIMASK, r3
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	438a      	bics	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	f383 8810 	msr	PRIMASK, r3
}
 8002b40:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2220      	movs	r2, #32
 8002b46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	2120      	movs	r1, #32
 8002b54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2274      	movs	r2, #116	; 0x74
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e010      	b.n	8002b84 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	425a      	negs	r2, r3
 8002b72:	4153      	adcs	r3, r2
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	001a      	movs	r2, r3
 8002b78:	1dfb      	adds	r3, r7, #7
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d100      	bne.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002b80:	e74b      	b.n	8002a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b014      	add	sp, #80	; 0x50
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	fffffe5f 	.word	0xfffffe5f

08002b90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b090      	sub	sp, #64	; 0x40
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	1dbb      	adds	r3, r7, #6
 8002b9c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1dba      	adds	r2, r7, #6
 8002ba8:	2158      	movs	r1, #88	; 0x58
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2222      	movs	r2, #34	; 0x22
 8002bba:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02b      	beq.n	8002c1c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a3f      	ldr	r2, [pc, #252]	; (8002cc8 <UART_Start_Receive_DMA+0x138>)
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4a3e      	ldr	r2, [pc, #248]	; (8002ccc <UART_Start_Receive_DMA+0x13c>)
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a3d      	ldr	r2, [pc, #244]	; (8002cd0 <UART_Start_Receive_DMA+0x140>)
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	2200      	movs	r2, #0
 8002be2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3324      	adds	r3, #36	; 0x24
 8002bee:	0019      	movs	r1, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	1dbb      	adds	r3, r7, #6
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	f7fe f90b 	bl	8000e14 <HAL_DMA_Start_IT>
 8002bfe:	1e03      	subs	r3, r0, #0
 8002c00:	d00c      	beq.n	8002c1c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	2110      	movs	r1, #16
 8002c08:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2274      	movs	r2, #116	; 0x74
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e050      	b.n	8002cbe <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2274      	movs	r2, #116	; 0x74
 8002c20:	2100      	movs	r1, #0
 8002c22:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c24:	f3ef 8310 	mrs	r3, PRIMASK
 8002c28:	613b      	str	r3, [r7, #16]
  return(result);
 8002c2a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2e:	2301      	movs	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f383 8810 	msr	PRIMASK, r3
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	0049      	lsls	r1, r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f383 8810 	msr	PRIMASK, r3
}
 8002c56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c58:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c5e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c62:	2301      	movs	r3, #1
 8002c64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	f383 8810 	msr	PRIMASK, r3
}
 8002c88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
 8002c94:	2301      	movs	r3, #1
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	430a      	orrs	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b010      	add	sp, #64	; 0x40
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	08002e95 	.word	0x08002e95
 8002ccc:	08002fb9 	.word	0x08002fb9
 8002cd0:	08002ff5 	.word	0x08002ff5

08002cd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f383 8810 	msr	PRIMASK, r3
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	21c0      	movs	r1, #192	; 0xc0
 8002cfe:	438a      	bics	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	679a      	str	r2, [r3, #120]	; 0x78
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b006      	add	sp, #24
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	; 0x38
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d24:	f3ef 8310 	mrs	r3, PRIMASK
 8002d28:	617b      	str	r3, [r7, #20]
  return(result);
 8002d2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2e:	2301      	movs	r3, #1
 8002d30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f383 8810 	msr	PRIMASK, r3
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4925      	ldr	r1, [pc, #148]	; (8002ddc <UART_EndRxTransfer+0xc0>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f383 8810 	msr	PRIMASK, r3
}
 8002d54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d56:	f3ef 8310 	mrs	r3, PRIMASK
 8002d5a:	623b      	str	r3, [r7, #32]
  return(result);
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d60:	2301      	movs	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f383 8810 	msr	PRIMASK, r3
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	438a      	bics	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	f383 8810 	msr	PRIMASK, r3
}
 8002d86:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d118      	bne.n	8002dc2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d90:	f3ef 8310 	mrs	r3, PRIMASK
 8002d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f383 8810 	msr	PRIMASK, r3
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2110      	movs	r1, #16
 8002db2:	438a      	bics	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f383 8810 	msr	PRIMASK, r3
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b00e      	add	sp, #56	; 0x38
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	fffffedf 	.word	0xfffffedf

08002de0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08c      	sub	sp, #48	; 0x30
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d035      	beq.n	8002e62 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	2252      	movs	r2, #82	; 0x52
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002e02:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e04:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e08:	2301      	movs	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f383 8810 	msr	PRIMASK, r3
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	438a      	bics	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f383 8810 	msr	PRIMASK, r3
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e30:	f3ef 8310 	mrs	r3, PRIMASK
 8002e34:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e36:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f383 8810 	msr	PRIMASK, r3
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2140      	movs	r1, #64	; 0x40
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f383 8810 	msr	PRIMASK, r3
}
 8002e60:	e004      	b.n	8002e6c <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7ff fb6b 	bl	8002540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b00c      	add	sp, #48	; 0x30
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff fb63 	bl	8002550 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b094      	sub	sp, #80	; 0x50
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d06e      	beq.n	8002f88 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eac:	225a      	movs	r2, #90	; 0x5a
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002eb8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f383 8810 	msr	PRIMASK, r3
}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4938      	ldr	r1, [pc, #224]	; (8002fb4 <UART_DMAReceiveCplt+0x120>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	f383 8810 	msr	PRIMASK, r3
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eec:	647b      	str	r3, [r7, #68]	; 0x44
 8002eee:	2301      	movs	r3, #1
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	f383 8810 	msr	PRIMASK, r3
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	438a      	bics	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	f383 8810 	msr	PRIMASK, r3
}
 8002f14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f16:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f20:	2301      	movs	r3, #1
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	f383 8810 	msr	PRIMASK, r3
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	438a      	bics	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	f383 8810 	msr	PRIMASK, r3
}
 8002f46:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d118      	bne.n	8002f88 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f56:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f60:	2301      	movs	r3, #1
 8002f62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f383 8810 	msr	PRIMASK, r3
}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2110      	movs	r1, #16
 8002f78:	438a      	bics	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d108      	bne.n	8002fa2 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f92:	2258      	movs	r2, #88	; 0x58
 8002f94:	5a9a      	ldrh	r2, [r3, r2]
 8002f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd f952 	bl	8000244 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fa0:	e003      	b.n	8002faa <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8002fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff fadb 	bl	8002560 <HAL_UART_RxCpltCallback>
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b014      	add	sp, #80	; 0x50
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	fffffeff 	.word	0xfffffeff

08002fb8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10a      	bne.n	8002fe4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2258      	movs	r2, #88	; 0x58
 8002fd2:	5a9b      	ldrh	r3, [r3, r2]
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	0011      	movs	r1, r2
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7fd f931 	bl	8000244 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fe2:	e003      	b.n	8002fec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff fac2 	bl	8002570 <HAL_UART_RxHalfCpltCallback>
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b004      	add	sp, #16
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003006:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800300c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	4013      	ands	r3, r2
 8003018:	2b80      	cmp	r3, #128	; 0x80
 800301a:	d10a      	bne.n	8003032 <UART_DMAError+0x3e>
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b21      	cmp	r3, #33	; 0x21
 8003020:	d107      	bne.n	8003032 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2252      	movs	r2, #82	; 0x52
 8003026:	2100      	movs	r1, #0
 8003028:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff fe51 	bl	8002cd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2240      	movs	r2, #64	; 0x40
 800303a:	4013      	ands	r3, r2
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d10a      	bne.n	8003056 <UART_DMAError+0x62>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b22      	cmp	r3, #34	; 0x22
 8003044:	d107      	bne.n	8003056 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	225a      	movs	r2, #90	; 0x5a
 800304a:	2100      	movs	r1, #0
 800304c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff fe63 	bl	8002d1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	589b      	ldr	r3, [r3, r2]
 800305c:	2210      	movs	r2, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff fa89 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b006      	add	sp, #24
 8003074:	bd80      	pop	{r7, pc}

08003076 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	225a      	movs	r2, #90	; 0x5a
 8003088:	2100      	movs	r1, #0
 800308a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2252      	movs	r2, #82	; 0x52
 8003090:	2100      	movs	r1, #0
 8003092:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	0018      	movs	r0, r3
 8003098:	f7ff fa72 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b004      	add	sp, #16
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ac:	f3ef 8310 	mrs	r3, PRIMASK
 80030b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80030b2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	2301      	movs	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	438a      	bics	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7ff fa27 	bl	8002540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b006      	add	sp, #24
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b002      	add	sp, #8
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800310a:	b5b0      	push	{r4, r5, r7, lr}
 800310c:	b08a      	sub	sp, #40	; 0x28
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	1dbb      	adds	r3, r7, #6
 8003116:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800311c:	2b20      	cmp	r3, #32
 800311e:	d15e      	bne.n	80031de <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8003126:	1dbb      	adds	r3, r7, #6
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e056      	b.n	80031e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	015b      	lsls	r3, r3, #5
 800313a:	429a      	cmp	r2, r3
 800313c:	d109      	bne.n	8003152 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2201      	movs	r2, #1
 800314a:	4013      	ands	r3, r2
 800314c:	d001      	beq.n	8003152 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e046      	b.n	80031e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2274      	movs	r2, #116	; 0x74
 8003156:	5c9b      	ldrb	r3, [r3, r2]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 800315c:	2302      	movs	r3, #2
 800315e:	e03f      	b.n	80031e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2274      	movs	r2, #116	; 0x74
 8003164:	2101      	movs	r1, #1
 8003166:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800316e:	2527      	movs	r5, #39	; 0x27
 8003170:	197c      	adds	r4, r7, r5
 8003172:	1dbb      	adds	r3, r7, #6
 8003174:	881a      	ldrh	r2, [r3, #0]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	0018      	movs	r0, r3
 800317c:	f7ff fd08 	bl	8002b90 <UART_Start_Receive_DMA>
 8003180:	0003      	movs	r3, r0
 8003182:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003184:	197b      	adds	r3, r7, r5
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d124      	bne.n	80031d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	2b01      	cmp	r3, #1
 8003192:	d11c      	bne.n	80031ce <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2210      	movs	r2, #16
 800319a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319c:	f3ef 8310 	mrs	r3, PRIMASK
 80031a0:	617b      	str	r3, [r7, #20]
  return(result);
 80031a2:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	2301      	movs	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f383 8810 	msr	PRIMASK, r3
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2110      	movs	r1, #16
 80031be:	430a      	orrs	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f383 8810 	msr	PRIMASK, r3
}
 80031cc:	e003      	b.n	80031d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80031ce:	2327      	movs	r3, #39	; 0x27
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80031d6:	2327      	movs	r3, #39	; 0x27
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	e000      	b.n	80031e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b00a      	add	sp, #40	; 0x28
 80031e6:	bdb0      	pop	{r4, r5, r7, pc}

080031e8 <__errno>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <__errno+0x8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4770      	bx	lr
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	20000014 	.word	0x20000014

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	2600      	movs	r6, #0
 80031f8:	4d0c      	ldr	r5, [pc, #48]	; (800322c <__libc_init_array+0x38>)
 80031fa:	4c0d      	ldr	r4, [pc, #52]	; (8003230 <__libc_init_array+0x3c>)
 80031fc:	1b64      	subs	r4, r4, r5
 80031fe:	10a4      	asrs	r4, r4, #2
 8003200:	42a6      	cmp	r6, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	2600      	movs	r6, #0
 8003206:	f000 fc9d 	bl	8003b44 <_init>
 800320a:	4d0a      	ldr	r5, [pc, #40]	; (8003234 <__libc_init_array+0x40>)
 800320c:	4c0a      	ldr	r4, [pc, #40]	; (8003238 <__libc_init_array+0x44>)
 800320e:	1b64      	subs	r4, r4, r5
 8003210:	10a4      	asrs	r4, r4, #2
 8003212:	42a6      	cmp	r6, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	00b3      	lsls	r3, r6, #2
 800321a:	58eb      	ldr	r3, [r5, r3]
 800321c:	4798      	blx	r3
 800321e:	3601      	adds	r6, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	00b3      	lsls	r3, r6, #2
 8003224:	58eb      	ldr	r3, [r5, r3]
 8003226:	4798      	blx	r3
 8003228:	3601      	adds	r6, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	08003c58 	.word	0x08003c58
 8003230:	08003c58 	.word	0x08003c58
 8003234:	08003c58 	.word	0x08003c58
 8003238:	08003c5c 	.word	0x08003c5c

0800323c <memcpy>:
 800323c:	2300      	movs	r3, #0
 800323e:	b510      	push	{r4, lr}
 8003240:	429a      	cmp	r2, r3
 8003242:	d100      	bne.n	8003246 <memcpy+0xa>
 8003244:	bd10      	pop	{r4, pc}
 8003246:	5ccc      	ldrb	r4, [r1, r3]
 8003248:	54c4      	strb	r4, [r0, r3]
 800324a:	3301      	adds	r3, #1
 800324c:	e7f8      	b.n	8003240 <memcpy+0x4>

0800324e <memset>:
 800324e:	0003      	movs	r3, r0
 8003250:	1882      	adds	r2, r0, r2
 8003252:	4293      	cmp	r3, r2
 8003254:	d100      	bne.n	8003258 <memset+0xa>
 8003256:	4770      	bx	lr
 8003258:	7019      	strb	r1, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	e7f9      	b.n	8003252 <memset+0x4>
	...

08003260 <siprintf>:
 8003260:	b40e      	push	{r1, r2, r3}
 8003262:	b500      	push	{lr}
 8003264:	490b      	ldr	r1, [pc, #44]	; (8003294 <siprintf+0x34>)
 8003266:	b09c      	sub	sp, #112	; 0x70
 8003268:	ab1d      	add	r3, sp, #116	; 0x74
 800326a:	9002      	str	r0, [sp, #8]
 800326c:	9006      	str	r0, [sp, #24]
 800326e:	9107      	str	r1, [sp, #28]
 8003270:	9104      	str	r1, [sp, #16]
 8003272:	4809      	ldr	r0, [pc, #36]	; (8003298 <siprintf+0x38>)
 8003274:	4909      	ldr	r1, [pc, #36]	; (800329c <siprintf+0x3c>)
 8003276:	cb04      	ldmia	r3!, {r2}
 8003278:	9105      	str	r1, [sp, #20]
 800327a:	6800      	ldr	r0, [r0, #0]
 800327c:	a902      	add	r1, sp, #8
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	f000 f882 	bl	8003388 <_svfiprintf_r>
 8003284:	2300      	movs	r3, #0
 8003286:	9a02      	ldr	r2, [sp, #8]
 8003288:	7013      	strb	r3, [r2, #0]
 800328a:	b01c      	add	sp, #112	; 0x70
 800328c:	bc08      	pop	{r3}
 800328e:	b003      	add	sp, #12
 8003290:	4718      	bx	r3
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	7fffffff 	.word	0x7fffffff
 8003298:	20000014 	.word	0x20000014
 800329c:	ffff0208 	.word	0xffff0208

080032a0 <strncmp>:
 80032a0:	b530      	push	{r4, r5, lr}
 80032a2:	0005      	movs	r5, r0
 80032a4:	1e10      	subs	r0, r2, #0
 80032a6:	d008      	beq.n	80032ba <strncmp+0x1a>
 80032a8:	2400      	movs	r4, #0
 80032aa:	3a01      	subs	r2, #1
 80032ac:	5d2b      	ldrb	r3, [r5, r4]
 80032ae:	5d08      	ldrb	r0, [r1, r4]
 80032b0:	4283      	cmp	r3, r0
 80032b2:	d101      	bne.n	80032b8 <strncmp+0x18>
 80032b4:	4294      	cmp	r4, r2
 80032b6:	d101      	bne.n	80032bc <strncmp+0x1c>
 80032b8:	1a18      	subs	r0, r3, r0
 80032ba:	bd30      	pop	{r4, r5, pc}
 80032bc:	3401      	adds	r4, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f4      	bne.n	80032ac <strncmp+0xc>
 80032c2:	e7f9      	b.n	80032b8 <strncmp+0x18>

080032c4 <__ssputs_r>:
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c6:	688e      	ldr	r6, [r1, #8]
 80032c8:	b085      	sub	sp, #20
 80032ca:	0007      	movs	r7, r0
 80032cc:	000c      	movs	r4, r1
 80032ce:	9203      	str	r2, [sp, #12]
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	429e      	cmp	r6, r3
 80032d4:	d83c      	bhi.n	8003350 <__ssputs_r+0x8c>
 80032d6:	2390      	movs	r3, #144	; 0x90
 80032d8:	898a      	ldrh	r2, [r1, #12]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	421a      	tst	r2, r3
 80032de:	d034      	beq.n	800334a <__ssputs_r+0x86>
 80032e0:	6909      	ldr	r1, [r1, #16]
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	6960      	ldr	r0, [r4, #20]
 80032e6:	1a5b      	subs	r3, r3, r1
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	2303      	movs	r3, #3
 80032ec:	4343      	muls	r3, r0
 80032ee:	0fdd      	lsrs	r5, r3, #31
 80032f0:	18ed      	adds	r5, r5, r3
 80032f2:	9b01      	ldr	r3, [sp, #4]
 80032f4:	9802      	ldr	r0, [sp, #8]
 80032f6:	3301      	adds	r3, #1
 80032f8:	181b      	adds	r3, r3, r0
 80032fa:	106d      	asrs	r5, r5, #1
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	d900      	bls.n	8003302 <__ssputs_r+0x3e>
 8003300:	001d      	movs	r5, r3
 8003302:	0553      	lsls	r3, r2, #21
 8003304:	d532      	bpl.n	800336c <__ssputs_r+0xa8>
 8003306:	0029      	movs	r1, r5
 8003308:	0038      	movs	r0, r7
 800330a:	f000 fb49 	bl	80039a0 <_malloc_r>
 800330e:	1e06      	subs	r6, r0, #0
 8003310:	d109      	bne.n	8003326 <__ssputs_r+0x62>
 8003312:	230c      	movs	r3, #12
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	2340      	movs	r3, #64	; 0x40
 8003318:	2001      	movs	r0, #1
 800331a:	89a2      	ldrh	r2, [r4, #12]
 800331c:	4240      	negs	r0, r0
 800331e:	4313      	orrs	r3, r2
 8003320:	81a3      	strh	r3, [r4, #12]
 8003322:	b005      	add	sp, #20
 8003324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003326:	9a02      	ldr	r2, [sp, #8]
 8003328:	6921      	ldr	r1, [r4, #16]
 800332a:	f7ff ff87 	bl	800323c <memcpy>
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <__ssputs_r+0xc0>)
 8003332:	401a      	ands	r2, r3
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	4313      	orrs	r3, r2
 8003338:	81a3      	strh	r3, [r4, #12]
 800333a:	9b02      	ldr	r3, [sp, #8]
 800333c:	6126      	str	r6, [r4, #16]
 800333e:	18f6      	adds	r6, r6, r3
 8003340:	6026      	str	r6, [r4, #0]
 8003342:	6165      	str	r5, [r4, #20]
 8003344:	9e01      	ldr	r6, [sp, #4]
 8003346:	1aed      	subs	r5, r5, r3
 8003348:	60a5      	str	r5, [r4, #8]
 800334a:	9b01      	ldr	r3, [sp, #4]
 800334c:	429e      	cmp	r6, r3
 800334e:	d900      	bls.n	8003352 <__ssputs_r+0x8e>
 8003350:	9e01      	ldr	r6, [sp, #4]
 8003352:	0032      	movs	r2, r6
 8003354:	9903      	ldr	r1, [sp, #12]
 8003356:	6820      	ldr	r0, [r4, #0]
 8003358:	f000 faa3 	bl	80038a2 <memmove>
 800335c:	68a3      	ldr	r3, [r4, #8]
 800335e:	2000      	movs	r0, #0
 8003360:	1b9b      	subs	r3, r3, r6
 8003362:	60a3      	str	r3, [r4, #8]
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	199e      	adds	r6, r3, r6
 8003368:	6026      	str	r6, [r4, #0]
 800336a:	e7da      	b.n	8003322 <__ssputs_r+0x5e>
 800336c:	002a      	movs	r2, r5
 800336e:	0038      	movs	r0, r7
 8003370:	f000 fb8c 	bl	8003a8c <_realloc_r>
 8003374:	1e06      	subs	r6, r0, #0
 8003376:	d1e0      	bne.n	800333a <__ssputs_r+0x76>
 8003378:	0038      	movs	r0, r7
 800337a:	6921      	ldr	r1, [r4, #16]
 800337c:	f000 faa4 	bl	80038c8 <_free_r>
 8003380:	e7c7      	b.n	8003312 <__ssputs_r+0x4e>
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	fffffb7f 	.word	0xfffffb7f

08003388 <_svfiprintf_r>:
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	b0a1      	sub	sp, #132	; 0x84
 800338c:	9003      	str	r0, [sp, #12]
 800338e:	001d      	movs	r5, r3
 8003390:	898b      	ldrh	r3, [r1, #12]
 8003392:	000f      	movs	r7, r1
 8003394:	0016      	movs	r6, r2
 8003396:	061b      	lsls	r3, r3, #24
 8003398:	d511      	bpl.n	80033be <_svfiprintf_r+0x36>
 800339a:	690b      	ldr	r3, [r1, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10e      	bne.n	80033be <_svfiprintf_r+0x36>
 80033a0:	2140      	movs	r1, #64	; 0x40
 80033a2:	f000 fafd 	bl	80039a0 <_malloc_r>
 80033a6:	6038      	str	r0, [r7, #0]
 80033a8:	6138      	str	r0, [r7, #16]
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d105      	bne.n	80033ba <_svfiprintf_r+0x32>
 80033ae:	230c      	movs	r3, #12
 80033b0:	9a03      	ldr	r2, [sp, #12]
 80033b2:	3801      	subs	r0, #1
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	b021      	add	sp, #132	; 0x84
 80033b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ba:	2340      	movs	r3, #64	; 0x40
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	2300      	movs	r3, #0
 80033c0:	ac08      	add	r4, sp, #32
 80033c2:	6163      	str	r3, [r4, #20]
 80033c4:	3320      	adds	r3, #32
 80033c6:	7663      	strb	r3, [r4, #25]
 80033c8:	3310      	adds	r3, #16
 80033ca:	76a3      	strb	r3, [r4, #26]
 80033cc:	9507      	str	r5, [sp, #28]
 80033ce:	0035      	movs	r5, r6
 80033d0:	782b      	ldrb	r3, [r5, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <_svfiprintf_r+0x52>
 80033d6:	2b25      	cmp	r3, #37	; 0x25
 80033d8:	d147      	bne.n	800346a <_svfiprintf_r+0xe2>
 80033da:	1bab      	subs	r3, r5, r6
 80033dc:	9305      	str	r3, [sp, #20]
 80033de:	42b5      	cmp	r5, r6
 80033e0:	d00c      	beq.n	80033fc <_svfiprintf_r+0x74>
 80033e2:	0032      	movs	r2, r6
 80033e4:	0039      	movs	r1, r7
 80033e6:	9803      	ldr	r0, [sp, #12]
 80033e8:	f7ff ff6c 	bl	80032c4 <__ssputs_r>
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	d100      	bne.n	80033f2 <_svfiprintf_r+0x6a>
 80033f0:	e0ae      	b.n	8003550 <_svfiprintf_r+0x1c8>
 80033f2:	6962      	ldr	r2, [r4, #20]
 80033f4:	9b05      	ldr	r3, [sp, #20]
 80033f6:	4694      	mov	ip, r2
 80033f8:	4463      	add	r3, ip
 80033fa:	6163      	str	r3, [r4, #20]
 80033fc:	782b      	ldrb	r3, [r5, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d100      	bne.n	8003404 <_svfiprintf_r+0x7c>
 8003402:	e0a5      	b.n	8003550 <_svfiprintf_r+0x1c8>
 8003404:	2201      	movs	r2, #1
 8003406:	2300      	movs	r3, #0
 8003408:	4252      	negs	r2, r2
 800340a:	6062      	str	r2, [r4, #4]
 800340c:	a904      	add	r1, sp, #16
 800340e:	3254      	adds	r2, #84	; 0x54
 8003410:	1852      	adds	r2, r2, r1
 8003412:	1c6e      	adds	r6, r5, #1
 8003414:	6023      	str	r3, [r4, #0]
 8003416:	60e3      	str	r3, [r4, #12]
 8003418:	60a3      	str	r3, [r4, #8]
 800341a:	7013      	strb	r3, [r2, #0]
 800341c:	65a3      	str	r3, [r4, #88]	; 0x58
 800341e:	2205      	movs	r2, #5
 8003420:	7831      	ldrb	r1, [r6, #0]
 8003422:	4854      	ldr	r0, [pc, #336]	; (8003574 <_svfiprintf_r+0x1ec>)
 8003424:	f000 fa32 	bl	800388c <memchr>
 8003428:	1c75      	adds	r5, r6, #1
 800342a:	2800      	cmp	r0, #0
 800342c:	d11f      	bne.n	800346e <_svfiprintf_r+0xe6>
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	06d3      	lsls	r3, r2, #27
 8003432:	d504      	bpl.n	800343e <_svfiprintf_r+0xb6>
 8003434:	2353      	movs	r3, #83	; 0x53
 8003436:	a904      	add	r1, sp, #16
 8003438:	185b      	adds	r3, r3, r1
 800343a:	2120      	movs	r1, #32
 800343c:	7019      	strb	r1, [r3, #0]
 800343e:	0713      	lsls	r3, r2, #28
 8003440:	d504      	bpl.n	800344c <_svfiprintf_r+0xc4>
 8003442:	2353      	movs	r3, #83	; 0x53
 8003444:	a904      	add	r1, sp, #16
 8003446:	185b      	adds	r3, r3, r1
 8003448:	212b      	movs	r1, #43	; 0x2b
 800344a:	7019      	strb	r1, [r3, #0]
 800344c:	7833      	ldrb	r3, [r6, #0]
 800344e:	2b2a      	cmp	r3, #42	; 0x2a
 8003450:	d016      	beq.n	8003480 <_svfiprintf_r+0xf8>
 8003452:	0035      	movs	r5, r6
 8003454:	2100      	movs	r1, #0
 8003456:	200a      	movs	r0, #10
 8003458:	68e3      	ldr	r3, [r4, #12]
 800345a:	782a      	ldrb	r2, [r5, #0]
 800345c:	1c6e      	adds	r6, r5, #1
 800345e:	3a30      	subs	r2, #48	; 0x30
 8003460:	2a09      	cmp	r2, #9
 8003462:	d94e      	bls.n	8003502 <_svfiprintf_r+0x17a>
 8003464:	2900      	cmp	r1, #0
 8003466:	d111      	bne.n	800348c <_svfiprintf_r+0x104>
 8003468:	e017      	b.n	800349a <_svfiprintf_r+0x112>
 800346a:	3501      	adds	r5, #1
 800346c:	e7b0      	b.n	80033d0 <_svfiprintf_r+0x48>
 800346e:	4b41      	ldr	r3, [pc, #260]	; (8003574 <_svfiprintf_r+0x1ec>)
 8003470:	6822      	ldr	r2, [r4, #0]
 8003472:	1ac0      	subs	r0, r0, r3
 8003474:	2301      	movs	r3, #1
 8003476:	4083      	lsls	r3, r0
 8003478:	4313      	orrs	r3, r2
 800347a:	002e      	movs	r6, r5
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	e7ce      	b.n	800341e <_svfiprintf_r+0x96>
 8003480:	9b07      	ldr	r3, [sp, #28]
 8003482:	1d19      	adds	r1, r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	9107      	str	r1, [sp, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	db01      	blt.n	8003490 <_svfiprintf_r+0x108>
 800348c:	930b      	str	r3, [sp, #44]	; 0x2c
 800348e:	e004      	b.n	800349a <_svfiprintf_r+0x112>
 8003490:	425b      	negs	r3, r3
 8003492:	60e3      	str	r3, [r4, #12]
 8003494:	2302      	movs	r3, #2
 8003496:	4313      	orrs	r3, r2
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	782b      	ldrb	r3, [r5, #0]
 800349c:	2b2e      	cmp	r3, #46	; 0x2e
 800349e:	d10a      	bne.n	80034b6 <_svfiprintf_r+0x12e>
 80034a0:	786b      	ldrb	r3, [r5, #1]
 80034a2:	2b2a      	cmp	r3, #42	; 0x2a
 80034a4:	d135      	bne.n	8003512 <_svfiprintf_r+0x18a>
 80034a6:	9b07      	ldr	r3, [sp, #28]
 80034a8:	3502      	adds	r5, #2
 80034aa:	1d1a      	adds	r2, r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	9207      	str	r2, [sp, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	db2b      	blt.n	800350c <_svfiprintf_r+0x184>
 80034b4:	9309      	str	r3, [sp, #36]	; 0x24
 80034b6:	4e30      	ldr	r6, [pc, #192]	; (8003578 <_svfiprintf_r+0x1f0>)
 80034b8:	2203      	movs	r2, #3
 80034ba:	0030      	movs	r0, r6
 80034bc:	7829      	ldrb	r1, [r5, #0]
 80034be:	f000 f9e5 	bl	800388c <memchr>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d006      	beq.n	80034d4 <_svfiprintf_r+0x14c>
 80034c6:	2340      	movs	r3, #64	; 0x40
 80034c8:	1b80      	subs	r0, r0, r6
 80034ca:	4083      	lsls	r3, r0
 80034cc:	6822      	ldr	r2, [r4, #0]
 80034ce:	3501      	adds	r5, #1
 80034d0:	4313      	orrs	r3, r2
 80034d2:	6023      	str	r3, [r4, #0]
 80034d4:	7829      	ldrb	r1, [r5, #0]
 80034d6:	2206      	movs	r2, #6
 80034d8:	4828      	ldr	r0, [pc, #160]	; (800357c <_svfiprintf_r+0x1f4>)
 80034da:	1c6e      	adds	r6, r5, #1
 80034dc:	7621      	strb	r1, [r4, #24]
 80034de:	f000 f9d5 	bl	800388c <memchr>
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d03c      	beq.n	8003560 <_svfiprintf_r+0x1d8>
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <_svfiprintf_r+0x1f8>)
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d125      	bne.n	8003538 <_svfiprintf_r+0x1b0>
 80034ec:	2207      	movs	r2, #7
 80034ee:	9b07      	ldr	r3, [sp, #28]
 80034f0:	3307      	adds	r3, #7
 80034f2:	4393      	bics	r3, r2
 80034f4:	3308      	adds	r3, #8
 80034f6:	9307      	str	r3, [sp, #28]
 80034f8:	6963      	ldr	r3, [r4, #20]
 80034fa:	9a04      	ldr	r2, [sp, #16]
 80034fc:	189b      	adds	r3, r3, r2
 80034fe:	6163      	str	r3, [r4, #20]
 8003500:	e765      	b.n	80033ce <_svfiprintf_r+0x46>
 8003502:	4343      	muls	r3, r0
 8003504:	0035      	movs	r5, r6
 8003506:	2101      	movs	r1, #1
 8003508:	189b      	adds	r3, r3, r2
 800350a:	e7a6      	b.n	800345a <_svfiprintf_r+0xd2>
 800350c:	2301      	movs	r3, #1
 800350e:	425b      	negs	r3, r3
 8003510:	e7d0      	b.n	80034b4 <_svfiprintf_r+0x12c>
 8003512:	2300      	movs	r3, #0
 8003514:	200a      	movs	r0, #10
 8003516:	001a      	movs	r2, r3
 8003518:	3501      	adds	r5, #1
 800351a:	6063      	str	r3, [r4, #4]
 800351c:	7829      	ldrb	r1, [r5, #0]
 800351e:	1c6e      	adds	r6, r5, #1
 8003520:	3930      	subs	r1, #48	; 0x30
 8003522:	2909      	cmp	r1, #9
 8003524:	d903      	bls.n	800352e <_svfiprintf_r+0x1a6>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0c5      	beq.n	80034b6 <_svfiprintf_r+0x12e>
 800352a:	9209      	str	r2, [sp, #36]	; 0x24
 800352c:	e7c3      	b.n	80034b6 <_svfiprintf_r+0x12e>
 800352e:	4342      	muls	r2, r0
 8003530:	0035      	movs	r5, r6
 8003532:	2301      	movs	r3, #1
 8003534:	1852      	adds	r2, r2, r1
 8003536:	e7f1      	b.n	800351c <_svfiprintf_r+0x194>
 8003538:	ab07      	add	r3, sp, #28
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	003a      	movs	r2, r7
 800353e:	0021      	movs	r1, r4
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <_svfiprintf_r+0x1fc>)
 8003542:	9803      	ldr	r0, [sp, #12]
 8003544:	e000      	b.n	8003548 <_svfiprintf_r+0x1c0>
 8003546:	bf00      	nop
 8003548:	9004      	str	r0, [sp, #16]
 800354a:	9b04      	ldr	r3, [sp, #16]
 800354c:	3301      	adds	r3, #1
 800354e:	d1d3      	bne.n	80034f8 <_svfiprintf_r+0x170>
 8003550:	89bb      	ldrh	r3, [r7, #12]
 8003552:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003554:	065b      	lsls	r3, r3, #25
 8003556:	d400      	bmi.n	800355a <_svfiprintf_r+0x1d2>
 8003558:	e72d      	b.n	80033b6 <_svfiprintf_r+0x2e>
 800355a:	2001      	movs	r0, #1
 800355c:	4240      	negs	r0, r0
 800355e:	e72a      	b.n	80033b6 <_svfiprintf_r+0x2e>
 8003560:	ab07      	add	r3, sp, #28
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	003a      	movs	r2, r7
 8003566:	0021      	movs	r1, r4
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <_svfiprintf_r+0x1fc>)
 800356a:	9803      	ldr	r0, [sp, #12]
 800356c:	f000 f87c 	bl	8003668 <_printf_i>
 8003570:	e7ea      	b.n	8003548 <_svfiprintf_r+0x1c0>
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	08003c24 	.word	0x08003c24
 8003578:	08003c2a 	.word	0x08003c2a
 800357c:	08003c2e 	.word	0x08003c2e
 8003580:	00000000 	.word	0x00000000
 8003584:	080032c5 	.word	0x080032c5

08003588 <_printf_common>:
 8003588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800358a:	0015      	movs	r5, r2
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	688a      	ldr	r2, [r1, #8]
 8003590:	690b      	ldr	r3, [r1, #16]
 8003592:	000c      	movs	r4, r1
 8003594:	9000      	str	r0, [sp, #0]
 8003596:	4293      	cmp	r3, r2
 8003598:	da00      	bge.n	800359c <_printf_common+0x14>
 800359a:	0013      	movs	r3, r2
 800359c:	0022      	movs	r2, r4
 800359e:	602b      	str	r3, [r5, #0]
 80035a0:	3243      	adds	r2, #67	; 0x43
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	2a00      	cmp	r2, #0
 80035a6:	d001      	beq.n	80035ac <_printf_common+0x24>
 80035a8:	3301      	adds	r3, #1
 80035aa:	602b      	str	r3, [r5, #0]
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	069b      	lsls	r3, r3, #26
 80035b0:	d502      	bpl.n	80035b8 <_printf_common+0x30>
 80035b2:	682b      	ldr	r3, [r5, #0]
 80035b4:	3302      	adds	r3, #2
 80035b6:	602b      	str	r3, [r5, #0]
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	2306      	movs	r3, #6
 80035bc:	0017      	movs	r7, r2
 80035be:	401f      	ands	r7, r3
 80035c0:	421a      	tst	r2, r3
 80035c2:	d027      	beq.n	8003614 <_printf_common+0x8c>
 80035c4:	0023      	movs	r3, r4
 80035c6:	3343      	adds	r3, #67	; 0x43
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	1e5a      	subs	r2, r3, #1
 80035cc:	4193      	sbcs	r3, r2
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	0692      	lsls	r2, r2, #26
 80035d2:	d430      	bmi.n	8003636 <_printf_common+0xae>
 80035d4:	0022      	movs	r2, r4
 80035d6:	9901      	ldr	r1, [sp, #4]
 80035d8:	9800      	ldr	r0, [sp, #0]
 80035da:	9e08      	ldr	r6, [sp, #32]
 80035dc:	3243      	adds	r2, #67	; 0x43
 80035de:	47b0      	blx	r6
 80035e0:	1c43      	adds	r3, r0, #1
 80035e2:	d025      	beq.n	8003630 <_printf_common+0xa8>
 80035e4:	2306      	movs	r3, #6
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	682a      	ldr	r2, [r5, #0]
 80035ea:	68e1      	ldr	r1, [r4, #12]
 80035ec:	2500      	movs	r5, #0
 80035ee:	4003      	ands	r3, r0
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d103      	bne.n	80035fc <_printf_common+0x74>
 80035f4:	1a8d      	subs	r5, r1, r2
 80035f6:	43eb      	mvns	r3, r5
 80035f8:	17db      	asrs	r3, r3, #31
 80035fa:	401d      	ands	r5, r3
 80035fc:	68a3      	ldr	r3, [r4, #8]
 80035fe:	6922      	ldr	r2, [r4, #16]
 8003600:	4293      	cmp	r3, r2
 8003602:	dd01      	ble.n	8003608 <_printf_common+0x80>
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	18ed      	adds	r5, r5, r3
 8003608:	2700      	movs	r7, #0
 800360a:	42bd      	cmp	r5, r7
 800360c:	d120      	bne.n	8003650 <_printf_common+0xc8>
 800360e:	2000      	movs	r0, #0
 8003610:	e010      	b.n	8003634 <_printf_common+0xac>
 8003612:	3701      	adds	r7, #1
 8003614:	68e3      	ldr	r3, [r4, #12]
 8003616:	682a      	ldr	r2, [r5, #0]
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	42bb      	cmp	r3, r7
 800361c:	ddd2      	ble.n	80035c4 <_printf_common+0x3c>
 800361e:	0022      	movs	r2, r4
 8003620:	2301      	movs	r3, #1
 8003622:	9901      	ldr	r1, [sp, #4]
 8003624:	9800      	ldr	r0, [sp, #0]
 8003626:	9e08      	ldr	r6, [sp, #32]
 8003628:	3219      	adds	r2, #25
 800362a:	47b0      	blx	r6
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	d1f0      	bne.n	8003612 <_printf_common+0x8a>
 8003630:	2001      	movs	r0, #1
 8003632:	4240      	negs	r0, r0
 8003634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003636:	2030      	movs	r0, #48	; 0x30
 8003638:	18e1      	adds	r1, r4, r3
 800363a:	3143      	adds	r1, #67	; 0x43
 800363c:	7008      	strb	r0, [r1, #0]
 800363e:	0021      	movs	r1, r4
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	3145      	adds	r1, #69	; 0x45
 8003644:	7809      	ldrb	r1, [r1, #0]
 8003646:	18a2      	adds	r2, r4, r2
 8003648:	3243      	adds	r2, #67	; 0x43
 800364a:	3302      	adds	r3, #2
 800364c:	7011      	strb	r1, [r2, #0]
 800364e:	e7c1      	b.n	80035d4 <_printf_common+0x4c>
 8003650:	0022      	movs	r2, r4
 8003652:	2301      	movs	r3, #1
 8003654:	9901      	ldr	r1, [sp, #4]
 8003656:	9800      	ldr	r0, [sp, #0]
 8003658:	9e08      	ldr	r6, [sp, #32]
 800365a:	321a      	adds	r2, #26
 800365c:	47b0      	blx	r6
 800365e:	1c43      	adds	r3, r0, #1
 8003660:	d0e6      	beq.n	8003630 <_printf_common+0xa8>
 8003662:	3701      	adds	r7, #1
 8003664:	e7d1      	b.n	800360a <_printf_common+0x82>
	...

08003668 <_printf_i>:
 8003668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366a:	b08b      	sub	sp, #44	; 0x2c
 800366c:	9206      	str	r2, [sp, #24]
 800366e:	000a      	movs	r2, r1
 8003670:	3243      	adds	r2, #67	; 0x43
 8003672:	9307      	str	r3, [sp, #28]
 8003674:	9005      	str	r0, [sp, #20]
 8003676:	9204      	str	r2, [sp, #16]
 8003678:	7e0a      	ldrb	r2, [r1, #24]
 800367a:	000c      	movs	r4, r1
 800367c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800367e:	2a78      	cmp	r2, #120	; 0x78
 8003680:	d807      	bhi.n	8003692 <_printf_i+0x2a>
 8003682:	2a62      	cmp	r2, #98	; 0x62
 8003684:	d809      	bhi.n	800369a <_printf_i+0x32>
 8003686:	2a00      	cmp	r2, #0
 8003688:	d100      	bne.n	800368c <_printf_i+0x24>
 800368a:	e0c1      	b.n	8003810 <_printf_i+0x1a8>
 800368c:	2a58      	cmp	r2, #88	; 0x58
 800368e:	d100      	bne.n	8003692 <_printf_i+0x2a>
 8003690:	e08c      	b.n	80037ac <_printf_i+0x144>
 8003692:	0026      	movs	r6, r4
 8003694:	3642      	adds	r6, #66	; 0x42
 8003696:	7032      	strb	r2, [r6, #0]
 8003698:	e022      	b.n	80036e0 <_printf_i+0x78>
 800369a:	0010      	movs	r0, r2
 800369c:	3863      	subs	r0, #99	; 0x63
 800369e:	2815      	cmp	r0, #21
 80036a0:	d8f7      	bhi.n	8003692 <_printf_i+0x2a>
 80036a2:	f7fc fd39 	bl	8000118 <__gnu_thumb1_case_shi>
 80036a6:	0016      	.short	0x0016
 80036a8:	fff6001f 	.word	0xfff6001f
 80036ac:	fff6fff6 	.word	0xfff6fff6
 80036b0:	001ffff6 	.word	0x001ffff6
 80036b4:	fff6fff6 	.word	0xfff6fff6
 80036b8:	fff6fff6 	.word	0xfff6fff6
 80036bc:	003600a8 	.word	0x003600a8
 80036c0:	fff6009a 	.word	0xfff6009a
 80036c4:	00b9fff6 	.word	0x00b9fff6
 80036c8:	0036fff6 	.word	0x0036fff6
 80036cc:	fff6fff6 	.word	0xfff6fff6
 80036d0:	009e      	.short	0x009e
 80036d2:	0026      	movs	r6, r4
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	3642      	adds	r6, #66	; 0x42
 80036d8:	1d11      	adds	r1, r2, #4
 80036da:	6019      	str	r1, [r3, #0]
 80036dc:	6813      	ldr	r3, [r2, #0]
 80036de:	7033      	strb	r3, [r6, #0]
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0a7      	b.n	8003834 <_printf_i+0x1cc>
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	1d0a      	adds	r2, r1, #4
 80036ea:	0605      	lsls	r5, r0, #24
 80036ec:	d50b      	bpl.n	8003706 <_printf_i+0x9e>
 80036ee:	680d      	ldr	r5, [r1, #0]
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	2d00      	cmp	r5, #0
 80036f4:	da03      	bge.n	80036fe <_printf_i+0x96>
 80036f6:	232d      	movs	r3, #45	; 0x2d
 80036f8:	9a04      	ldr	r2, [sp, #16]
 80036fa:	426d      	negs	r5, r5
 80036fc:	7013      	strb	r3, [r2, #0]
 80036fe:	4b61      	ldr	r3, [pc, #388]	; (8003884 <_printf_i+0x21c>)
 8003700:	270a      	movs	r7, #10
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	e01b      	b.n	800373e <_printf_i+0xd6>
 8003706:	680d      	ldr	r5, [r1, #0]
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	0641      	lsls	r1, r0, #25
 800370c:	d5f1      	bpl.n	80036f2 <_printf_i+0x8a>
 800370e:	b22d      	sxth	r5, r5
 8003710:	e7ef      	b.n	80036f2 <_printf_i+0x8a>
 8003712:	680d      	ldr	r5, [r1, #0]
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	1d08      	adds	r0, r1, #4
 8003718:	6018      	str	r0, [r3, #0]
 800371a:	062e      	lsls	r6, r5, #24
 800371c:	d501      	bpl.n	8003722 <_printf_i+0xba>
 800371e:	680d      	ldr	r5, [r1, #0]
 8003720:	e003      	b.n	800372a <_printf_i+0xc2>
 8003722:	066d      	lsls	r5, r5, #25
 8003724:	d5fb      	bpl.n	800371e <_printf_i+0xb6>
 8003726:	680d      	ldr	r5, [r1, #0]
 8003728:	b2ad      	uxth	r5, r5
 800372a:	4b56      	ldr	r3, [pc, #344]	; (8003884 <_printf_i+0x21c>)
 800372c:	2708      	movs	r7, #8
 800372e:	9303      	str	r3, [sp, #12]
 8003730:	2a6f      	cmp	r2, #111	; 0x6f
 8003732:	d000      	beq.n	8003736 <_printf_i+0xce>
 8003734:	3702      	adds	r7, #2
 8003736:	0023      	movs	r3, r4
 8003738:	2200      	movs	r2, #0
 800373a:	3343      	adds	r3, #67	; 0x43
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	6863      	ldr	r3, [r4, #4]
 8003740:	60a3      	str	r3, [r4, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	db03      	blt.n	800374e <_printf_i+0xe6>
 8003746:	2204      	movs	r2, #4
 8003748:	6821      	ldr	r1, [r4, #0]
 800374a:	4391      	bics	r1, r2
 800374c:	6021      	str	r1, [r4, #0]
 800374e:	2d00      	cmp	r5, #0
 8003750:	d102      	bne.n	8003758 <_printf_i+0xf0>
 8003752:	9e04      	ldr	r6, [sp, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00c      	beq.n	8003772 <_printf_i+0x10a>
 8003758:	9e04      	ldr	r6, [sp, #16]
 800375a:	0028      	movs	r0, r5
 800375c:	0039      	movs	r1, r7
 800375e:	f7fc fd6b 	bl	8000238 <__aeabi_uidivmod>
 8003762:	9b03      	ldr	r3, [sp, #12]
 8003764:	3e01      	subs	r6, #1
 8003766:	5c5b      	ldrb	r3, [r3, r1]
 8003768:	7033      	strb	r3, [r6, #0]
 800376a:	002b      	movs	r3, r5
 800376c:	0005      	movs	r5, r0
 800376e:	429f      	cmp	r7, r3
 8003770:	d9f3      	bls.n	800375a <_printf_i+0xf2>
 8003772:	2f08      	cmp	r7, #8
 8003774:	d109      	bne.n	800378a <_printf_i+0x122>
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	07db      	lsls	r3, r3, #31
 800377a:	d506      	bpl.n	800378a <_printf_i+0x122>
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	6922      	ldr	r2, [r4, #16]
 8003780:	4293      	cmp	r3, r2
 8003782:	dc02      	bgt.n	800378a <_printf_i+0x122>
 8003784:	2330      	movs	r3, #48	; 0x30
 8003786:	3e01      	subs	r6, #1
 8003788:	7033      	strb	r3, [r6, #0]
 800378a:	9b04      	ldr	r3, [sp, #16]
 800378c:	1b9b      	subs	r3, r3, r6
 800378e:	6123      	str	r3, [r4, #16]
 8003790:	9b07      	ldr	r3, [sp, #28]
 8003792:	0021      	movs	r1, r4
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	9805      	ldr	r0, [sp, #20]
 8003798:	9b06      	ldr	r3, [sp, #24]
 800379a:	aa09      	add	r2, sp, #36	; 0x24
 800379c:	f7ff fef4 	bl	8003588 <_printf_common>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d14c      	bne.n	800383e <_printf_i+0x1d6>
 80037a4:	2001      	movs	r0, #1
 80037a6:	4240      	negs	r0, r0
 80037a8:	b00b      	add	sp, #44	; 0x2c
 80037aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ac:	3145      	adds	r1, #69	; 0x45
 80037ae:	700a      	strb	r2, [r1, #0]
 80037b0:	4a34      	ldr	r2, [pc, #208]	; (8003884 <_printf_i+0x21c>)
 80037b2:	9203      	str	r2, [sp, #12]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	6821      	ldr	r1, [r4, #0]
 80037b8:	ca20      	ldmia	r2!, {r5}
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	0608      	lsls	r0, r1, #24
 80037be:	d516      	bpl.n	80037ee <_printf_i+0x186>
 80037c0:	07cb      	lsls	r3, r1, #31
 80037c2:	d502      	bpl.n	80037ca <_printf_i+0x162>
 80037c4:	2320      	movs	r3, #32
 80037c6:	4319      	orrs	r1, r3
 80037c8:	6021      	str	r1, [r4, #0]
 80037ca:	2710      	movs	r7, #16
 80037cc:	2d00      	cmp	r5, #0
 80037ce:	d1b2      	bne.n	8003736 <_printf_i+0xce>
 80037d0:	2320      	movs	r3, #32
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	439a      	bics	r2, r3
 80037d6:	6022      	str	r2, [r4, #0]
 80037d8:	e7ad      	b.n	8003736 <_printf_i+0xce>
 80037da:	2220      	movs	r2, #32
 80037dc:	6809      	ldr	r1, [r1, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	6022      	str	r2, [r4, #0]
 80037e2:	0022      	movs	r2, r4
 80037e4:	2178      	movs	r1, #120	; 0x78
 80037e6:	3245      	adds	r2, #69	; 0x45
 80037e8:	7011      	strb	r1, [r2, #0]
 80037ea:	4a27      	ldr	r2, [pc, #156]	; (8003888 <_printf_i+0x220>)
 80037ec:	e7e1      	b.n	80037b2 <_printf_i+0x14a>
 80037ee:	0648      	lsls	r0, r1, #25
 80037f0:	d5e6      	bpl.n	80037c0 <_printf_i+0x158>
 80037f2:	b2ad      	uxth	r5, r5
 80037f4:	e7e4      	b.n	80037c0 <_printf_i+0x158>
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	680d      	ldr	r5, [r1, #0]
 80037fa:	1d10      	adds	r0, r2, #4
 80037fc:	6949      	ldr	r1, [r1, #20]
 80037fe:	6018      	str	r0, [r3, #0]
 8003800:	6813      	ldr	r3, [r2, #0]
 8003802:	062e      	lsls	r6, r5, #24
 8003804:	d501      	bpl.n	800380a <_printf_i+0x1a2>
 8003806:	6019      	str	r1, [r3, #0]
 8003808:	e002      	b.n	8003810 <_printf_i+0x1a8>
 800380a:	066d      	lsls	r5, r5, #25
 800380c:	d5fb      	bpl.n	8003806 <_printf_i+0x19e>
 800380e:	8019      	strh	r1, [r3, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	9e04      	ldr	r6, [sp, #16]
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	e7bb      	b.n	8003790 <_printf_i+0x128>
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	1d11      	adds	r1, r2, #4
 800381c:	6019      	str	r1, [r3, #0]
 800381e:	6816      	ldr	r6, [r2, #0]
 8003820:	2100      	movs	r1, #0
 8003822:	0030      	movs	r0, r6
 8003824:	6862      	ldr	r2, [r4, #4]
 8003826:	f000 f831 	bl	800388c <memchr>
 800382a:	2800      	cmp	r0, #0
 800382c:	d001      	beq.n	8003832 <_printf_i+0x1ca>
 800382e:	1b80      	subs	r0, r0, r6
 8003830:	6060      	str	r0, [r4, #4]
 8003832:	6863      	ldr	r3, [r4, #4]
 8003834:	6123      	str	r3, [r4, #16]
 8003836:	2300      	movs	r3, #0
 8003838:	9a04      	ldr	r2, [sp, #16]
 800383a:	7013      	strb	r3, [r2, #0]
 800383c:	e7a8      	b.n	8003790 <_printf_i+0x128>
 800383e:	6923      	ldr	r3, [r4, #16]
 8003840:	0032      	movs	r2, r6
 8003842:	9906      	ldr	r1, [sp, #24]
 8003844:	9805      	ldr	r0, [sp, #20]
 8003846:	9d07      	ldr	r5, [sp, #28]
 8003848:	47a8      	blx	r5
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d0aa      	beq.n	80037a4 <_printf_i+0x13c>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	079b      	lsls	r3, r3, #30
 8003852:	d415      	bmi.n	8003880 <_printf_i+0x218>
 8003854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003856:	68e0      	ldr	r0, [r4, #12]
 8003858:	4298      	cmp	r0, r3
 800385a:	daa5      	bge.n	80037a8 <_printf_i+0x140>
 800385c:	0018      	movs	r0, r3
 800385e:	e7a3      	b.n	80037a8 <_printf_i+0x140>
 8003860:	0022      	movs	r2, r4
 8003862:	2301      	movs	r3, #1
 8003864:	9906      	ldr	r1, [sp, #24]
 8003866:	9805      	ldr	r0, [sp, #20]
 8003868:	9e07      	ldr	r6, [sp, #28]
 800386a:	3219      	adds	r2, #25
 800386c:	47b0      	blx	r6
 800386e:	1c43      	adds	r3, r0, #1
 8003870:	d098      	beq.n	80037a4 <_printf_i+0x13c>
 8003872:	3501      	adds	r5, #1
 8003874:	68e3      	ldr	r3, [r4, #12]
 8003876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	42ab      	cmp	r3, r5
 800387c:	dcf0      	bgt.n	8003860 <_printf_i+0x1f8>
 800387e:	e7e9      	b.n	8003854 <_printf_i+0x1ec>
 8003880:	2500      	movs	r5, #0
 8003882:	e7f7      	b.n	8003874 <_printf_i+0x20c>
 8003884:	08003c35 	.word	0x08003c35
 8003888:	08003c46 	.word	0x08003c46

0800388c <memchr>:
 800388c:	b2c9      	uxtb	r1, r1
 800388e:	1882      	adds	r2, r0, r2
 8003890:	4290      	cmp	r0, r2
 8003892:	d101      	bne.n	8003898 <memchr+0xc>
 8003894:	2000      	movs	r0, #0
 8003896:	4770      	bx	lr
 8003898:	7803      	ldrb	r3, [r0, #0]
 800389a:	428b      	cmp	r3, r1
 800389c:	d0fb      	beq.n	8003896 <memchr+0xa>
 800389e:	3001      	adds	r0, #1
 80038a0:	e7f6      	b.n	8003890 <memchr+0x4>

080038a2 <memmove>:
 80038a2:	b510      	push	{r4, lr}
 80038a4:	4288      	cmp	r0, r1
 80038a6:	d902      	bls.n	80038ae <memmove+0xc>
 80038a8:	188b      	adds	r3, r1, r2
 80038aa:	4298      	cmp	r0, r3
 80038ac:	d303      	bcc.n	80038b6 <memmove+0x14>
 80038ae:	2300      	movs	r3, #0
 80038b0:	e007      	b.n	80038c2 <memmove+0x20>
 80038b2:	5c8b      	ldrb	r3, [r1, r2]
 80038b4:	5483      	strb	r3, [r0, r2]
 80038b6:	3a01      	subs	r2, #1
 80038b8:	d2fb      	bcs.n	80038b2 <memmove+0x10>
 80038ba:	bd10      	pop	{r4, pc}
 80038bc:	5ccc      	ldrb	r4, [r1, r3]
 80038be:	54c4      	strb	r4, [r0, r3]
 80038c0:	3301      	adds	r3, #1
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d1fa      	bne.n	80038bc <memmove+0x1a>
 80038c6:	e7f8      	b.n	80038ba <memmove+0x18>

080038c8 <_free_r>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	0005      	movs	r5, r0
 80038cc:	2900      	cmp	r1, #0
 80038ce:	d010      	beq.n	80038f2 <_free_r+0x2a>
 80038d0:	1f0c      	subs	r4, r1, #4
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	da00      	bge.n	80038da <_free_r+0x12>
 80038d8:	18e4      	adds	r4, r4, r3
 80038da:	0028      	movs	r0, r5
 80038dc:	f000 f918 	bl	8003b10 <__malloc_lock>
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <_free_r+0x90>)
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <_free_r+0x2c>
 80038e8:	6063      	str	r3, [r4, #4]
 80038ea:	6014      	str	r4, [r2, #0]
 80038ec:	0028      	movs	r0, r5
 80038ee:	f000 f917 	bl	8003b20 <__malloc_unlock>
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	d908      	bls.n	800390a <_free_r+0x42>
 80038f8:	6821      	ldr	r1, [r4, #0]
 80038fa:	1860      	adds	r0, r4, r1
 80038fc:	4283      	cmp	r3, r0
 80038fe:	d1f3      	bne.n	80038e8 <_free_r+0x20>
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	1841      	adds	r1, r0, r1
 8003906:	6021      	str	r1, [r4, #0]
 8003908:	e7ee      	b.n	80038e8 <_free_r+0x20>
 800390a:	001a      	movs	r2, r3
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <_free_r+0x4e>
 8003912:	42a3      	cmp	r3, r4
 8003914:	d9f9      	bls.n	800390a <_free_r+0x42>
 8003916:	6811      	ldr	r1, [r2, #0]
 8003918:	1850      	adds	r0, r2, r1
 800391a:	42a0      	cmp	r0, r4
 800391c:	d10b      	bne.n	8003936 <_free_r+0x6e>
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	1809      	adds	r1, r1, r0
 8003922:	1850      	adds	r0, r2, r1
 8003924:	6011      	str	r1, [r2, #0]
 8003926:	4283      	cmp	r3, r0
 8003928:	d1e0      	bne.n	80038ec <_free_r+0x24>
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	1841      	adds	r1, r0, r1
 8003930:	6011      	str	r1, [r2, #0]
 8003932:	6053      	str	r3, [r2, #4]
 8003934:	e7da      	b.n	80038ec <_free_r+0x24>
 8003936:	42a0      	cmp	r0, r4
 8003938:	d902      	bls.n	8003940 <_free_r+0x78>
 800393a:	230c      	movs	r3, #12
 800393c:	602b      	str	r3, [r5, #0]
 800393e:	e7d5      	b.n	80038ec <_free_r+0x24>
 8003940:	6821      	ldr	r1, [r4, #0]
 8003942:	1860      	adds	r0, r4, r1
 8003944:	4283      	cmp	r3, r0
 8003946:	d103      	bne.n	8003950 <_free_r+0x88>
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	1841      	adds	r1, r0, r1
 800394e:	6021      	str	r1, [r4, #0]
 8003950:	6063      	str	r3, [r4, #4]
 8003952:	6054      	str	r4, [r2, #4]
 8003954:	e7ca      	b.n	80038ec <_free_r+0x24>
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	2000021c 	.word	0x2000021c

0800395c <sbrk_aligned>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4e0f      	ldr	r6, [pc, #60]	; (800399c <sbrk_aligned+0x40>)
 8003960:	000d      	movs	r5, r1
 8003962:	6831      	ldr	r1, [r6, #0]
 8003964:	0004      	movs	r4, r0
 8003966:	2900      	cmp	r1, #0
 8003968:	d102      	bne.n	8003970 <sbrk_aligned+0x14>
 800396a:	f000 f8bf 	bl	8003aec <_sbrk_r>
 800396e:	6030      	str	r0, [r6, #0]
 8003970:	0029      	movs	r1, r5
 8003972:	0020      	movs	r0, r4
 8003974:	f000 f8ba 	bl	8003aec <_sbrk_r>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	d00a      	beq.n	8003992 <sbrk_aligned+0x36>
 800397c:	2303      	movs	r3, #3
 800397e:	1cc5      	adds	r5, r0, #3
 8003980:	439d      	bics	r5, r3
 8003982:	42a8      	cmp	r0, r5
 8003984:	d007      	beq.n	8003996 <sbrk_aligned+0x3a>
 8003986:	1a29      	subs	r1, r5, r0
 8003988:	0020      	movs	r0, r4
 800398a:	f000 f8af 	bl	8003aec <_sbrk_r>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d101      	bne.n	8003996 <sbrk_aligned+0x3a>
 8003992:	2501      	movs	r5, #1
 8003994:	426d      	negs	r5, r5
 8003996:	0028      	movs	r0, r5
 8003998:	bd70      	pop	{r4, r5, r6, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	20000220 	.word	0x20000220

080039a0 <_malloc_r>:
 80039a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039a2:	2203      	movs	r2, #3
 80039a4:	1ccb      	adds	r3, r1, #3
 80039a6:	4393      	bics	r3, r2
 80039a8:	3308      	adds	r3, #8
 80039aa:	0006      	movs	r6, r0
 80039ac:	001f      	movs	r7, r3
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d232      	bcs.n	8003a18 <_malloc_r+0x78>
 80039b2:	270c      	movs	r7, #12
 80039b4:	42b9      	cmp	r1, r7
 80039b6:	d831      	bhi.n	8003a1c <_malloc_r+0x7c>
 80039b8:	0030      	movs	r0, r6
 80039ba:	f000 f8a9 	bl	8003b10 <__malloc_lock>
 80039be:	4d32      	ldr	r5, [pc, #200]	; (8003a88 <_malloc_r+0xe8>)
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	001c      	movs	r4, r3
 80039c4:	2c00      	cmp	r4, #0
 80039c6:	d12e      	bne.n	8003a26 <_malloc_r+0x86>
 80039c8:	0039      	movs	r1, r7
 80039ca:	0030      	movs	r0, r6
 80039cc:	f7ff ffc6 	bl	800395c <sbrk_aligned>
 80039d0:	0004      	movs	r4, r0
 80039d2:	1c43      	adds	r3, r0, #1
 80039d4:	d11e      	bne.n	8003a14 <_malloc_r+0x74>
 80039d6:	682c      	ldr	r4, [r5, #0]
 80039d8:	0025      	movs	r5, r4
 80039da:	2d00      	cmp	r5, #0
 80039dc:	d14a      	bne.n	8003a74 <_malloc_r+0xd4>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	0029      	movs	r1, r5
 80039e2:	18e3      	adds	r3, r4, r3
 80039e4:	0030      	movs	r0, r6
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	f000 f880 	bl	8003aec <_sbrk_r>
 80039ec:	9b01      	ldr	r3, [sp, #4]
 80039ee:	4283      	cmp	r3, r0
 80039f0:	d143      	bne.n	8003a7a <_malloc_r+0xda>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	3703      	adds	r7, #3
 80039f6:	1aff      	subs	r7, r7, r3
 80039f8:	2303      	movs	r3, #3
 80039fa:	439f      	bics	r7, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	2f0c      	cmp	r7, #12
 8003a00:	d200      	bcs.n	8003a04 <_malloc_r+0x64>
 8003a02:	270c      	movs	r7, #12
 8003a04:	0039      	movs	r1, r7
 8003a06:	0030      	movs	r0, r6
 8003a08:	f7ff ffa8 	bl	800395c <sbrk_aligned>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d034      	beq.n	8003a7a <_malloc_r+0xda>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	19df      	adds	r7, r3, r7
 8003a14:	6027      	str	r7, [r4, #0]
 8003a16:	e013      	b.n	8003a40 <_malloc_r+0xa0>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	dacb      	bge.n	80039b4 <_malloc_r+0x14>
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	2500      	movs	r5, #0
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	0028      	movs	r0, r5
 8003a24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	1bd1      	subs	r1, r2, r7
 8003a2a:	d420      	bmi.n	8003a6e <_malloc_r+0xce>
 8003a2c:	290b      	cmp	r1, #11
 8003a2e:	d917      	bls.n	8003a60 <_malloc_r+0xc0>
 8003a30:	19e2      	adds	r2, r4, r7
 8003a32:	6027      	str	r7, [r4, #0]
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	d111      	bne.n	8003a5c <_malloc_r+0xbc>
 8003a38:	602a      	str	r2, [r5, #0]
 8003a3a:	6863      	ldr	r3, [r4, #4]
 8003a3c:	6011      	str	r1, [r2, #0]
 8003a3e:	6053      	str	r3, [r2, #4]
 8003a40:	0030      	movs	r0, r6
 8003a42:	0025      	movs	r5, r4
 8003a44:	f000 f86c 	bl	8003b20 <__malloc_unlock>
 8003a48:	2207      	movs	r2, #7
 8003a4a:	350b      	adds	r5, #11
 8003a4c:	1d23      	adds	r3, r4, #4
 8003a4e:	4395      	bics	r5, r2
 8003a50:	1aea      	subs	r2, r5, r3
 8003a52:	429d      	cmp	r5, r3
 8003a54:	d0e5      	beq.n	8003a22 <_malloc_r+0x82>
 8003a56:	1b5b      	subs	r3, r3, r5
 8003a58:	50a3      	str	r3, [r4, r2]
 8003a5a:	e7e2      	b.n	8003a22 <_malloc_r+0x82>
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	e7ec      	b.n	8003a3a <_malloc_r+0x9a>
 8003a60:	6862      	ldr	r2, [r4, #4]
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	d101      	bne.n	8003a6a <_malloc_r+0xca>
 8003a66:	602a      	str	r2, [r5, #0]
 8003a68:	e7ea      	b.n	8003a40 <_malloc_r+0xa0>
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	e7e8      	b.n	8003a40 <_malloc_r+0xa0>
 8003a6e:	0023      	movs	r3, r4
 8003a70:	6864      	ldr	r4, [r4, #4]
 8003a72:	e7a7      	b.n	80039c4 <_malloc_r+0x24>
 8003a74:	002c      	movs	r4, r5
 8003a76:	686d      	ldr	r5, [r5, #4]
 8003a78:	e7af      	b.n	80039da <_malloc_r+0x3a>
 8003a7a:	230c      	movs	r3, #12
 8003a7c:	0030      	movs	r0, r6
 8003a7e:	6033      	str	r3, [r6, #0]
 8003a80:	f000 f84e 	bl	8003b20 <__malloc_unlock>
 8003a84:	e7cd      	b.n	8003a22 <_malloc_r+0x82>
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	2000021c 	.word	0x2000021c

08003a8c <_realloc_r>:
 8003a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a8e:	0007      	movs	r7, r0
 8003a90:	000e      	movs	r6, r1
 8003a92:	0014      	movs	r4, r2
 8003a94:	2900      	cmp	r1, #0
 8003a96:	d105      	bne.n	8003aa4 <_realloc_r+0x18>
 8003a98:	0011      	movs	r1, r2
 8003a9a:	f7ff ff81 	bl	80039a0 <_malloc_r>
 8003a9e:	0005      	movs	r5, r0
 8003aa0:	0028      	movs	r0, r5
 8003aa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d103      	bne.n	8003ab0 <_realloc_r+0x24>
 8003aa8:	f7ff ff0e 	bl	80038c8 <_free_r>
 8003aac:	0025      	movs	r5, r4
 8003aae:	e7f7      	b.n	8003aa0 <_realloc_r+0x14>
 8003ab0:	f000 f83e 	bl	8003b30 <_malloc_usable_size_r>
 8003ab4:	9001      	str	r0, [sp, #4]
 8003ab6:	4284      	cmp	r4, r0
 8003ab8:	d803      	bhi.n	8003ac2 <_realloc_r+0x36>
 8003aba:	0035      	movs	r5, r6
 8003abc:	0843      	lsrs	r3, r0, #1
 8003abe:	42a3      	cmp	r3, r4
 8003ac0:	d3ee      	bcc.n	8003aa0 <_realloc_r+0x14>
 8003ac2:	0021      	movs	r1, r4
 8003ac4:	0038      	movs	r0, r7
 8003ac6:	f7ff ff6b 	bl	80039a0 <_malloc_r>
 8003aca:	1e05      	subs	r5, r0, #0
 8003acc:	d0e8      	beq.n	8003aa0 <_realloc_r+0x14>
 8003ace:	9b01      	ldr	r3, [sp, #4]
 8003ad0:	0022      	movs	r2, r4
 8003ad2:	429c      	cmp	r4, r3
 8003ad4:	d900      	bls.n	8003ad8 <_realloc_r+0x4c>
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	0031      	movs	r1, r6
 8003ada:	0028      	movs	r0, r5
 8003adc:	f7ff fbae 	bl	800323c <memcpy>
 8003ae0:	0031      	movs	r1, r6
 8003ae2:	0038      	movs	r0, r7
 8003ae4:	f7ff fef0 	bl	80038c8 <_free_r>
 8003ae8:	e7da      	b.n	8003aa0 <_realloc_r+0x14>
	...

08003aec <_sbrk_r>:
 8003aec:	2300      	movs	r3, #0
 8003aee:	b570      	push	{r4, r5, r6, lr}
 8003af0:	4d06      	ldr	r5, [pc, #24]	; (8003b0c <_sbrk_r+0x20>)
 8003af2:	0004      	movs	r4, r0
 8003af4:	0008      	movs	r0, r1
 8003af6:	602b      	str	r3, [r5, #0]
 8003af8:	f7fc ff78 	bl	80009ec <_sbrk>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d103      	bne.n	8003b08 <_sbrk_r+0x1c>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d000      	beq.n	8003b08 <_sbrk_r+0x1c>
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	bd70      	pop	{r4, r5, r6, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	20000224 	.word	0x20000224

08003b10 <__malloc_lock>:
 8003b10:	b510      	push	{r4, lr}
 8003b12:	4802      	ldr	r0, [pc, #8]	; (8003b1c <__malloc_lock+0xc>)
 8003b14:	f000 f814 	bl	8003b40 <__retarget_lock_acquire_recursive>
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	20000228 	.word	0x20000228

08003b20 <__malloc_unlock>:
 8003b20:	b510      	push	{r4, lr}
 8003b22:	4802      	ldr	r0, [pc, #8]	; (8003b2c <__malloc_unlock+0xc>)
 8003b24:	f000 f80d 	bl	8003b42 <__retarget_lock_release_recursive>
 8003b28:	bd10      	pop	{r4, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	20000228 	.word	0x20000228

08003b30 <_malloc_usable_size_r>:
 8003b30:	1f0b      	subs	r3, r1, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	1f18      	subs	r0, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da01      	bge.n	8003b3e <_malloc_usable_size_r+0xe>
 8003b3a:	580b      	ldr	r3, [r1, r0]
 8003b3c:	18c0      	adds	r0, r0, r3
 8003b3e:	4770      	bx	lr

08003b40 <__retarget_lock_acquire_recursive>:
 8003b40:	4770      	bx	lr

08003b42 <__retarget_lock_release_recursive>:
 8003b42:	4770      	bx	lr

08003b44 <_init>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

08003b50 <_fini>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr
